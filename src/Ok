(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
 'use strict';
 window.name = "NG_DEFER_BOOTSTRAP!";

 //Get version Number
var version = require('../package.json').version;
global.version = version;
global.showCopyRight = true;

 var erticulate =
   angular.module('erticulate', [

     'ui.router',
     'ngAnimate',
     'ui.bootstrap',
     'angular-loading-bar',
     'toastr',
     'ngFileUpload',
     'angular-uuid',
     'sun.scrollable',
     'angular.filter',
     'angular-google-analytics',
     require('./util').name,
     require('./modules').name
     // require('./modules/common/angular-material-calendar-customized').name
   ]);

 erticulate.config([
   '$urlRouterProvider',
   '$locationProvider',
   'cfpLoadingBarProvider',
   'AnalyticsProvider',
   'toastrConfig',
   function(
     $urlRouterProvider,
     $locationProvider,
     cfpLoadingBarProvider,
     AnalyticsProvider,
     toastrConfig
   ) {
     $urlRouterProvider.when('', '/login');
     $urlRouterProvider.otherwise('/404');
     $urlRouterProvider.when('/', ['$state', 'loggedInUser', '$window', '$rootScope', function($state, loggedInUser, $window, $rootScope) {
       if (!Object.keys(loggedInUser.getData()).length) {
         $state.go('public.login');
         $rootScope.logout();
       } else {
         if (loggedInUser.getData().userType === 1) {
           $state.go('auth.dashboard');
         } else {
           $state.go('auth.mentor-presenter-list');
         }
       }
     }]);
     // $locationProvider.html5Mode(true);
     $locationProvider.hashPrefix('');
     cfpLoadingBarProvider.includeSpinner = false;
     cfpLoadingBarProvider.parentSelector = '#upload-ppt-loading-bar-container';
     // cfpLoadingBarProvider.spinnerTemplate = '<div><span class="fa fa-spinner">Custom Loading Message...</div>';
     AnalyticsProvider.setAccount('UA-119779167-1');
     AnalyticsProvider.useAnalytics(false)
                      .trackUrlParams(true)
                      .setPageEvent('$stateChangeSuccess');
     angular.extend(toastrConfig, { maxOpened: 1 });
   }
 ]);
 erticulate.run([
   '$rootScope',
   '$state',
   'loggedInUser',
   'Analytics',
   '$window',
   function($rootScope, $state, loggedInUser, Analytics, $window) {
     console.log = function() {};
     // document.addEventListener('contextmenu', function(event) {
     //     event.preventDefault();
     // });
     $rootScope.goBack = function() {
       window.history.back();
     };

     $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState) {
       // console.log('in stateChangeStart');
       if (toState.type === 'public') {
         $rootScope.isPublicPage = true;
       } else {
         $rootScope.isPublicPage = false;
       }

       if (!Object.keys(loggedInUser.getData()).length && toState.type === 'auth') {
         console.log('Can not go dashboard before login');
         event.preventDefault();
         $state.go('public.login');
         $rootScope.isPublicPage = true;
       }

       if (Object.keys(loggedInUser.getData()).length && toState.type === 'public') {
         console.log('fromState', fromState);
         if (loggedInUser.getData().userType === 1) {
           $state.go('auth.dashboard');
         } else {
           $state.go('auth.mentor-presenter-list');
         }
         $rootScope.isPublicPage = false;
         event.preventDefault();
       }

       if ((toState.role === 'mentor') && loggedInUser.getData().userType == 1) {
         event.preventDefault();
       }
     });
   }


 ]);


 bootstrapApplication();

 function bootstrapApplication() {
   angular.element(document).ready(function() {
     angular.resumeBootstrap(['erticulate']);
   });
 }

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../package.json":56,"./modules":45,"./util":55}],2:[function(require,module,exports){
'use strict';

module.exports = [
    '$scope',
    '$state',
    '$window',
    'toastr',
    '$stateParams',
    'uuid',
    'FormMessage',
    'CommonService',
    'verifyEmail',
    'loggedInUser',
    function($scope, $state, $window, toastr, $stateParams, uuid, FormMessage, CommonService, verifyEmail, loggedInUser) {

        function init() {
            // $scope.generateDeviceId();
            $scope.message = FormMessage;
            $scope.emailVerified = false;
            $scope.userNotFound = false;
            if (verifyEmail !== true) {
                if (verifyEmail === 400) {
                    $scope.userNotFound = true;
                    $scope.emailVerified = false;
                } else {
                    $scope.emailVerified = true;
                    $scope.userNotFound = false;
                }
            } else {
                toastr.success('Email verified', 'Success');
                $state.go('public.login');
            }
        }

        init();
    }
];
},{}],3:[function(require,module,exports){
'use strict';

module.exports = [
    '$scope',
    '$state',
    'FormMessage',
    '$uibModalInstance',
    'AppConstant',
    'toastr',
    'CommonService',
    'AppConfig',
    function($scope, $state, FormMessage, $uibModalInstance, AppConstant, toastr, CommonService, AppConfig) {

        function init() {
            $scope.changePasswordDetails = {
                oldPassword: '',
                newPassword: '',
                confirmPassword: ''
            };
            $scope.message = FormMessage;
            $scope.constant = AppConstant;
            $scope.isCollapsed = true;
            $scope.viewPassword = true;
            $scope.passwordValidated = false;
            $scope.inputType = 'password';
            $scope.passwordValidations = [{
                'text': 'Passwords must contain at least 1 lower case.',
                'valid': false
            }, {
                'text': 'Passwords must contain at least 1 upper case.',
                'valid': false
            }, {
                'text': 'Passwords must contain at least at least 1 number.',
                'valid': false
            }];

        }

        init();

        $scope.focusPassword = function() {
            $scope.isCollapsed = false;
        };
        $scope.blurPassword = function() {
            $scope.isCollapsed = true;
        };
        $scope.toggelView = function() {
            $scope.viewPassword = !$scope.viewPassword;

            if ($scope.inputType == 'password')
                $scope.inputType = 'text';
            else
                $scope.inputType = 'password';
        };

        $scope.validatePassword = function() {
            $scope.passwordValidations.forEach(function(each) {
                each.valid = false;
            });
            if (hasLowerCase($scope.changePasswordDetails.newPassword)) {
                $scope.passwordValidations[0].valid = true;
            }
            if (hasUpperCase($scope.changePasswordDetails.newPassword)) {
                $scope.passwordValidations[1].valid = true;
            }
            if (hasNumber($scope.changePasswordDetails.newPassword)) {
                $scope.passwordValidations[2].valid = true;
            }
            $scope.passwordValidated = true;
            $scope.passwordValidations.forEach(function(each) {
                if (!each.valid) {
                    $scope.passwordValidated = false;
                }
            });

        };

        function hasLowerCase(str) {
            return (/[a-z]/.test(str));
        };

        function hasUpperCase(str) {
            return (/[A-Z]/.test(str));
        };

        function hasNumber(myString) {
            return /\d/.test(myString);
        }

        $scope.changePassword = function() {
            if ($scope.passwordValidated) {
                var data = angular.copy($scope.changePasswordDetails);
                delete data.confirmPassword;
                CommonService
                    .changePassword(data)
                    .then(function(response) {
                            console.log('in change password controller', response);
                            toastr.success('Password changed', 'Success');
                            $uibModalInstance.close();
                        },
                        function(error) {
                            toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                        });
            } else {
                toastr.error('Please give proper password.', 'Error');
            }
        };

        $scope.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };
    }
];
},{}],4:[function(require,module,exports){
'use strict';

module.exports = [
    '$scope',
    '$state',
    'AppConfig',
    '$rootScope',
    '$uibModal',
    'loggedInUser',
    'toastr',
    'FormMessage',
    '$window',
    'API',
    'CommonService',
    function($scope, $state, AppConfig, $rootScope, $uibModal, loggedInUser, toastr, FormMessage, $window, API, CommonService) {
        $scope.init = function() {
            console.log('state common ', loggedInUser.getData());
            $rootScope.picUrl = API.picUrl;
            $scope.stateInfo = {
                name: $state.current.stateName,
                desc: $state.current.stateDesc,
                details: $state.current.details
            };
            $scope.showCopyright = true;
            // $scope.stateInfo = {
            //     name: $state.current.stateName,
            //     desc: $state.current.stateDesc
            // };

            //Set Version information to show in footer
            $scope.version = version;
            $scope.date =  new Date();

            $scope.erticulateUserData = loggedInUser.getData();
            if ($scope.erticulateUserData.userType == 3) {
                $scope.sideMenu = AppConfig.leftMenuConfigForSuperAdmin;
            } else if ($scope.erticulateUserData.userType == 4) {
                $scope.sideMenu = AppConfig.leftMenuConfigForAdmin;
            }

            footer();

            $scope.message = FormMessage;
            $rootScope.isCollapsed = false;
            $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState) {
                if(toState.name == 'auth.videoView' || toState.name == 'auth.video' || toState.name == "auth.videoMentor")
                  $scope.showCopyright = false;
                else
                  $scope.showCopyright = true;
                console.log('toState', toState.name.split('.')[1]);
                if (toState.name.split('.')[1] === 'video') {
                    $rootScope.page = 'video';
                } else {
                    $rootScope.page = 'other';
                }
                $scope.stateInfo.name = toState.stateName;
                $scope.stateInfo.details = toState.details;

            });

            var name = $scope.erticulateUserData.firstName + ' ' + $scope.erticulateUserData.lastName;
            $window.intercomSettings = {
                app_id: "xaak7ar1",
                name: name, // Full name
                email: $scope.erticulateUserData.email, // Email address
                created_at: Number((new Date($scope.erticulateUserData.createDate).getTime() / 1000).toFixed(0)) // Signup date as a Unix timestamp
            };
            console.log('$window.intercomSettings ', $window.intercomSettings);
            var w = window;
            var ic = w.Intercom;
            if (typeof ic === "function") {
                ic('reattach_activator');
                ic('update', intercomSettings);
            } else {
                var d = document;
                var i = function() { i.c(arguments) };
                i.q = [];
                i.c = function(args) { i.q.push(args) };
                w.Intercom = i;

                function l() {
                    var s = d.createElement('script');
                    s.type = 'text/javascript';
                    s.async = true;
                    s.src = 'https://widget.intercom.io/widget/xaak7ar1';
                    var x = d.getElementsByTagName('script')[0];
                    x.parentNode.insertBefore(s, x);
                }
                l();
                // if (w.attachEvent) { w.attachEvent('onload', l); } else { w.addEventListener('load', l, false); }
            }
            // console.log($scope.erticulateUserData);
        };
        //init();

        // $scope.show = function() {
        //     $intercom.show();
        // };

        function footer() {
          if((window.location.href.split("#")[1].substr(0, 6) == '/video') || (window.location.href.split("#")[1].substr(0, 6) == '/watch') || (window.location.href.split("#")[1].substr(0, 6) == '/mentor'))
            $scope.showCopyright = false;
          else
            $scope.showCopyright = true;
        }

        $scope.moveToHome = function() {
            if ($scope.erticulateUserData.userType === 1) {
                $state.go('auth.dashboard');
            } else {
                $state.go('auth.mentor-presenter-list');
            }
        };

        $scope.backToPreviousPage = function() {
            $window.history.back();
        };

        $scope.collapseSidemenu = function() {
            window.scrollTo(0, 0);
            $scope.showHeading = !$scope.showHeading;
            $rootScope.isCollapsed = !$rootScope.isCollapsed;
        };

        $scope.setActiveMenu = function(menu) {
            if ($state.current.module === menu.moduleKey) {
                return 'active';
            }
        };

        $scope.navigateTo = function(menu) {
            if (menu.link && menu.link !== 'admin.company-list') {
                $state.go(menu.link);
            } else if (menu.link && menu.link === 'admin.company-list') {
                $state.go(menu.link, { id: $window.localStorage.orgId, adminRef: $window.localStorage.companyId });
            }
        };

        // $scope.logout = function() {
        //     loggedInUser.resetData();
        //     $state.go('login');
        // };

        $rootScope.logout = function() {
            CommonService
                .logout()
                .then(function(response) {
                        console.log('logout', response);
                        // toastr.success('Logged out successfully', 'Success'); // jshint ignore:line
                        loggedInUser.resetData();
                        localStorage.removeItem('userSession');
                        localStorage.removeItem('pptCount');
                        $window.intercomSettings = {
                            app_id: "xaak7ar1"
                        };
                        var w = window;
                        var ic = w.Intercom;
                        if (typeof ic === "function") {
                            ic('reattach_activator');
                            ic('update', intercomSettings);
                            w.Intercom('shutdown');
                            $state.go('public.login');
                        } else {
                            var d = document;
                            var i = function() { i.c(arguments) };
                            i.q = [];
                            i.c = function(args) { i.q.push(args) };
                            w.Intercom = i;

                            function l() {
                                var s = d.createElement('script');
                                s.type = 'text/javascript';
                                s.async = true;
                                s.src = 'https://widget.intercom.io/widget/xaak7ar1';
                                var x = d.getElementsByTagName('script')[0];
                                x.parentNode.insertBefore(s, x);
                            }
                            l();
                            // if (w.attachEvent) { w.attachEvent('onload', l); } else { w.addEventListener('load', l, false); }
                        }
                        if ($window.localStorage.companyId) {
                            localStorage.removeItem('companyId');
                        }
                        if ($window.localStorage.orgId) {
                            localStorage.removeItem('orgId');
                        }
                    },
                    function(error) {
                        toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                    });
        };


        $scope.openChangePassword = function() {
            var changePasswordModalInstance = $uibModal.open({
                templateUrl: './resources/templates/change-password-modal.html',
                controller: 'ChangePasswordModalController',
                size: 'md',
                backdrop: 'static'
            });

            changePasswordModalInstance.result.then(function(data) {
                console.log('in success', data);
                $scope.chnagePassword(data);
            }, function() {
                console.log('in error');
            });
        };


        $scope.chnagePassword = function(data) {
            delete data.confirmPassword;
            PublicService
                .changePassword(data)
                .then(function(response) {
                        console.log('in change password controller', response);
                        toastr.success($scope.message.changePasswordSuccessMessage[$rootScope.selectedLanguage]); //jshint ignore:line
                    },
                    function(error) {
                        toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                    });
        };

        $scope.closeMenu = function() {
            console.log('hi');
        };
        $scope.openUploadModal = function() {
            $scope.modalInstance = $uibModal.open({
                templateUrl: 'resources/templates/upload-presentation-modal.html',
                size: 'sm',
                backdrop: 'static',
                keyboard: false,
                scope: $scope,
                resolve: {
                    scope: function() {
                        return $scope;
                    }
                },
                windowClass: 'upload-presentation-modal-wrapper',
                controller: 'UploadPresentationModalController'
            });
        };
        // $(document).on('click', 'body *', function() {
        //     if ($scope.openMenu) {
        //         console.log('in func', $scope.openMenu);
        //     }
        // });

        $("body").click(function(e) {
            if ($scope.openMenu) {
                if ($(e.target).hasClass('menu-open-close')) {
                    return;
                } else {
                    $('#menu_id').removeClass('open');
                    $scope.openMenu = false;
                }
            }
        });

        $scope.openDropDownMenu = function() {
            $scope.openMenu = !$scope.openMenu;
            if ($scope.openMenu) {
                $('#menu_id').addClass('open');
            } else if ($('#menu_id').hasClass('open')) {
                $('#menu_id').removeClass('open');
            }
        };

    }
];

},{}],5:[function(require,module,exports){
'use strict';

module.exports = [
    '$scope',
    '$state',
    'toastr',
    '$uibModal',
    'AppConfig',
    'AppConstant',
    '$stateParams',
    '$q',
    'PresentationService',
    'loggedInUser',
    '$rootScope',
    function($scope, $state, toastr, $uibModal, AppConfig, AppConstant, $stateParams, $q, PresentationService, loggedInUser, $rootScope) {
        var rateTimer;

        if(!readCookie("mycookie")) {
          $scope.showCookieBar = true;
          document.getElementById("cookie-notice").style.display = "block";
        }

        $scope.init = function() {

            if($stateParams.presentationRef && $stateParams.practiceRef) {
              $scope.selectPractice({_id: $stateParams.practiceRef, presentationRef: $stateParams.presentationRef});
              $scope.showSection = 'feedbacks';
              //window.history.pushState(null, null, '/dashboard');
              $scope.presentationActiveID = $stateParams.practiceRef;
            } else {
              $scope.showSection = 'notifications';
            }

            $scope.scope = $scope;
            $scope.selectedMentorList = [];
            $scope.userId = loggedInUser.getData()._id;
            $scope.userDetails = loggedInUser.getData();
            $scope.role = AppConfig.role;
            $scope.presentationFilter = AppConfig.presentationFilter;
            $scope.filterData = {
                filterType: $scope.presentationFilter[0]
            };
            $scope.status = AppConfig.userTypeStatus;
            $scope.gradeConfig = AppConfig.gradeConfig;
            $scope.activeMenu = false;
            $scope.cfg = {
                currentPage: 1,
                rowsPerPage: 4
            };
            $scope.statusList = [{
                'name': 'Active',
                'value': 1
            }, {
                'name': 'Inactive',
                'value': 2
            }];
            $scope.searchObject = {};
            $scope.searchObject.noFilter = false;
            $scope.userTypes = [{
                'name': 'Presenter',
                'value': 1
            }, {
                'name': 'Mentor',
                'value': 2
            }];
            $scope.userData = {
                userType: $scope.userTypes[0]
            };
            $scope.headerFormat = {
                'companyName': {
                    'head': 'Company Name',
                    'sort': true,
                    'key': 'companyName',
                    'date': false,
                    'option': [{
                        'value': 'alphabetical order',
                        'type': 1,
                        'isActive': false
                    }, {
                        'value': 'anti alphabetical',
                        'type': -1,
                        'isActive': false
                    }]
                },
                'ownerName': {
                    'head': 'Owner Name',
                    'sort': true,
                    'date': true,
                    'key': 'ownerName',
                    'option': [{
                        'value': 'alphabetical order',
                        'type': 1,
                        'isActive': false
                    }, {
                        'value': 'anti alphabetical',
                        'type': -1,
                        'isActive': false
                    }]
                },
                'ownerContact': {
                    'head': 'Owner Contact',
                    'sort': true,
                    'date': false,
                    'key': 'ownerContact',
                    'option': [{
                        'value': 'alphabetical order',
                        'type': 1,
                        'isActive': false
                    }, {
                        'value': 'anti alphabetical',
                        'type': -1,
                        'isActive': false
                    }]
                },
                'numberOfUsers': {
                    'head': 'No Of Users',
                    'sort': true,
                    'date': true,
                    'key': 'numberOfUsers',
                    'option': [{
                        'value': 'alphabetical order',
                        'type': 1,
                        'isActive': false
                    }, {
                        'value': 'anti alphabetical',
                        'type': -1,
                        'isActive': false
                    }]
                },
                'maxUsers': {
                    'head': 'Max No Of Users',
                    'sort': true,
                    'date': true,
                    'key': 'maxUsers',
                    'option': [{
                        'value': 'alphabetical order',
                        'type': 1,
                        'isActive': false
                    }, {
                        'value': 'anti alphabetical',
                        'type': -1,
                        'isActive': false
                    }]
                },
                'status': {
                    'head': 'Status',
                    'sort': true,
                    'date': true,
                    'key': 'status',
                    'option': [{
                        'value': 'alphabetical order',
                        'type': 1,
                        'isActive': false
                    }, {
                        'value': 'anti alphabetical',
                        'type': -1,
                        'isActive': false
                    }]
                }
            };
            $scope.list = {
                data: [{
                    'companyName': 'ABC',
                    'ownerName': 'Owner 1',
                    'ownerContact': '12/03/2018',
                    'numberOfUsers': 2,
                    'maxUsers': 3,
                    'status': 'Active'
                }, {
                    'companyName': 'ABCD',
                    'ownerName': 'Owner 2',
                    'ownerContact': '12/03/2018',
                    'numberOfUsers': 3,
                    'maxUsers': 3,
                    'status': 'Active'
                }]
            };
            $scope.defaultSortConfig = AppConfig.defaultSortConfig;
            $scope.cfg = {
                currentPage: 1,
                rowsPerPage: $scope.defaultSortConfig.limit
            };
            $scope.getPresentationList();
            $scope.viewData = { active: 'feedback' };
            $scope.isEditable = false;

            $scope.grades = {
                'introduction': {
                    'heading': 'Introduction',
                    'id': 'introduction',
                    'isCollapsed': false,
                    'subCategory': {
                        'greeting': {
                            'heading': 'Greeting',
                            'id': 'greeting',
                        },
                        'credibility': {
                            'heading': 'Credibility/Personalization',
                            'id': 'credibility'
                        },
                        'wiifm': {
                            'heading': 'W.I.I.F.M.',
                            'id': 'wiifm'
                        },
                        'funneling': {
                            'heading': 'Funneling',
                            'id': 'funneling'
                        },
                        'rm': {
                            'heading': 'RM',
                            'id': 'rm'
                        },
                        'initialSummary': {
                            'heading': 'Initial Summary',
                            'id': 'initialSummary'
                        }
                    }
                },
                'body': {
                    'heading': 'Body',
                    'id': 'body',
                    'isCollapsed': false,
                    'subCategory': {
                        'topicConcept1': {
                            'heading': 'Topic Concept #1',
                            'id': 'topicConcept1',
                            'subCategory': {
                                'state': {
                                    'heading': 'State',
                                    'id': 'state'
                                },
                                'define': {
                                    'heading': 'Define',
                                    'id': 'define'
                                },
                                'support': {
                                    'heading': 'Support',
                                    'id': 'support'
                                },
                                'relate': {
                                    'heading': 'Relate',
                                    'id': 'relate'
                                }
                            }
                        },
                        'transitionIntegrateLink': {
                            'heading': 'Transition (Integrate/Link)',
                            'id': 'transitionIntegrateLink'
                        },
                        'topicConcept2': {
                            'heading': 'Topic Concept #2',
                            'id': 'topicConcept2',
                            'subCategory': {
                                'state': {
                                    'heading': 'State',
                                    'id': 'state'
                                },
                                'define': {
                                    'heading': 'Define',
                                    'id': 'define'
                                },
                                'support': {
                                    'heading': 'Support',
                                    'id': 'support'
                                },
                                'relate': {
                                    'heading': 'Relate',
                                    'id': 'relate'
                                }
                            }
                        },
                        'transitionInternalSummary': {
                            'heading': 'Transition (Internal Summary)',
                            'id': 'transitionInternalSummary'
                        },
                        'topicConcept3': {
                            'heading': 'Topic Concept #3',
                            'id': 'topicConcept3',
                            'subCategory': {
                                'state': {
                                    'heading': 'State',
                                    'id': 'state'
                                },
                                'define': {
                                    'heading': 'Define',
                                    'id': 'define'
                                },
                                'support': {
                                    'heading': 'Support',
                                    'id': 'support'
                                },
                                'relate': {
                                    'heading': 'Relate',
                                    'id': 'relate'
                                }
                            }
                        }
                    }
                },
                'conclusion': {
                    'heading': 'Conclusion',
                    'id': 'conclusion',
                    'isCollapsed': false,
                    'subCategory': {
                        'brakeLight': {
                            'heading': 'Brake light',
                            'id': 'brakeLight'
                        },
                        'summary': {
                            'heading': 'Summary',
                            'id': 'summary'
                        },
                        'appealToAction': {
                            'heading': 'Appeal to Action/Use',
                            'id': 'appealToAction'
                        }
                    }
                },
                'delivery': {
                    'heading': 'Delivery',
                    'id': 'delivery',
                    'isCollapsed': false,
                    'subCategory': {
                        'conversational': {
                            'heading': 'Conversational',
                            'id': 'conversational'
                        },
                        'rate': {
                            'heading': 'Rate',
                            'id': 'rate'
                        },
                        'volume': {
                            'heading': 'Volume',
                            'id': 'volume'
                        },
                        'eyeContact': {
                            'heading': 'Eye Contact',
                            'id': 'eyeContact'
                        },
                        'bodyLanguage': {
                            'heading': 'Body Language',
                            'id': 'bodyLanguage'
                        },
                        'useOfNotes': {
                            'heading': 'Use of Notes',
                            'id': 'useOfNotes'
                        }
                    }
                },
                'useOfVisuals': {
                    'heading': 'Use Of Visuals',
                    'id': 'useOfVisuals',
                    'isCollapsed': false,
                    'subCategory': {
                        'structure': {
                            'heading': 'Structure',
                            'id': 'structure'
                        },
                        'supporting': {
                            'heading': 'Supporting',
                            'id': 'supporting'
                        }
                    }
                }
            };
            $scope.tabs = [{
                'heading': 'Mentor',
                'active': false,
                'link': 'auth.mentor-presenter-list'
            }, {
                'heading': 'Practice',
                'active': false,
                'link': 'auth.dashboard'
            }];
            $scope.presenterTabs = [{
                'heading': 'Practice',
                'active': false,
                'link': 'auth.dashboard'
            }];
            if ($scope.userDetails.userType == 1) {
                $scope.tabs = $scope.presenterTabs;
            };
            $scope.selectedTab = $scope.tabs[0];
            if ($scope.userDetails.userType !== 1) {
                $scope.selectedTab = $scope.tabs[1];
            }
            getAllPresenterNotifications();
            $scope.ratingArray = [{
                'value': 1,
                'filled': false
            }, {
                'value': 2,
                'filled': false
            }, {
                'value': 3,
                'filled': false
            }, {
                'value': 4,
                'filled': false
            }, {
                'value': 5,
                'filled': false
            }];

            $rootScope.page = 'other';

        };

        $rootScope.initializeDashboard = $scope.init;

        $scope.savePresentationDetails = function() {
            console.log('presentationDetails ', $scope.presentationDetails);
            var data = {
                title: $scope.presentationDetails.title,
                clientName: $scope.presentationDetails.clientName,
                productName: $scope.presentationDetails.productName,
            };
            $scope.editPresentation = true;
            if ($scope.presentationDetails.title) {
                PresentationService.editPresentation($scope.presentationDetails._id, data)
                    .then(function(response) {
                        $scope.isEditable = false;
                        $scope.presentationList.forEach(function(each, index) {
                            if (each._id === $scope.currentPresentationId) {
                                $scope.presentationList[index].title = $scope.presentationDetails.title;
                                $scope.presentationList[index].clientName = $scope.presentationDetails.clientName;
                                $scope.presentationList[index].productName = $scope.presentationDetails.productName;
                                $scope.presentationList[index].active = true;
                            }
                        });
                        toastr.success('Presentation details updated.', 'Success');
                        console.log('$scope.currentPresentation ', $scope.currentPresentation);
                    }, function(error) {
                        toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                    });
            }
        };

        function getAllPresenterNotifications() {
            PresentationService.getAllPresenterNotifications()
                .then(function(response) {
                    console.log('response in notificationList ', response);
                    $scope.notificationObject = response.data;
                }, function(error) {
                    console.log('error ', error);
                });
        };

        $scope.openEditPresentation = function() {
            $scope.editPresentation = false;
            $scope.isEditable = true;
        };

        $scope.cancelEditPresentation = function() {
            $scope.isEditable = false;
            $scope.presentationDetails = angular.copy($scope.savedResponse);
        };

        $scope.modifyRate = function(index, isSub, comment) {
            comment.ratingArray.forEach(function(each) {
                each.filled = false;
                if (each.value <= index) {
                    each.filled = true;
                }
            });
            rateFeedback(comment, index);
        };

        function rateFeedback(comment, rating) {
            if (rateTimer) {
                clearTimeout(rateTimer);
            }
            rateTimer = setTimeout(function() {
                PresentationService.acknowledgeComment(comment.commentId, { ratingOnMentorsComment: rating, presentationRef: $scope.presentationDetails._id })
                    .then(function(response) {
                        console.log('response ', response);
                        comment.ratingOnMentorsComment = rating;
                        toastr.success("Mentor feedback rating submitted.", 'Success');
                    }, function(error) {
                        console.log('error ', error);
                        toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                    }).finally(function() {
                        clearTimeout(rateTimer);
                    });
            }, 10000);

        };

        $scope.selectTab = function(tab) {
            $scope.selectedTab = tab;
        };

        $scope.backToNotification = function() {
            $scope.activeMenu = false;
            $scope.presentationList.forEach(function(each) {
                each.active = false;
            });
        };
        $scope.selectUserType = function(tab) {
            $scope.viewData.active = tab;
        };
        $scope.openAccordion = function(grade, type) {
            grade.open = grade.open + 1;
            grade.isCollapsed = !grade.isCollapsed;
            if (type === 'grade') {
                // for (var each in $scope.grades) {
                //     if ($scope.grades[each].heading !== grade.heading) {
                //         $scope.grades[each].isCollapsed = false;
                //     }
                // }
                setTimeout(function() {
                    var id = '#' + grade.heading;
                    $('html, body').animate({
                        scrollTop: $(id).offset().top - 120
                    }, 100);
                }, 300);
            } else if (type === 'feedback') {
                // $scope.feedbacks.forEach(function(each) {
                //     if (each._id !== grade._id) {
                //         each.isCollapsed = false;
                //     }
                // });
                if (grade.isCollapsed) {
                    $scope.readFeedback(grade);
                }
                // $scope.readFeedback(grade);
                if (grade.open > 1) {
                    grade.viewRead = true;
                    grade.seen = grade.unseen.concat(grade.seen);
                    grade.unseen = [];
                }

            } else if (type === 'slide') {
                // $scope.slides.forEach(function(each) {
                //     if (each._id !== grade._id) {
                //         each.isCollapsed = false;
                //     }
                // });
                if (grade.isCollapsed) {
                    $scope.readFeedback(grade);
                }
                if (grade.open > 1) {
                    grade.viewRead = true;
                    grade.seen = grade.unseen.concat(grade.seen);
                    grade.unseen = [];
                }

            }

        };

        function getDate(date) {
          date = new Date(date);
          return AppConstant.months[date.getMonth()]+" "+date.getDate()+" "+date.getFullYear();
        }

        function getRating(rate) {
          return Math.round (rate * 10) / 10;
        }


        $scope.feedbackPreview = function() {
          var feedback = $scope.presentationDetails.feedback;
          var mywindow = window.open();
          mywindow.document.write('<html><body>');
          mywindow.document.write("<h4 style=\"background-color: #d7dfea;\">Presentation Information</h4>");
          mywindow.document.write("<table>");
          mywindow.document.write("<tr><td>Presenter Name</td><td>"+$scope.presentationDetails.createdBy.firstName+" "+$scope.presentationDetails.createdBy.lastName+"</td></tr>");
          mywindow.document.write("<tr><td>Presentation Title</td><td>"+$scope.presentationDetails.title+"</td></tr>");
          mywindow.document.write("<tr><td>Project</td><td>"+($scope.presentationDetails.clientName || "")+"</td></tr>");
          mywindow.document.write("<tr><td>Note</td><td>"+($scope.presentationDetails.productName || "")+"</td></tr>");
          mywindow.document.write("<tr><td>Create Date</td><td>"+getDate($scope.presentationDetails.createDate)+"</td></tr>");
          mywindow.document.write("<tr><td>Shared Date</td><td>"+getDate($scope.presentationDetails.updateDate)+"</td></tr>");
          mywindow.document.write("<tr><td>Overall Rating</td><td>"+getRating($scope.presentationDetails.avgRating)+" stars</td></tr>");
          mywindow.document.write("</table>");
          mywindow.document.write("<h4 style=\"background-color: #d7dfea;\">Summary</h4>");
          if(feedback.comments.length) {
            //let index = $scope.selected.map(function(customer) { return customer._id; }).indexOf(data._id);
            let index1 = feedback.comments.map(function(comment) { return comment._id; }).indexOf("What you did well?");
            if(index1 < 0) {
              index1 = feedback.comments.map(function(comment) { return comment._id; }).indexOf("What did they do well?");
            }
            if(index1 >= 0) {
              mywindow.document.write("<h4>What you did well?</h4><ul>");
              feedback.comments[index1].commenters.forEach(function(comment){
                mywindow.document.write("<li>"+comment.firstName+": "+comment.text);
              });
              mywindow.document.write("</ul>");
            }
            let index2 = feedback.comments.map(function(comment) { return comment._id; }).indexOf("How you can improve?");
            if(index2 < 0) {
              index2 = feedback.comments.map(function(comment) { return comment._id; }).indexOf("How can they improve?");
            }
            if(index2 >= 0) {
              mywindow.document.write("<h4>How you can improve?</h4><ul>");
              feedback.comments[index2].commenters.forEach(function(comment){
                mywindow.document.write("<li>"+comment.firstName+": "+comment.text);
              })
              mywindow.document.write("</ul>");
            }
          }

          if(feedback.comments.length && feedback.comments.length > 2) {
            mywindow.document.write("<h4>Presentation Slides</h4>");
            // var slideNo = 1;
            // var index;
            // var maxSlideNo = 0, slide;
            // feedback.comments.forEach(function(comment){
            //   slide = parseInt(comment._id.replace("Slide ", ""));
            //   if(slide && slide>maxSlideNo)
            //     maxSlideNo = slide;
            // })
            //
            // for (var slideNo = 1; slideNo <= maxSlideNo; slideNo++) {
            //   index = feedback.comments.map(function(comment) { return comment._id; }).indexOf("Slide "+slideNo);
            //   if(index && index >= 0) {
            //     let currentComment = feedback.comments[index];
            //     mywindow.document.write("<h4>"+currentComment._id+"</h4><ul>");
            //     currentComment.commenters.forEach(function(comment){
            //       mywindow.document.write("<li>"+comment.firstName+": "+comment.text);
            //     })
            //     mywindow.document.write("</ul>");
            //   }
            // }

            var slides = [], commentText, index, maxSlideNo = 0, slide;
            feedback.comments.forEach(function(comment){
              commentText = comment.feedbackTitle;
              if((commentText != 'How you can improve?') && (commentText != 'What you did well?') && (commentText != "How can they improve?") && (commentText != "What did they do well?")) {
                slide = parseInt(comment.feedbackTitle.replace("Slide ", ""));
                if(slide && slide>maxSlideNo)
                  maxSlideNo = slide;
              }
            });

            for (var slideNo = 1; slideNo <= maxSlideNo; slideNo++) {
              index = feedback.comments.map(function(comment) { return comment.feedbackTitle; }).indexOf("Slide "+slideNo);
              if(index >= 0) {
                let currentComment = feedback.comments[index];
                mywindow.document.write("<h4>"+currentComment.feedbackTitle+"</h4><ul>");
                currentComment.commenters.forEach(function(comment){
                  mywindow.document.write("<li>"+comment.firstName+": "+comment.text);
                });
                mywindow.document.write("</ul>");
              }
            }
          }

          if(feedback && feedback.optionalGrading && (feedback.optionalGrading.introduction || feedback.optionalGrading.body || feedback.optionalGrading.conclusion || feedback.optionalGrading.delivery || feedback.optionalGrading.useOfVisuals)) {
            mywindow.document.write("<h4>Structured Feedback Grades</h4>");
            if(feedback.optionalGrading.introduction) {
              //--Introduction
              var show = false;
              var keys = Object.keys(feedback.optionalGrading.introduction.subCategory);
              keys.forEach(function(key){
                if((show == false) && feedback.optionalGrading.introduction.subCategory[key] && (feedback.optionalGrading.introduction.rating ||feedback.optionalGrading.introduction.subCategory[key].rating || feedback.optionalGrading.introduction.subCategory[key].comments.length))
                  show = true;
              })
              if(show) {
                let introduction = "Introduction ";
                if(getRating(feedback.optionalGrading.introduction.rating))
                  introduction += "("+getRating(feedback.optionalGrading.introduction.rating)+" of 5 stars)";
                mywindow.document.write("<ul><li>"+introduction);
                mywindow.document.write("<ul>");
                feedback.optionalGrading.introduction.comments.forEach(function(comment){
                  mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                })
                mywindow.document.write("</ul><ul>");
                if(feedback.optionalGrading.introduction.subCategory.greeting && (feedback.optionalGrading.introduction.subCategory.greeting.rating || feedback.optionalGrading.introduction.subCategory.greeting.comments.length)) {
                  //Greeting
                  let greeting = "Greeting ";
                  if(getRating(feedback.optionalGrading.introduction.subCategory.greeting.rating))
                    greeting+="("+getRating(feedback.optionalGrading.introduction.subCategory.greeting.rating)+" of 5 stars)";
                  mywindow.document.write("<li> "+greeting);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.introduction.subCategory.greeting.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }
                if(feedback.optionalGrading.introduction.subCategory.credibility && (feedback.optionalGrading.introduction.subCategory.credibility.rating || feedback.optionalGrading.introduction.subCategory.credibility.comments.length)) {
                  //Credebility/Personalization
                  let credibility = "Credibility/Personalization ";
                  if(getRating(feedback.optionalGrading.introduction.subCategory.credibility.rating))
                    credibility+="("+getRating(feedback.optionalGrading.introduction.subCategory.credibility.rating)+" of 5 stars)";
                  mywindow.document.write("<li> "+credibility);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.introduction.subCategory.credibility.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }
                if(feedback.optionalGrading.introduction.subCategory.wiifm  && (feedback.optionalGrading.introduction.subCategory.wiifm.rating || feedback.optionalGrading.introduction.subCategory.wiifm.comments.length)) {
                  //WIFM
                  let wiifm = "W.I.I.F.M. ";
                  if(getRating(feedback.optionalGrading.introduction.subCategory.wiifm.rating))
                    wiifm+="("+getRating(feedback.optionalGrading.introduction.subCategory.wiifm.rating)+" of 5 stars)";

                  mywindow.document.write("<li> "+wiifm);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.introduction.subCategory.wiifm.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }
                if(feedback.optionalGrading.introduction.subCategory.funneling  && (feedback.optionalGrading.introduction.subCategory.funneling.rating || feedback.optionalGrading.introduction.subCategory.funneling.comments.length)) {
                  //Funneling
                  let funneling = "Funneling ";
                  if(getRating(feedback.optionalGrading.introduction.subCategory.funneling.rating))
                    funneling+="("+getRating(feedback.optionalGrading.introduction.subCategory.funneling.rating)+" of 5 stars)";
                  mywindow.document.write("<li> "+funneling);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.introduction.subCategory.funneling.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }
                if(feedback.optionalGrading.introduction.subCategory.rm && (feedback.optionalGrading.introduction.subCategory.rm.rating || feedback.optionalGrading.introduction.subCategory.rm.comments.length)) {
                  //RM
                  let rm = "RM ";
                  if(getRating(feedback.optionalGrading.introduction.subCategory.rm.rating))
                    rm+= "("+getRating(feedback.optionalGrading.introduction.subCategory.rm.rating)+" of 5 stars)";
                  mywindow.document.write("<li>RM "+rm);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.introduction.subCategory.rm.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }
                if(feedback.optionalGrading.introduction.subCategory.initialSummary && (feedback.optionalGrading.introduction.subCategory.initialSummary.rating || feedback.optionalGrading.introduction.subCategory.initialSummary.comments.length)) {
                  //Initial Summary
                  let initialSummary = "Initial Summary ";
                  if(getRating(feedback.optionalGrading.introduction.subCategory.initialSummary.rating))
                    initialSummary+="("+getRating(feedback.optionalGrading.introduction.subCategory.initialSummary.rating)+" of 5 stars)"
                  mywindow.document.write("<li> "+initialSummary);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.introduction.subCategory.initialSummary.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }

                mywindow.document.write("</ul></li>");
              }
            }
            if(feedback.optionalGrading.body) {
              //--Body
              var show = false;
              var keys = Object.keys(feedback.optionalGrading.body.subCategory);
              keys.forEach(function(key){
                if((show == false) && feedback.optionalGrading.body.subCategory[key] && (feedback.optionalGrading.body.rating ||feedback.optionalGrading.body.subCategory[key].rating || feedback.optionalGrading.body.subCategory[key].comments.length)) {
                  show = true;
                } else if((show == false) && feedback.optionalGrading.body.subCategory[key] && feedback.optionalGrading.body.subCategory[key].subCategory) {
                  Object.keys(feedback.optionalGrading.body.subCategory[key].subCategory).forEach(function(subKey) {
                    if(feedback.optionalGrading.body.subCategory[key].subCategory[subKey].rating || feedback.optionalGrading.body.subCategory[key].subCategory[subKey].comments.length) {
                      show = true;
                    }
                  });
                }
              })
              if(show) {
                let body = "Body ";
                if(getRating(feedback.optionalGrading.body.rating))
                  body+="("+getRating(feedback.optionalGrading.body.rating)+" of 5 stars)";
                mywindow.document.write("<li>"+body);
                mywindow.document.write("<ul>");
                feedback.optionalGrading.body.comments.forEach(function(comment){
                  mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                })
                mywindow.document.write("</ul><ul>");
                if(feedback.optionalGrading.body.subCategory.topicConcept1 && (feedback.optionalGrading.body.subCategory.topicConcept1.rating || feedback.optionalGrading.body.subCategory.topicConcept1.comments.length)) {
                  //Transition Internal Summary
                  let topicConcept1 = "Topic Concept #1 ";
                  if(getRating(feedback.optionalGrading.body.subCategory.topicConcept1.rating))
                    topicConcept1+="("+getRating(feedback.optionalGrading.body.subCategory.topicConcept1.rating)+" of 5 stars)";
                  mywindow.document.write("<li>"+topicConcept1);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.body.subCategory.topicConcept1.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  var category = feedback.optionalGrading.body.subCategory.topicConcept1;
                  if(category && category.subCategory && Object.keys(feedback.optionalGrading.body.subCategory.topicConcept1.subCategory).length){

                    Object.keys(feedback.optionalGrading.body.subCategory.topicConcept1.subCategory).forEach(function(key){

                      if(feedback.optionalGrading.body.subCategory.topicConcept1.subCategory[key].rating || feedback.optionalGrading.body.subCategory.topicConcept1.subCategory[key].comments.length) {
                        let data = key.charAt(0).toUpperCase()+key.slice(1);
                        if(getRating(feedback.optionalGrading.body.subCategory.topicConcept1.subCategory[key].rating))
                          data+=" ("+getRating(feedback.optionalGrading.body.subCategory.topicConcept1.subCategory[key].rating)+" of 5 stars)";
                        mywindow.document.write("<li>"+data);
                        mywindow.document.write("<ul>");
                        feedback.optionalGrading.body.subCategory.topicConcept1.subCategory[key].comments.forEach(function(comment){
                          mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                        });
                        mywindow.document.write("</ul></li>");

                      }
                    });

                  }
                  mywindow.document.write("</ul></li>");
                }
                if(feedback.optionalGrading.body.subCategory.transitionInternalSummary && (feedback.optionalGrading.body.subCategory.transitionInternalSummary.rating || feedback.optionalGrading.body.subCategory.transitionInternalSummary.comments.length)) {
                  //Transition Internal Summary (Internal Summary)
                  let transitionInternalSummary = "Transition (Internal Summary) ";
                  if(getRating(feedback.optionalGrading.body.subCategory.transitionInternalSummary.rating))
                    transitionInternalSummary+="("+getRating(feedback.optionalGrading.body.subCategory.transitionInternalSummary.rating)+" of 5 stars)";
                  mywindow.document.write("<li>"+transitionInternalSummary);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.body.subCategory.transitionInternalSummary.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });

                  mywindow.document.write("</ul></li>");
                }
                if(feedback.optionalGrading.body.subCategory.topicConcept2 && (feedback.optionalGrading.body.subCategory.topicConcept2.rating || feedback.optionalGrading.body.subCategory.topicConcept2.comments.length)) {
                  //Transition Internal Summary
                  let topicConcept2 = "Topic Concept #2 ";
                  if(getRating(feedback.optionalGrading.body.subCategory.topicConcept2.rating))
                    topicConcept2+="("+getRating(feedback.optionalGrading.body.subCategory.topicConcept2.rating)+" of 5 stars)";
                  mywindow.document.write("<li>"+topicConcept2);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.body.subCategory.topicConcept2.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  var category = feedback.optionalGrading.body.subCategory.topicConcept2;
                  if(category && category.subCategory && Object.keys(feedback.optionalGrading.body.subCategory.topicConcept2.subCategory).length){

                    Object.keys(feedback.optionalGrading.body.subCategory.topicConcept2.subCategory).forEach(function(key){

                      if(feedback.optionalGrading.body.subCategory.topicConcept2.subCategory[key].rating || feedback.optionalGrading.body.subCategory.topicConcept2.subCategory[key].comments.length) {
                        let data = key.charAt(0).toUpperCase()+key.slice(1);
                        if(getRating(feedback.optionalGrading.body.subCategory.topicConcept2.subCategory[key].rating))
                          data+=" ("+getRating(feedback.optionalGrading.body.subCategory.topicConcept2.subCategory[key].rating)+" of 5 stars)";
                        mywindow.document.write("<li>"+data);
                        mywindow.document.write("<ul>");
                        feedback.optionalGrading.body.subCategory.topicConcept2.subCategory[key].comments.forEach(function(comment){
                          mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                        });
                        mywindow.document.write("</ul></li>");

                      }
                    });

                  }
                  mywindow.document.write("</ul></li>");
                }
                if(feedback.optionalGrading.body.subCategory.transitionIntegrateLink && (feedback.optionalGrading.body.subCategory.transitionIntegrateLink.rating || feedback.optionalGrading.body.subCategory.transitionIntegrateLink.comments.length)) {
                  //Transition Integrate Link
                  let transitionIntegrateLink = "Transition (Integrate/Link) ";
                  if(getRating(feedback.optionalGrading.body.subCategory.transitionIntegrateLink.rating))
                    transitionIntegrateLink+= "("+getRating(feedback.optionalGrading.body.subCategory.transitionIntegrateLink.rating)+" of 5 stars)";
                  mywindow.document.write("<li> "+transitionIntegrateLink);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.body.subCategory.transitionIntegrateLink.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }

                if(feedback.optionalGrading.body.subCategory.topicConcept3 && (feedback.optionalGrading.body.subCategory.topicConcept3.rating || feedback.optionalGrading.body.subCategory.topicConcept3.comments.length)) {
                  //Transition Internal Summary
                  let topicConcept3 = "Topic Concept #3 ";
                  if(getRating(feedback.optionalGrading.body.subCategory.topicConcept3.rating))
                    topicConcept3+="("+getRating(feedback.optionalGrading.body.subCategory.topicConcept3.rating)+" of 5 stars)";
                  mywindow.document.write("<li>"+topicConcept3);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.body.subCategory.topicConcept3.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  var category = feedback.optionalGrading.body.subCategory.topicConcept3;
                  if(category && category.subCategory && Object.keys(feedback.optionalGrading.body.subCategory.topicConcept3.subCategory).length){

                    Object.keys(feedback.optionalGrading.body.subCategory.topicConcept3.subCategory).forEach(function(key){

                      if(feedback.optionalGrading.body.subCategory.topicConcept3.subCategory[key].rating || feedback.optionalGrading.body.subCategory.topicConcept3.subCategory[key].comments.length) {
                        let data = key.charAt(0).toUpperCase()+key.slice(1);
                        if(getRating(feedback.optionalGrading.body.subCategory.topicConcept3.subCategory[key].rating))
                          data+=" ("+getRating(feedback.optionalGrading.body.subCategory.topicConcept3.subCategory[key].rating)+" of 5 stars)";
                        mywindow.document.write("<li>"+data);
                        mywindow.document.write("<ul>");
                        feedback.optionalGrading.body.subCategory.topicConcept3.subCategory[key].comments.forEach(function(comment){
                          mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                        });
                        mywindow.document.write("</ul></li>");

                      }
                    });

                  }
                  mywindow.document.write("</ul></li>");
                }

                mywindow.document.write("</ul></li>");
              }
            }
            if(feedback.optionalGrading.conclusion) {
              //--Conclusion
              var show = false;
              var keys = Object.keys(feedback.optionalGrading.conclusion.subCategory);
              keys.forEach(function(key){
                if((show == false) && feedback.optionalGrading.conclusion.subCategory[key] && (feedback.optionalGrading.conclusion.rating ||feedback.optionalGrading.conclusion.subCategory[key].rating || feedback.optionalGrading.conclusion.subCategory[key].comments.length))
                  show = true;
              })
              if(show) {
                let conclusion = "Conclusion ";
                if(getRating(feedback.optionalGrading.conclusion.rating))
                  conclusion+="("+getRating(feedback.optionalGrading.conclusion.rating)+" of 5 stars)"
                mywindow.document.write("<li> "+conclusion);
                mywindow.document.write("<ul>");
                feedback.optionalGrading.conclusion.comments.forEach(function(comment){
                  mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                })
                mywindow.document.write("</ul><ul>");
                if(feedback.optionalGrading.conclusion.subCategory.appealToAction && (feedback.optionalGrading.conclusion.subCategory.appealToAction.rating || feedback.optionalGrading.conclusion.subCategory.appealToAction.comments.length)) {
                  //AppealToAction
                  let appealToAction = "Appeal To Action/Use ";
                  if(getRating(feedback.optionalGrading.conclusion.subCategory.appealToAction.rating))
                    appealToAction += "("+getRating(feedback.optionalGrading.conclusion.subCategory.appealToAction.rating)+" of 5 stars)";
                  mywindow.document.write("<li> "+appealToAction);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.conclusion.subCategory.appealToAction.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }
                if(feedback.optionalGrading.conclusion.subCategory.summary && (feedback.optionalGrading.conclusion.subCategory.summary.rating || feedback.optionalGrading.conclusion.subCategory.summary.comments.length)) {
                  //Summary
                  let summary = "Summary ";
                  if(getRating(feedback.optionalGrading.conclusion.subCategory.summary.rating))
                    summary += "("+getRating(feedback.optionalGrading.conclusion.subCategory.summary.rating)+" of 5 stars)";
                  mywindow.document.write("<li> "+summary);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.conclusion.subCategory.summary.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }
                if(feedback.optionalGrading.conclusion.subCategory.brakeLight && (feedback.optionalGrading.conclusion.subCategory.brakeLight.rating || feedback.optionalGrading.conclusion.subCategory.brakeLight.comments.length)) {
                  //BrakeLight
                  let brakeLight = "Brake Light ";
                  if(getRating(feedback.optionalGrading.conclusion.subCategory.brakeLight.rating))
                    brakeLight+="("+getRating(feedback.optionalGrading.conclusion.subCategory.brakeLight.rating)+" of 5 stars)";
                  mywindow.document.write("<li> "+brakeLight);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.conclusion.subCategory.brakeLight.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }

                mywindow.document.write("</ul></li>");
              }
            }
            if(feedback.optionalGrading.delivery) {
              //--Delivery
              var show = false;
              var keys = Object.keys(feedback.optionalGrading.delivery.subCategory);
              keys.forEach(function(key){
                if((show == false) && feedback.optionalGrading.delivery.subCategory[key] && (feedback.optionalGrading.delivery.rating || feedback.optionalGrading.delivery.subCategory[key].rating || feedback.optionalGrading.delivery.subCategory[key].comments.length))
                  show = true;
              })
              if(show) {

                let delivery = "Delivery ";
                if(getRating(feedback.optionalGrading.delivery.rating))
                  delivery += "("+getRating(feedback.optionalGrading.delivery.rating)+" of 5 stars)";
                mywindow.document.write("<li> "+delivery);
                mywindow.document.write("<ul>");
                feedback.optionalGrading.delivery.comments.forEach(function(comment){
                  mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                })
                mywindow.document.write("</ul><ul>");
                if(feedback.optionalGrading.delivery.subCategory.useOfNotes && (feedback.optionalGrading.delivery.subCategory.useOfNotes.rating || feedback.optionalGrading.delivery.subCategory.useOfNotes.comments.length)) {
                  //Use of Notes
                  let useOfNotes = "Use of Notes ";
                  if(getRating(feedback.optionalGrading.delivery.subCategory.useOfNotes.rating))
                    useOfNotes+="("+getRating(feedback.optionalGrading.delivery.subCategory.useOfNotes.rating)+" of 5 stars)";
                  mywindow.document.write("<li> "+useOfNotes);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.delivery.subCategory.useOfNotes.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }
                if(feedback.optionalGrading.delivery.subCategory.bodyLanguage && (feedback.optionalGrading.delivery.subCategory.bodyLanguage.rating || feedback.optionalGrading.delivery.subCategory.bodyLanguage.comments.length)) {
                  //Body Language
                  let bodyLanguage = "Body Language ";
                  if(getRating(feedback.optionalGrading.delivery.subCategory.bodyLanguage.rating))
                    bodyLanguage += "("+getRating(feedback.optionalGrading.delivery.subCategory.bodyLanguage.rating)+" of 5 stars)";
                  mywindow.document.write("<li> "+bodyLanguage);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.delivery.subCategory.bodyLanguage.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }
                if(feedback.optionalGrading.delivery.subCategory.eyeContact && (feedback.optionalGrading.delivery.subCategory.eyeContact.rating || feedback.optionalGrading.delivery.subCategory.eyeContact.comments.length)) {
                  //Eye Contact
                  let eyeContact = "Eye Contact ";
                  if(getRating(feedback.optionalGrading.delivery.subCategory.eyeContact.rating))
                    eyeContact += "("+getRating(feedback.optionalGrading.delivery.subCategory.eyeContact.rating)+" of 5 stars)";
                  mywindow.document.write("<li> "+eyeContact);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.delivery.subCategory.eyeContact.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }
                if(feedback.optionalGrading.delivery.subCategory.volume && (feedback.optionalGrading.delivery.subCategory.volume.rating || feedback.optionalGrading.delivery.subCategory.volume.comments.length)) {
                  //Volume
                  let volume = "Volume ";
                  if(getRating(feedback.optionalGrading.delivery.subCategory.volume.rating))
                    volume += "("+getRating(feedback.optionalGrading.delivery.subCategory.volume.rating)+" of 5 stars)";
                  mywindow.document.write("<li> "+volume);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.delivery.subCategory.volume.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }
                if(feedback.optionalGrading.delivery.subCategory.rate && (feedback.optionalGrading.delivery.subCategory.rate.rating || feedback.optionalGrading.delivery.subCategory.rate.comments.length)) {
                  //Rate
                  let rate = "Rate ";
                  if(getRating(feedback.optionalGrading.delivery.subCategory.rate.rating))
                    rate += "("+getRating(feedback.optionalGrading.delivery.subCategory.rate.rating)+" of 5 stars)";
                  mywindow.document.write("<li> "+rate);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.delivery.subCategory.rate.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }
                if(feedback.optionalGrading.delivery.subCategory.conversational && (feedback.optionalGrading.delivery.subCategory.conversational.rating || feedback.optionalGrading.delivery.subCategory.conversational.comments.length)) {
                  //Conversational
                  let conversational = "Conversational ";
                  if(getRating(feedback.optionalGrading.delivery.subCategory.conversational.rating))
                    conversational+= "("+getRating(feedback.optionalGrading.delivery.subCategory.conversational.rating)+" of 5 stars)";
                  mywindow.document.write("<li> "+conversational);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.delivery.subCategory.conversational.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }

                mywindow.document.write("</ul></li>");
              }
            }
            if(feedback.optionalGrading.useOfVisuals) {
              var show = false;
              var keys = Object.keys(feedback.optionalGrading.useOfVisuals.subCategory);
              keys.forEach(function(key){
                if((show == false) && feedback.optionalGrading.useOfVisuals.subCategory[key] && (feedback.optionalGrading.useOfVisuals.rating || feedback.optionalGrading.useOfVisuals.subCategory[key].rating || feedback.optionalGrading.useOfVisuals.subCategory[key].comments.length))
                  show = true;
              })
              if(show) {
                //--Use of Visuals
                let useOfVisuals = "Use of Visuals ";
                if(getRating(feedback.optionalGrading.useOfVisuals.rating))
                  useOfVisuals+="("+getRating(feedback.optionalGrading.useOfVisuals.rating)+" of 5 stars)";
                mywindow.document.write("<li> "+useOfVisuals);
                mywindow.document.write("<ul>");
                feedback.optionalGrading.useOfVisuals.comments.forEach(function(comment){
                  mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                })
                mywindow.document.write("</ul><ul>");
                if(feedback.optionalGrading.useOfVisuals.subCategory.supporting && (feedback.optionalGrading.useOfVisuals.subCategory.supporting.rating || feedback.optionalGrading.useOfVisuals.subCategory.supporting.comments.length)) {
                  //Overall
                  let supporting = "Supporting ";
                  if(getRating(feedback.optionalGrading.useOfVisuals.subCategory.supporting.rating))
                    supporting += "("+getRating(feedback.optionalGrading.useOfVisuals.subCategory.supporting.rating)+" of 5 stars)";
                  mywindow.document.write("<li> "+supporting);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.useOfVisuals.subCategory.supporting.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }
                if(feedback.optionalGrading.useOfVisuals.subCategory.structure && (feedback.optionalGrading.useOfVisuals.subCategory.structure.rating || feedback.optionalGrading.useOfVisuals.subCategory.structure.comments.length)) {
                  //Credebility/Personalization
                  let structure = "Structure ";
                  if(getRating(feedback.optionalGrading.useOfVisuals.subCategory.structure.rating))
                    structure+= "("+getRating(feedback.optionalGrading.useOfVisuals.subCategory.structure.rating)+" of 5 stars)";
                  mywindow.document.write("<li> "+structure);
                  mywindow.document.write("<ul>");
                  feedback.optionalGrading.useOfVisuals.subCategory.structure.comments.forEach(function(comment){
                    mywindow.document.write("<li>"+comment.userName+" - "+comment.text+"</li>");
                  });
                  mywindow.document.write("</ul></li>");
                }

                mywindow.document.write("</ul></li>");
              }
            }
            //End
            mywindow.document.write("</ul>");
          }
          mywindow.document.write('</body></html>');
          mywindow.print();
          mywindow.close();

          return true;
        }

        $scope.scrollToGrade = function() {
            var div = $('.grades-heading');
            $('html, body').animate({
                scrollTop: $(div).offset().top - 68
            }, 1000);
        };

        $scope.getPresentationList = function(params) {
            $scope.presentationListLoading = true;
            var data = {};
            if (params) {
                data = angular.copy(params);
            }
            console.log('data', data);
            PresentationService.getPresentationList(data)
                .then(function(response) {
                    console.log('response ', response);
                    $scope.presentationList = response.data;
                    if (!$scope.presentationList.length && !$scope.filterData.filterValue) {
                        $scope.disableSearch = true;
                    } else {
                        $scope.disableSearch = false;

                    }
                    // $scope.listLength = $scope.presentationList.length;
                    if ($scope.presentationList.length) {
                        $scope.presentationList.forEach(function(each) {
                            each.active = false;
                        });
                        //$scope.presentationList[0].active = true;
                        $scope.viewData = { active: 'feedback' };
                        //$scope.selectPresentation($scope.presentationList[0]);
                    }

                }, function(error) {
                    console.log('error ', error);
                }).finally(function() {
                    $scope.presentationListLoading = false;
                });
        };

        $scope.selectPresentation = function(presentation) {
            $scope.isEditable = false;
            $scope.showSection = 'details';
            //presentation.feedbackFlag = false;
            $scope.presentationList.forEach(function(each) {
                each.active = false;
            });
            presentation.active = true;
            setTimeout(function() {
                $('html, body').animate({
                    scrollTop: 0
                }, 100);
            }, 500);
            resetAccordian();
            // presentation.active = true;
            // $scope.viewData = { active: 'feedback' };
            $scope.currentPresentationId = presentation._id;
            PresentationService.getPresentationDetails($scope.currentPresentationId, {presentationOnly: false, feedback: false})
              .then(function(response) {
                  $scope.presentationDetails = response.data;
                  if($scope.presentationDetails.practices) {
                    presentation.practices = $scope.presentationDetails.practices;
                    delete $scope.presentationDetails.practices;
                  }
                  $scope.savedResponse = angular.copy(response.data);
                  $scope.statusList.forEach(function(each) {
                      if (each.value === $scope.presentationDetails.status) {
                          $scope.presentationDetails.status = each;
                      }
                  });
              }, function(error) {
                  toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
              }).finally(function() {
                  $scope.presentationDetailsLoading = false;
              });
        };

        $scope.selectPractice = function(practice) {
            $scope.showSection = 'feedbacks';
            //presentation.feedbackFlag = false;
            if($scope.presentationDetails && $scope.presentationDetails.practices) {
              $scope.presentationDetails.practices.forEach(function(each) {
                  each.active = false;
              });
            }
            practice.active = true;
            // setTimeout(function() {
            //     $('html, body').animate({
            //         scrollTop: 0
            //     }, 100);
            // }, 500);
            // presentation.active = true;
            // $scope.viewData = { active: 'feedback' };

            new Promise(function(resolve, reject) {
              PresentationService.getPresentationDetails(practice.presentationRef, {presentationOnly: false, feedback: false})
              .then(function(response) {
                $scope.presentationDetails = response.data;
                resolve($scope.presentationDetails);
              });
            })
            .then(function(response){
              PresentationService.getFeedbacks({practiceRef: practice._id, presentationRef: practice.presentationRef})
              .then(function(response) {
                  if($scope.presentationDetails)
                    $scope.presentationDetails.feedback = response.data;
                  else {
                    $scope.presentationDetails = {
                      feedback: response.data
                    }
                  }
                  if (!Object.keys($scope.presentationDetails.feedback).length) {
                    $scope.hideGrading = true;
                  }
                  if ($scope.presentationDetails.feedback) {
                      if ($scope.presentationDetails.feedback.comments) {
                          $scope.feedbacks = [];
                          $scope.slides = [];
                          var indexNo = -1, index = 0;
                          $scope.presentationDetails.feedback.comments.map(function(item, index) {
                              if (item._id === 'How you can improve?' || item._id === 'What you did well?' || item._id === "How can they improve?" || item._id === "What did they do well?") {
                                item.index = -1;
                                $scope.feedbacks.push(item);
                              } else {
                                var splitArray = [];
                                if(item && item._id) {
                                  splitArray = item._id.split(" ");
                                  if(splitArray.length > 1)
                                    item.index = parseInt(splitArray[1]);
                                }
                                $scope.slides.push(item);
                              }
                              index++;
                          });
                          if ($scope.feedbacks && $scope.feedbacks.length && $scope.feedbacks[0]._id && ($scope.feedbacks[0]._id == 'How you can improve?') || ($scope.feedbacks[0]._id == 'How can they improve?')) {
                            $scope.feedbacks.reverse();
                          }

                          //$scope.slides.sort(compare);
                          if ($scope.slides.length) {
                              $scope.slides.map(function(slide, slideIndex) {
                                  slide.seen = [];
                                  slide.unseen = [];
                                  slide.open = 0;
                                  if (slide.commenters.length) {
                                      slide.commenters.map(function(commenter, commenterIndex) {
                                          if (commenter.viewedFlag) {
                                              slide.seen.push(commenter);
                                          } else {
                                              slide.unseen.push(commenter);
                                          }
                                      });
                                      if (slide.unseen.length) {
                                          slide.hasNewMessage = true;
                                      } else {
                                          slide.viewRead = true;
                                      }
                                  }
                              });
                          }
                          if ($scope.feedbacks.length) {
                              $scope.feedbacks.map(function(feedback, feedbackIndex) {
                                  feedback.seen = [];
                                  feedback.unseen = [];
                                  feedback.open = 0;
                                  if (feedback.commenters.length) {
                                      feedback.commenters.map(function(commenter, commenterIndex) {
                                          commenter.ratingArray = angular.copy($scope.ratingArray);
                                          if (commenter.viewedFlag) {
                                              feedback.seen.push(commenter);
                                          } else {
                                              feedback.unseen.push(commenter);
                                          }
                                      });
                                      if (feedback.unseen.length) {
                                          feedback.hasNewMessage = true;
                                      } else {
                                          feedback.viewRead = true;
                                      }
                                  }
                              });
                          }
                      }
                      if ($scope.presentationDetails.feedback.optionalGrading) {
                          $scope.gradeResponse = $scope.presentationDetails.feedback.optionalGrading;
                          for (var item in $scope.gradeResponse) {
                              if (!$scope.gradeResponse[item].noFeedback) {
                                  $scope.hideGrading = false;
                                  return;
                              }
                          }
                      }
                  }
                  if($scope.statusList) {
                    $scope.statusList.forEach(function(each) {
                        if (each.value === $scope.presentationDetails.status) {
                            $scope.presentationDetails.status = each;
                        }
                    });
                  }
              }, function(error) {
                  toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
              }).finally(function() {
                  $scope.presentationDetailsLoading = false;
              });
            });


        };

        function resetAccordian() {
            console.log('in reset');
            for (var each in $scope.grades) {
                $scope.grades[each].isCollapsed = false;
            }
            if ($scope.feedbacks && $scope.feedbacks.length) {
                $scope.feedbacks.forEach(function(each) {
                    each.isCollapsed = false;
                });
            }
            if ($scope.slides && $scope.slides.length) {
                $scope.slides.forEach(function(each) {
                    each.isCollapsed = false;
                });
            }
        };

        $scope.searchPresentation = function() {
            if (!$scope.searchObject.searchKeyword) {
                toastr.error('Please enter some keyword to search');
            } else {
                $scope.searchObject.searchHide = true;
                $scope.cfg.currentPage = 1;
                $scope.getPresentationList({
                    searchKey: $scope.searchObject.searchKeyword
                });
            }

        };

        $scope.clearFilter = function(noSearch) {
            $scope.searchObject.searchHide = false;

            $scope.filterData.filterValue = '';
            var key = $scope.filterData.filterType.value,
                data = {

                };
            if (key !== 'all') {
                $scope.searchObject.noFilter = false;
                data[key] = $scope.filterData.filterValue;
                if (!noSearch) {
                    $scope.getPresentationList(data);
                } else {
                    if (!$scope.disableSearch && !$scope.presentationList.length) {
                        $scope.getPresentationList(data);
                        // $scope.disableSearch = false;
                    } else if ($scope.disableSearch && !$scope.presentationList.length) {
                        $scope.disableSearch = true;
                    } else {
                        $scope.disableSearch = false;
                    }
                }
                // if (!noSearch) {
                // }
            } else {
                $scope.searchObject.noFilter = true;
            }
        };

        function compare(a, b) {
            // Use toUpperCase() to ignore character casing
            const genreA = a._id.toUpperCase();
            const genreB = b._id.toUpperCase();

            var comparison = 0;
            if (genreA > genreB) {
                comparison = 1;
            } else if (genreA < genreB) {
                comparison = -1;
            }
            return comparison;
        }

        $scope.viewFeedback = function(value) {
            console.log('view', value);
            // var data = [];
            // value.map(function(each, index) {
            //     console.log('each', each);
            //     if (!each.read) {
            //         each.read = true;
            //         data.push(each.notificationId);
            //     }
            // });
            // if (data.length) {
            //     $scope.readNotification(data);
            // }
            // $scope.activeMenu = true;
            // $scope.viewData = { active: 'feedback' };
            $scope.currentPresentationId = value.presentationRef;
            $scope.presentationActiveID = value.practiceRef;
            $scope.showSection = 'feedbacks';
            $scope.selectPractice({_id: value.practiceRef, presentationRef: value.presentationRef});
        };

        // $scope.getPresentationDetails = function(id, fromViewFeedback) {
        //     $scope.hideGrading = true;
        //     //$scope.presentationDetailsLoading = true;
        //     PresentationService.getPresentationDetails(id, {presentationOnly: false, feedback: false})
        //         .then(function(response) {
        //             $scope.presentationDetails = response.data;
        //             alert(JSON.stringify($scope.presentationDetails));
        //             $scope.statusList.forEach(function(each) {
        //                 if (each.value === $scope.presentationDetails.status) {
        //                     $scope.presentationDetails.status = each;
        //                 }
        //             });
        //         }, function(error) {
        //             toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
        //         }).finally(function() {
        //             //$scope.presentationDetailsLoading = false;
        //         });
        // };
        $scope.selectFilter = function() {
            $('#searchInput').blur();
            if ($scope.filterData.filterValue) {
                $scope.activeMenu = false;
                $scope.searchObject.searchHide = true;
                var key = $scope.filterData.filterType.value,
                    data = {

                    };
                data[key] = $scope.filterData.filterValue;
                $scope.getPresentationList(data);
            } else {
                toastr.error('Please enter a keyword to search.');
            }
        };

        $scope.savePresentation = function(presentation) {
          $scope.onClickEdit = false;
          PresentationService.editPresentation(presentation._id, {title: presentation.title, productName: presentation.productName, clientName: presentation.clientName})
          .then(function(response){
            if($scope.presentationDetails) {
              ($scope.presentationDetails.title)?($scope.presentationDetails.title = presentation.title):'';
              ($scope.presentationDetails.productName)?($scope.presentationDetails.productName = presentation.productName): '';
              ($scope.presentationDetails.clientName)?($scope.presentationDetails.clientName = presentation.clientName):'';
            }
          })
        }

        $scope.sharePractice = function(practice) {
          $scope.currentPractice = practice;
            $scope.modalInstance = $uibModal.open({
                templateUrl: 'resources/templates/share-practice.html',
                size: 'sm',
                backdrop: true,
                scope: $scope
            });
        }
        $scope.onClickDeletePractice = function(practice) {
          $scope.currentDeletePractice = practice;
            $scope.modalInstance = $uibModal.open({
                templateUrl: 'resources/templates/delete-practice.html',
                size: 'sm',
                backdrop: true,
                scope: $scope
            });
        }
        $scope.deletePractice = function() {
          PresentationService.deletePractice($scope.currentDeletePractice._id)
          .then((response) => {
            $scope.currentDeletePractice.deleted = true;
            $scope.closeModal();
          });
        }
        $scope.onClickDeletePresentation = function(presentation) {
          $scope.currentDeletePresentation = presentation;
            $scope.modalInstance = $uibModal.open({
                templateUrl: 'resources/templates/delete-presentation.html',
                size: 'sm',
                backdrop: true,
                scope: $scope
            });
        }
        $scope.deletePresentation = function() {
          PresentationService.deletePresentation($scope.currentDeletePresentation._id)
          .then((response) => {
            $scope.currentDeletePresentation.deleted = true;
            $scope.closeModal();
            window.location.reload();
          });
        }
        $scope.onclickPractice = function(practice) {
          $scope.presentationActiveID = practice._id;
        }
        $scope.showReadComments = function(item) {
            item.viewRead = true;
        };
        $scope.readFeedback = function(grade) {
            console.log('grade in readFeedback ', grade);
            if (grade.unseen.length) {
                PresentationService.readFeedback({ feedbackRef: grade.feedbackRef, feedbackTitle: grade.feedbackTitle })
                    .then(function(response) {
                        grade.hasNewMessage = false;
                        //$scope.getPresentationDetails($scope.currentPresentationId);
                    }, function(error) {
                        console.log('error ', error);
                    });
            }
        };

        $scope.thankComment = function(comment) {
            // console.log('comment ', comment, $scope.presentationDetails);
            PresentationService.acknowledgeComment(comment.commentId, { thankedFlag: true, presentationRef: $scope.presentationDetails._id })
                .then(function(response) {
                    console.log('response ', response);
                    comment.thankedFlag = true;
                    toastr.success('You successfully thanked the mentor', 'Success');
                }, function(error) {
                    console.log('error ', error);
                    toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                });
        };

        $scope.modalInit = function() {
            $scope.shareInfo = {
                shareWith: [],
                message: '',
                presentationRef: $scope.currentPractice.presentationRef,
                practiceRef: $scope.currentPractice._id
            };
            $scope.searchFilter = {
              searchKey: '',
              isSearch: false
            };
            $scope.selectedMentorList = [];
            $scope.mentorList = [];
            $scope.displaySelected = false;
            $scope.sharePresentationList();
        };

        $scope.sharePresentationList = function(fromSearch) {

            $scope.noTopMentors = true;
            $scope.noOtherMentors = true;
            $scope.dataLoading = true;
            PresentationService.sharePresentationList($scope.currentPractice._id, { searchKey: $scope.searchFilter.searchKey })
                .then(function(response) {
                    // $scope.mentorList = response.data;
                    if (fromSearch) {
                        $scope.displaySelected = false;
                        if ($scope.selectedMentorList && $scope.selectedMentorList.length) {
                            // response.data.forEach(function(each) {
                            console.log('in 1st if ', $scope.displaySelected);
                            $scope.mentorList = angular.copy(response.data);
                            if ($scope.mentorList.length) {
                                $scope.selectedMentorList.forEach(function(item) {
                                    $scope.mentorList.forEach(function(each, index) {
                                        if (each.mentorType === 'top') {
                                            $scope.noTopMentors = false;
                                        }
                                        if (each.mentorType === 'other') {
                                            $scope.noOtherMentors = false;
                                        }
                                        if (each._id == item._id) {
                                            $scope.mentorList.splice(index, 1);
                                        }
                                    });

                                });
                            }
                            if (response.data.length) {
                                response.data.forEach(function(each) {
                                    $scope.selectedMentorList.forEach(function(item) {
                                        if (each._id == item._id) {
                                            console.log('inside check');
                                            $scope.displaySelected = true;
                                        }
                                    });
                                });
                            }
                            console.log('mentorList final ', $scope.mentorList);
                            console.log('noOtherMentors final ', $scope.noOtherMentors);
                            // });
                        } else {
                            console.log('in else ');
                            $scope.displaySelected = true;
                            $scope.mentorList = angular.copy(response.data);
                            if ($scope.mentorList.length) {
                                $scope.mentorList.forEach(function(each) {
                                    if (each.mentorType === 'top') {
                                        $scope.noTopMentors = false;
                                    }
                                    if (each.mentorType === 'other') {
                                        $scope.noOtherMentors = false;
                                    }
                                });
                            }
                        }
                    } else {
                        $scope.displaySelected = true;
                        $scope.mentorList = angular.copy(response.data);
                        console.log('in else 1 ', $scope.mentorList);
                        if ($scope.mentorList.length) {
                            if ($scope.selectedMentorList.length) {
                                console.log('in if 2');
                                $scope.selectedMentorList.forEach(function(item) {
                                    $scope.mentorList.forEach(function(each, index) {
                                        if (each.mentorType === 'top') {
                                            $scope.noTopMentors = false;
                                        }
                                        if (each.mentorType === 'other') {
                                            $scope.noOtherMentors = false;
                                        }
                                        if (each._id == item._id) {
                                            $scope.mentorList.splice(index, 1);
                                        }
                                    });
                                });
                            } else {
                                console.log('in else 2 ', $scope.mentorList);
                                $scope.mentorList.forEach(function(each) {
                                    if (each.mentorType === 'top') {
                                        $scope.noTopMentors = false;
                                    }
                                    if (each.mentorType === 'other') {
                                        $scope.noOtherMentors = false;
                                    }
                                });
                            }
                        }
                    }

                }, function(error) {

                }).finally(function() {
                    $scope.dataLoading = false;
                });
        };

        $scope.selectMentors = function() {
            $scope.modalInstance = $uibModal.open({
                templateUrl: 'resources/templates/select-mentors-modal.html',
                size: 'sm',
                backdrop: true,
                scope: $scope
            });
        };

        $scope.select = function(mentor, from) {
            if (!mentor.toShare) {
                mentor.toShare = true;
                $scope.selectedMentorList.push(mentor);
                $scope.mentorList.forEach(function(each, index) {
                    if (each._id == mentor._id) {
                        $scope.mentorList.splice(index, 1);
                    }
                });
                $scope.displaySelected = true;
                $scope.shareInfo.shareWith.push(mentor._id);
            } else {
                mentor.toShare = false;
                $scope.displaySelected = true;
                var index = $scope.shareInfo.shareWith.indexOf(mentor._id);
                $scope.shareInfo.shareWith.splice(index, 1);
                $scope.selectedMentorList.splice(index, 1);
                $scope.mentorList.unshift(mentor);
            }
        };

        $scope.deselect = function(mentor) {
            mentor.toShare = false;
            $scope.displaySelected = true;
            var index = $scope.shareInfo.shareWith.indexOf(mentor._id);
            $scope.shareInfo.shareWith.splice(index, 1);
            $scope.selectedMentorList.splice(index, 1);
            $scope.mentorList.unshift(mentor);
        };

        $scope.share = function() {
            console.log('hi');
            if (!$scope.shareInfo.shareWith.length) {
                toastr.error('Please select a mentor to share your presentation.', 'Error');
                return;
            } else {
                //document.getElementById('share_btn').disabled = true;
            }
            $scope.shareLoading = true;
            PresentationService.sharePresentation($scope.shareInfo)
                .then(function(response) {
                    toastr.success('Your presentation has been shared.', 'Success');
                    $scope.closeModal();
                }, function(error) {
                    toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                }).finally(function() {
                    $scope.shareLoading = false;
                    //document.getElementById('share_btn').disabled = false;
                });
        };

        $scope.closeModal = function() {
            $scope.modalInstance.dismiss('cancel');
        };

        function readCookie(name) {
        	var nameEQ = name + "=";
        	var ca = document.cookie.split(';');
        	for(var i=0;i < ca.length;i++) {
        		var c = ca[i];
        		while (c.charAt(0)==' ') c = c.substring(1,c.length);
        		if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
        	}
        	return null;
        }

        function eraseCookie(name) {
        	createCookie(name,"",-1);
        }

        $scope.selectAll = function() {
            $scope.selectedMentorList = $scope.selectedMentorList.concat($scope.mentorList);
            $scope.selectedMentorList.map(function(value, index) {
                value.toShare = true;
                $scope.shareInfo.shareWith.push(value._id);
            });
            $scope.mentorList = [];
            $scope.displaySelected = true;
        };

        $scope.deselectAll = function() {
            $scope.shareInfo.shareWith = [];
            $scope.mentorList = $scope.mentorList.concat($scope.selectedMentorList);
            $scope.mentorList.map(function(value, index) {
                value.toShare = false;
            });
            $scope.selectedMentorList = [];
            $scope.displaySelected = true;
        };

        $scope.clearSearch = function() {
            $scope.searchFilter.isSearch = false;
            $scope.searchFilter.searchKey = '';
            $scope.sharePresentationList();
        };

        $scope.searchMentor = function() {
            if ($scope.searchFilter.searchKey) {
                $scope.searchFilter.isSearch = true;
                $scope.sharePresentationList(true);
            } else {
                toastr.error('Please enter a keyword to search.');
            }
        };

        $scope.practicePresentation = function(ppt, e) {
            e.preventDefault();
            e.stopPropagation();
            if(loggedInUser.getData()._id+"" == ppt.createdBy+"") {
              $state.go('auth.video', {
                  id: ppt._id
              })
            }
        };

        $scope.readNotification = function(data) {
            PresentationService.readNotification({ notificationIds: data })
                .then(function(response) {
                    console.log(response);
                }, function(error) {

                });
        };

        $scope.openVideo = function(ppt) {
            $state.go('auth.presentationView', {
                id: ppt._id,
                slideNo: 1
            })
        };

        $scope.openSlideVideo = function(ppt, number) {
          $state.go('auth.presentationView', {
              id: ppt._id,
              slideNo: number
          })
        }

    }
];

},{}],6:[function(require,module,exports){
'use strict';

module.exports = ['$scope',
    '$uibModal',
    function($scope, $uibModal) {
        console.log('here in ctrl-->');
        $scope.openWatchAndShareModal = function() {
            $scope.modalInstance = $uibModal.open({
                templateUrl: 'resources/templates/watch-and-share-modal.html',
                size: 'md',
                backdrop: true,
                scope: $scope
            });
        };

        $scope.selectMentors = function() {
            $scope.modalInstance = $uibModal.open({
                templateUrl: 'resources/templates/select-mentors-modal.html',
                size: 'sm',
                backdrop: true,
                scope: $scope
            });
        };

        $scope.openUploadModal = function() {
            $scope.modalInstance = $uibModal.open({
                templateUrl: 'resources/templates/upload-presentation-modal.html',
                size: 'sm',
                backdrop: true,
                scope: $scope,
                windowClass: 'upload-presentation-modal-wrapper'
            });
        };

        $scope.closeModal = function(argument) {
            $scope.modalInstance.dismiss('cancel');
        };


    }
];
},{}],7:[function(require,module,exports){
'use strict';

module.exports = [
    '$state',
    '$rootScope',
    '$scope',
    '$window',
    'CommonService',
    'uuid',
    'loggedInUser',
    'toastr',
    'AppConfig',
    function($state, $rootScope, $scope, $window, CommonService, uuid, loggedInUser, toastr, AppConfig) {
        $scope.init = function() {
            console.log('login controller init');
            $scope.loginDetails = {};
            $scope.forgotPasswordDetails = {};
            $scope.generateDeviceId();
        };

        //Set version information to show in footer
        $scope.version = version;
        $scope.date =  new Date();

        $scope.generateDeviceId = function() {
            $scope.deviceId = uuid.v4();
        };


        $scope.login = function() {
            CommonService
                .login({
                    email: $scope.loginDetails.email.toLowerCase(),
                    password: $scope.loginDetails.password,
                    loginTime: new Date()
                }, $scope.deviceId)
                .then(function(response) {
                        console.log('in login controller', response);

                        if (response.data.user.userType !== 3 && response.data.user.userType !== 4) {
                            // toastr.success('Login successful', 'Success');
                            $window.localStorage.userSession = JSON.stringify({
                                token: response.data.token,
                                deviceId: response.data.deviceId
                            });
                            $window.localStorage.pptCount = false;
                            if (response.data.pptCount > 0) {
                                $window.localStorage.pptCount = true;
                            }
                            loggedInUser.setData(response.data.user);
                            if (response.data.user.userType === 1) {
                                $state.go('auth.dashboard');
                            } else {
                                $state.go('auth.mentor-presenter-list');
                            }
                        } else {
                            // toastr.error('You have no access');
                            $scope.errorMessage = 'Credentials invalid.  Please provide valid credentials.';
                        }
                    },
                    function(error) {
                        //toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                        $scope.errorMessage = AppConfig.errorCode[error.errorCode];
                    });
        };

        $scope.forgotPassword = function() {
            CommonService
                .requestOTP({
                    email: $scope.forgotPasswordDetails.email.toLowerCase()
                }, $scope.deviceId)
                .then(function(response) {
                        console.log('in forgot Password controller', response);
                        //$window.localStorage.forgetPasswordEmail = $scope.formData.email.toLowerCase();
                        toastr.success('Reset password link has been sent to your email.'); // jshint ignore:line
                        $state.go('public.login');
                    },
                    function(error) {
                        toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                    });
        };

    }
];
},{}],8:[function(require,module,exports){
'use strict';

module.exports = [
    '$scope',
    '$q',
    'fetchSlides',
    'PresentationService',
    'loggedInUser',
    '$rootScope',
    'toastr',
    function($scope, $q, fetchSlides, PresentationService, loggedInUser, $rootScope, toastr) {
      $scope.slide = 1;
      $scope.nextOpen = true;
      $scope.prevOpen = true;
      $scope.init = function() {
        $scope.presentation = fetchSlides;
        if($scope.presentation.slideNo && (parseInt($scope.presentation.slideNo) <= $scope.presentation.imageList.length) && (parseInt($scope.presentation.slideNo) >=1))
          $scope.slide = parseInt($scope.presentation.slideNo);

        if($scope.presentation.imageList) {
          $scope.currentImage = $scope.presentation.imageList[$scope.slide - 1];
          $scope.nextOpen = false;
        }
        if(!$scope.presentation ||  (loggedInUser.getData()._id+"" != $scope.presentation.createdBy)) {
          toastr.error("Invalid URL entered. Our support team has been notified of this error.", 'Error');
          window.location.href = "/#/dashboard";
        }
      }

      $scope.nextImage = function() {
        if($scope.slide < $scope.presentation.imageList.length ) {
          $scope.slide += 1;
          $scope.currentImage = $scope.presentation.imageList[$scope.slide - 1];
          $scope.prevOpen = false;
        }
        if($scope.slide == $scope.presentation.imageList.length) {
          $scope.nextOpen = true;
        }
      }

      $scope.prevImage = function() {
        if($scope.slide > 1) {
          $scope.slide -= 1;
          $scope.currentImage = $scope.presentation.imageList[$scope.slide - 1];
          $scope.nextOpen = false;
        }

        if($scope.slide == 1) {
          $scope.prevOpen = true;
        }

      }
    }
];

},{}],9:[function(require,module,exports){
   'use strict';

   module.exports = [
       '$state',
       '$rootScope',
       '$scope',
       '$window',
       '$uibModal',
       'CommonService',
       'toastr',
       'AppConfig',
       'Upload',
       'API',
       'loggedInUser',
       function($state, $rootScope, $scope, $window, $uibModal, CommonService, toastr, AppConfig, Upload, API, loggedInUser) {

           $scope.init = function() {
               $scope.editMode = false;
               $scope.userTypeStatus = AppConfig.userTypeStatus;
               $scope.getProfile();
               $scope.placement = {
                   selected: 'top'
               }
               $scope.phonePattern = new RegExp(/^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im);
           };

           $scope.getProfile = function() {
               CommonService.getProfile()
                   .then(function(response) {
                       $scope.userDetails = response.data.user;
                       $scope.savedUser = angular.copy(response.data.user);
                       if ($scope.userDetails.profileImage) {
                           $scope.backupLogo = angular.copy($scope.userDetails.profileImage);
                           $scope.userDetails.profileImage = $rootScope.picUrl + $scope.userDetails.profileImage;
                       }
                   }, function(error) {

                   });
           };

           $scope.editProfile = function() {
               $scope.profileLoading = true;
               var data = angular.copy($scope.userDetails);
               data.state = data.location.state;
               data.city = data.location.city;
               data.profileImage = $scope.image ? $scope.image : $scope.backupLogo;
               var sessionData = $window.localStorage.userSession ? JSON.parse($window.localStorage.userSession) : {};
               Upload.upload({
                   url: API.profile,
                   method: 'PUT',
                   data: data,
                   headers: {
                       'x-auth-deviceid': sessionData.deviceId,
                       'x-auth-devicetype': 3,
                       'x-auth-token': sessionData.token || ''
                   }
               }).then(function(response) {
                   if (response.data.success) {
                       // console.log(response.data.data.user, $scope.adminUserData);
                       loggedInUser.setData(response.data.data.user);
                       $scope.erticulateUserData.profileImage = response.data.data.user.profileImage;
                       $scope.erticulateUserData.firstName = response.data.data.user.firstName;
                       $scope.erticulateUserData.lastName = response.data.data.user.lastName;
                       if ($scope.userDetails.email !== $scope.savedUser.email) {
                           CommonService.changeEmail({ newEmail: $scope.userDetails.email })
                               .then(function(response) {
                                   toastr.success('Profile updated successfully and an email has been sent to your registered email', 'Success');
                                   console.log('response in newEmail', response);
                                   $scope.editMode = false;
                                   // $rootScope.logout();
                               }, function(error) {
                                   toastr.error(AppConfig.errorCode[response.data.errorCode], 'Error');
                               });
                       } else {
                           toastr.success('Profile updated', 'Success');
                           $scope.editMode = false;
                       }
                   } else {
                       toastr.error(AppConfig.errorCode[response.data.errorCode], 'Error');
                   }
               }, function(error) {

               }).finally(function() {
                   $scope.profileLoading = false;
               });
           };

           $scope.changeImage = function() {
               if ($scope.userDetails.profileImage) {
                $scope.image = $scope.userDetails.profileImage;
//                   $scope.image = getImagePortion($scope.userDetails.profileImage, 120, 150, 150, 80, 2);
               } else {
                   if ($scope.image) {
                       $scope.userDetails.profileImage = $scope.image;
                   }
               }
           };

           $("#inputIcon").click(function () {
             $("#inputFile").trigger('click');
           });

           var loadTimer;
           var imgObject = new Image();

           $("#inputFile").change(function(){
             var reader = new FileReader();
             reader.onload = function() {
                imgObject.src = reader.result;
                imgObject.onLoad = onImgLoaded();
                function onImgLoaded() {
                  if (loadTimer != null) clearTimeout(loadTimer);
                  if (!imgObject.complete) {
                    loadTimer = setTimeout(function() {
                      onImgLoaded();
                    }, 3);
                  } else {
                    onPreloadComplete();
                  }
                }
             };
             reader.readAsDataURL(this.files[0]);
           });

           function onPreloadComplete(){
             var maxWidth = 200; // Max width for the image
             var maxHeight = 200;    // Max height for the image
             var ratio = 0;  // Used for aspect ratio
             var imgWidth = imgObject.width;    // Current image width
             var imgHeight = imgObject.height;  // Current image height

             // Check if the current width is larger than the max
             if(imgWidth > maxWidth){
                 ratio = maxWidth / imgWidth;
                 imgHeight = imgHeight * ratio;    // Reset height to match scaled image
                 imgWidth = imgWidth * ratio;    // Reset width to match scaled image
             }

             // Check if current height is larger than max
             if(imgHeight > maxHeight){
                 ratio = maxHeight / imgHeight;
                 imgWidth = imgWidth * ratio;    // Reset width to match scaled image
                 imgHeight = imgHeight * ratio;    // Reset height to match scaled image
             }

             //call the methods that will create a 64-bit version of thumbnail here.
              var width = parseInt(imgWidth/2);
              var height = parseInt(imgHeight/2);
             var newImg = getImagePortion(imgObject, parseInt(imgWidth), parseInt(imgHeight), (imgWidth > 200)?parseInt(width - 200):0, (imgHeight > 200)?parseInt(height - 200):0, 2);
             $scope.image = dataURItoBlob(newImg);
             $scope.userDetails.profileImage = newImg;
             document.getElementById("displayImage").src = newImg;

           }


           function dataURItoBlob(dataURI, callback) {
              // convert base64 to raw binary data held in a string
              // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this
              var byteString = atob(dataURI.split(',')[1]);

              // separate out the mime component
              var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0]

              // write the bytes of the string to an ArrayBuffer
              var ab = new ArrayBuffer(byteString.length);
              var ia = new Uint8Array(ab);
              for (var i = 0; i < byteString.length; i++) {
                  ia[i] = byteString.charCodeAt(i);
              }

              // write the ArrayBuffer to a blob, and you're done
              var bb = new Blob([ab]);
              return bb;
          }

          //https://yellowpencil.com/blog/cropping-images-with-javascript/
           function getImagePortion(imgObj, newWidth, newHeight, startX, startY, ratio){
              /* the parameters: - the image element - the new width - the new height - the x point we start taking pixels - the y point we start taking pixels - the ratio */
              //set up canvas for thumbnail
              var tnCanvas = document.createElement('canvas');
              var tnCanvasContext = tnCanvas.getContext('2d');
              tnCanvas.width = newWidth; tnCanvas.height = newHeight;

              /* use the sourceCanvas to duplicate the entire image. This step was crucial for iOS4 and under devices. Follow the link at the end of this post to see what happens when you don’t do this */
              // var bufferCanvas = document.createElement('canvas');
              // var bufferContext = bufferCanvas.getContext('2d');
              // bufferCanvas.width = imgObj.width;
              // bufferCanvas.height = imgObj.height;
              // bufferContext.drawImage(imgObj, 0, 0, newWidth, newHeight);

              /* now we use the drawImage method to take the pixels from our bufferCanvas and draw them into our thumbnail canvas */
              tnCanvasContext.drawImage(imgObj, startX,startY,newWidth, newHeight);
              return tnCanvas.toDataURL();
           }

           $scope.openChangePasswordModal = function() {
               var changePasswordModalInstance = $uibModal.open({
                   templateUrl: './resources/templates/change-password.html',
                   controller: 'ChangePasswordModalController',
                   size: 'sm',
                   backdrop: 'true'
               });

               changePasswordModalInstance.result.then(function() {}, function() {
                   console.log('in error');
               });
           };

           $scope.editModeChange = function() {
               $scope.editMode = true;
           };

           $scope.cancel = function() {
               // $scope.init();
               $scope.userDetails = angular.copy($scope.savedUser);
               if ($scope.userDetails.profileImage) {
                   $scope.backupLogo = angular.copy($scope.userDetails.profileImage);
                   $scope.userDetails.profileImage = $rootScope.picUrl + $scope.userDetails.profileImage;
               }
               $scope.editMode = false;
           };
       }
   ];

},{}],10:[function(require,module,exports){
'use strict';

module.exports = [
    '$scope',
    '$state',
    'FormMessage',
    'AppConstant',
    'toastr',
    'CommonService',
    'AppConfig',
    'verifyOtp',
    '$stateParams',
    'uuid',
    function($scope, $state, FormMessage, AppConstant, toastr, CommonService, AppConfig, verifyOtp, $stateParams, uuid) {

        function init() {
            $scope.resetPasswordDetails = {
                password: '',
                confirmPassword: ''
            };
            if (verifyOtp !== true) {
                if (verifyOtp === 2003) {
                    $scope.exists = false;
                    $scope.expires = false;
                } else if (verifyOtp === 2004) {
                    $scope.exists = true;
                    $scope.expires = true;
                }
            } else {
                $scope.expires = false;
                $scope.exists = true;
            }
            $scope.message = FormMessage;
            $scope.constant = AppConstant;
            $scope.isCollapsed = true;
            $scope.viewPassword = true;
            $scope.passwordValidated = false;
            $scope.inputType = 'password';
            $scope.passwordValidations = [{
                'text': 'Passwords must contain at least 1 lower case.',
                'valid': false
            }, {
                'text': 'Passwords must contain at least 1 upper case.',
                'valid': false
            }, {
                'text': 'Passwords must contain at least at least 1 number.',
                'valid': false
            }];

        }

        init();
        $scope.generateDeviceId = function() {
            $scope.deviceId = uuid.v4();
        };
        $scope.focusPassword = function() {
            $scope.isCollapsed = false;
        };
        $scope.blurPassword = function() {
            $scope.isCollapsed = true;
        };
        $scope.toggelView = function() {
            $scope.viewPassword = !$scope.viewPassword;

            if ($scope.inputType == 'password')
                $scope.inputType = 'text';
            else
                $scope.inputType = 'password';
        };

        $scope.validatePassword = function() {
            $scope.passwordValidations.forEach(function(each) {
                each.valid = false;
            });
            if (hasLowerCase($scope.resetPasswordDetails.password)) {
                $scope.passwordValidations[0].valid = true;
            }
            if (hasUpperCase($scope.resetPasswordDetails.password)) {
                $scope.passwordValidations[1].valid = true;
            }
            if (hasNumber($scope.resetPasswordDetails.password)) {
                $scope.passwordValidations[2].valid = true;
            }
            $scope.passwordValidated = true;
            $scope.passwordValidations.forEach(function(each) {
                if (!each.valid) {
                    $scope.passwordValidated = false;
                }
            });

        };

        function hasLowerCase(str) {
            return (/[a-z]/.test(str));
        };

        function hasUpperCase(str) {
            return (/[A-Z]/.test(str));
        };

        function hasNumber(myString) {
            return /\d/.test(myString);
        }

        $scope.resetPassword = function() {
            if ($scope.passwordValidated) {
                $scope.generateDeviceId();
                var data = angular.copy($scope.resetPasswordDetails);
                data.userId = $stateParams.id;
                data.token = $stateParams.token;
                delete data.confirmPassword;
                CommonService
                    .resetPassword(data, $scope.deviceId)
                    .then(function(response) {
                            console.log(response);
                            toastr.success('Your password has been successfully reset.  Please use your new password to access the system.');
                            $state.go('public.login');
                        },
                        function(error) {
                            toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                        });
            } else {
                toastr.error('Please give proper password.', 'Error');
            }
        };

    }
];
},{}],11:[function(require,module,exports){
'use strict';

module.exports = [
    '$scope',
    '$state',
    '$window',
    'toastr',
    '$stateParams',
    'uuid',
    'FormMessage',
    'CommonService',
    'verifyLink',
    'loggedInUser',
    'AppConfig',
    function($scope, $state, $window, toastr, $stateParams, uuid, FormMessage, CommonService, verifyLink, loggedInUser, AppConfig) {

        function init() {
            $scope.formData = {
                userId: $stateParams.id,
                password: ''
            };
            $scope.generateDeviceId();
            $scope.message = FormMessage;
            $scope.isCollapsed = true;
            $scope.viewPassword = true;
            $scope.passwordValidated = false;
            $scope.alreadyActioned = false;
            if (verifyLink !== true) {
                if (verifyLink === 2004) {
                    $scope.expires = false;
                    $scope.alreadyActioned = false;
                } else {
                    $scope.alreadyActioned = true;
                    $scope.expires = true;
                }
            } else {
                $scope.expires = verifyLink;
            }
            $scope.inputType = 'password';
            $scope.passwordValidations = [{
                'text': 'Passwords must contain at least 1 lower case.',
                'valid': false
            }, {
                'text': 'Passwords must contain at least 1 upper case.',
                'valid': false
            }, {
                'text': 'Passwords must contain at least at least 1 number.',
                'valid': false
            }];
        }


        $scope.generateDeviceId = function() {
            $scope.deviceId = uuid.v4();
        };
        $scope.focusPassword = function() {
            $scope.isCollapsed = false;
        };
        $scope.blurPassword = function() {
            $scope.isCollapsed = true;
        };
        $scope.toggelView = function() {
            $scope.viewPassword = !$scope.viewPassword;

            if ($scope.inputType == 'password')
                $scope.inputType = 'text';
            else
                $scope.inputType = 'password';
        };

        $scope.validatePassword = function() {
            $scope.passwordValidations.forEach(function(each) {
                each.valid = false;
            });
            if (hasLowerCase($scope.formData.password)) {
                $scope.passwordValidations[0].valid = true;
            }
            if (hasUpperCase($scope.formData.password)) {
                $scope.passwordValidations[1].valid = true;
            }
            if (hasNumber($scope.formData.password)) {
                $scope.passwordValidations[2].valid = true;
            }
            $scope.passwordValidated = true;
            $scope.passwordValidations.forEach(function(each) {
                if (!each.valid) {
                    $scope.passwordValidated = false;
                }
            });

        };

        function hasLowerCase(str) {
            return (/[a-z]/.test(str));
        };

        function hasUpperCase(str) {
            return (/[A-Z]/.test(str));
        };

        function hasNumber(myString) {
            return /\d/.test(myString);
        }

        $scope.login = function(data) {
            CommonService
                .login({
                    email: data.email.toLowerCase(),
                    password: $scope.formData.password,
                    loginTime: new Date()
                }, $scope.deviceId)
                .then(function(response) {
                        if (response.data.user.userType !== 3 && response.data.user.userType !== 4) {
                            // toastr.success('Login successful', 'Success');
                            $window.localStorage.userSession = JSON.stringify({
                                token: response.data.token,
                                deviceId: response.data.deviceId
                            });
                            $window.localStorage.pptCount = false;
                            if (response.data.pptCount > 0) {
                                $window.localStorage.pptCount = true;
                            }
                            loggedInUser.setData(response.data.user);
                            if (response.data.user.userType === 1) {
                                $state.go('auth.dashboard');
                            } else {
                                $state.go('auth.mentor-presenter-list');
                            }
                        } else {
                            toastr.error('Credentials invalid.  Please provide valid credentials.');
                        }
                    },
                    function(error) {
                        toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                    });
        };

        $scope.setPassword = function() {
            $scope.generateDeviceId();
            CommonService.setPassword($scope.formData, $scope.deviceId)
                .then(function(response) {
                    toastr.success('Password has been set', 'Success');
                    if (response.success) {
                        $scope.login(response.data);
                    }
                }, function(error) {
                    toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                });
        };

        $scope.declineInvitation = function() {
            CommonService.declineInvitation($stateParams.id, $scope.deviceId)
                .then(function(response) {
                    toastr.success('Invitation has been declined', 'Success');
                    $scope.expires = false;
                }, function(error) {
                    toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                });
        };

        init();
    }
];
},{}],12:[function(require,module,exports){
'use strict';

module.exports = [
    '$scope',
    '$state',
    'AppConfig',
    '$rootScope',
    '$uibModal',
    'loggedInUser',
    'toastr',
    'FormMessage',
    '$window',
    'API',
    'Upload',
    '$q',
    '$uibModalInstance',
    'scope',
    'uuid',
    'CommonService',
    function($scope, $state, AppConfig, $rootScope, $uibModal, loggedInUser, toastr, FormMessage, $window, API, Upload, $q, $uibModalInstance, scope, uuid, CommonService) {
        var canceller;
        $scope.init = function() {
            console.log('state upload ', scope);
            $scope.presentationDetails = {};
            $scope.viewInfo = false;
            $scope.userInfo = loggedInUser.getData();
            if ($window.localStorage.pptCount == 'false') {
                $scope.viewInfo = true;
            }
            $scope.generateDeviceId();
        };

        $scope.generateDeviceId = function() {
            $scope.deviceId = uuid.v4();
        };

        $scope.uploadFile = function(file) {
            var interval;
            var data = { ppt: {} };
            var checkNet;
            canceller = $q.defer();
            console.log(file);

            if (Array.isArray(file)) {
                if (!file.length) {
                    toastr.error('Error processing file.  Please upload a valid presentation format, either PowerPoint or PDF.', 'Error');
                    return;
                }
                data.ppt = file[0];
            } else {
                data.ppt = file;
            }
            if (data.ppt) {
                if (data.ppt.size > 52428800) {
                    toastr.error('Max file size is 50MB', 'Error');
                    return;
                }
                if (AppConfig.allowedFileTypes.indexOf(data.ppt.type) === -1) {
                    toastr.error('Error processing file.  Please upload a valid presentation format, either PowerPoint or PDF.', 'Error');
                    return;
                }
                console.log('data ', data);
                $scope.presentationDetails.name = data.ppt.name;
                var sessionData = $window.localStorage.userSession ? JSON.parse($window.localStorage.userSession) : {};
                $scope.pptLoading = true;
                interval = setInterval(function() {
                    CommonService
                        .netTesting($scope.deviceId)
                        .then(function(response) {
                                console.log('net test', response);
                            },
                            function(error) {
                                console.log('error ');
                                clearInterval(interval);
                                toastr.error('You are offline, Please check your internet connection.', 'Error');
                                $scope.closeModal();
                                return;
                            });
                }, 3000);
                // return;
                Upload.upload({
                    url: API.uploadPpt,
                    method: 'POST',
                    data: data,
                    timeout: canceller.promise,
                    headers: {
                        'x-auth-deviceid': sessionData.deviceId,
                        'x-auth-devicetype': 3,
                        'x-auth-token': sessionData.token || ''
                    }
                }).then(function(resp) {
                    if (resp.data.success) {
                        toastr.success('Presentation has been uploaded successfully', 'Success');
                        $window.localStorage.pptCount = true;
                        $uibModalInstance.dismiss('cancel');
                        if ($state.current.name == 'auth.dashboard') {
                            $rootScope.initializeDashboard();
                        } else {
                            $state.go('auth.dashboard');
                        }
                    } else {
                        toastr.error(AppConfig.errorCode[resp.data.errorCode], 'Error');
                    }
                    clearInterval(interval);
                }, function(resp) {
                    if (resp.status == -1) {
                        if (Array.isArray(file)) {
                            file = [];
                        } else {
                            file = {};
                        }
                    }
                }, function(evt) {
                    var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                    console.log('progress', progressPercentage);
                    if (progressPercentage === 100) {
                        $scope.hideCancel = true;
                    }
                    $scope.progress = progressPercentage;
                }).finally(function() {
                    $scope.pptLoading = false;
                });
            }

        };

        $scope.cancel = function() {
            canceller.resolve("user cancelled");
            toastr.error('Upload has been canceled', 'Error');
            $uibModalInstance.dismiss('cancel');
        };

        $scope.closeModal = function(argument) {
            $uibModalInstance.dismiss('cancel');
        };

    }
];
},{}],13:[function(require,module,exports){
'use strict';

module.exports = [
  '$state',
  '$rootScope',
  '$scope',
  '$timeout',
  '$window',
  'CommonService',
  'uuid',
  'toastr',
  'AppConfig',
  'AppConstant',
  'fetchPresentation',
  'PresentationService',
  'loggedInUser',
  '$uibModal',
  function($state, $rootScope, $scope, $timeout, $window, CommonService, uuid, toastr, AppConfig, AppConstant, fetchPresentation, PresentationService, loggedInUser, $uibModal) {
    var video, dur = 0,
      timer,
      navigateType = 'next',
      allowStop = true,
      recStopped = false,
      execType = "fadeIn";
    $scope.$on('$destroy', function() {
      if (recorder) {
        clearInterval(timer);
        recorder.stopRecording();
        recorder.camera.stop();
        recorder.destroy();
        recorder = null;
      }
    })
    $timeout(function() {
      $('.video-section-body').bind('contextmenu', function(e) {
        return false;
      });
    }, 100)

    $scope.init = function() {
      //Initialize all dataa
      $scope.presentation = fetchPresentation; // Set current presentation
      if(!$scope.presentation || !$scope.presentation.createdBy || (loggedInUser.getData()._id+"" != $scope.presentation.createdBy._id)) {
        toastr.error("Invalid URL entered. Our support team has been notified of this error.", 'Error');
        window.location.href = "/#/dashboard";
      }
      $scope.slide = 0; // Set current slide
      $scope.totalSlides = $scope.presentation.imageList.length;
      $scope.currentSlideVideos = [];
      $scope.practiceTotalDuration = 0;
      $scope.displayDuration = '0:00';
      $scope.videoStartDisabled = false;
      $scope.nextOpen = false;
      $scope.prevOpen = false;
      $scope.showEndAndShare = false;
      $scope.selectedMentorList = [];
      document.getElementById("imageDisplay").style.backgroundImage = 'url('+$scope.presentation.imageList[$scope.slide]+')';
      // Set type of page as video and set HTML Video tag to video variable
      $rootScope.page = 'video';
      video = document.getElementById('record_video');
      if ($scope.slide === $scope.totalSlides - 1) { //Last slide reached
        $scope.endRecording = true;
      } else {
        $scope.endRecording = false;
      }

    };

    function captureCamera(callback) {
      navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(function(camera) {
        console.log('allowed');
        callback(camera);
      }).catch(function(error) {
        alert('Unable to capture your camera. Please check console logs.');
        console.error(error);
      });
    }

    function fancyTimeFormat(time) {
      // Hours, minutes and seconds
      time = Math.round(time);
      var hrs = ~~(time / 3600);
      var mins = ~~((time % 3600) / 60);
      var secs = time % 60;

      // Output like "1:01" or "4:03:59" or "123:03:59"
      var ret = "";

      if (hrs > 0) {
        ret += "" + hrs + ":" + (mins < 10 ? "0" : "");
      }

      ret += "" + mins + ":" + (secs < 10 ? "0" : "");
      ret += "" + secs;
      return ret;
    }

    var recorder; // globally accessible
    $scope.isPlaying = false;
    $scope.startRecord = function() {
      $scope.isPlaying = true;
      $scope.showEndAndShare = true;
      if (!$scope.videoStartDisabled) {
        $scope.nextOpen = true;
        $scope.prevOpen = true;
        if ($scope.slide === 0) {
          $scope.prevOpen = false;
        }
        $scope.videoStartDisabled = true;
        captureCamera(function(camera) {
          setSrcObject(camera, video);
          video.play();
          $scope.recordStartedAt = new Date().getTime();
          $scope.slideStartedAt = $scope.recordStartedAt;
          video.muted = true;
          recorder = RecordRTC(camera, {
            type: 'video',
            mimeType: 'video/webm'
            // bitsPerSecond: 128000
          });
          recorder.startRecording();
          timer = setInterval(function() {
            $scope.currentSlideDuration++;
            $scope.practiceTotalDuration++;
            $scope.displayDuration = fancyTimeFormat($scope.practiceTotalDuration);
            $scope.$apply();
          }, 1000);
          // release camera on stopRecording
          recorder.camera = camera;
          // $scope.videoStartDisabled = false;
        });

      } else {
        $scope.stopRecord();
      }
    }

    $scope.slides = [];
    $scope.lastSlideStartAt = 0;
    $scope.currentSlideDuration = 0;
    $scope.nextSlide = function(type) {
      if($scope.isPlaying) {
        $scope.time = new Date().getTime();
        var slideData = {
          imageUrl: $scope.presentation.imageList[$scope.slide],
          duration: $scope.currentSlideDuration,
          comments: []
        }

        if(!$scope.slides.length) {
          slideData.startTime = 0; //Seconds
        } else {
          slideData.startTime = $scope.slides[$scope.slides.length - 1].endTime;
        }

        slideData.endTime = slideData.startTime + slideData.duration; //Seconds

        $scope.slides.push(slideData);
        $scope.slideStartedAt = $scope.time;
        if(type != 'finish') {
          $scope.slide++;
          document.getElementById("imageDisplay").style.backgroundImage = 'url('+$scope.presentation.imageList[$scope.slide]+')';
          if ($scope.slide === $scope.totalSlides - 1) {
            $scope.endRecording = true;
          } else {
            $scope.endRecording = false;
          }
        }
        $scope.currentSlideDuration = 0;
      }
    }

    function stopRecordAndUpload(data) {

      var videoBlob, listOffile, videoObj, name, formData, key;
      videoBlob = recorder.getBlob();
      var practiceData = {
        presentationRef:  $scope.presentation._id,
        startTime: $scope.recordStartedAt.toFixed(2),
        endTime: $scope.recordEndAt.toFixed(2),
        duration: $scope.practiceTotalDuration || $scope.totalDuration,
        slides: $scope.slides
      }
      var videoObj = {
        video: videoBlob
      }

      var key;

      var formData = new FormData();
      for (key in videoObj) {
        formData.append(key, videoObj[key]);
      }
      formData.append('practice', JSON.stringify(practiceData));
      //API call

      // recorder = null;

      $scope.modalInstance = $uibModal.open({
        templateUrl: 'resources/templates/uploading-record-modal.html',
        size: 'sm',
        backdrop: 'static',
        keyboard: false,
        scope: $scope
      });

      PresentationService.uploadPresentationVideo({
        headers: { 'Content-Type': undefined },
        data: formData
      }).then(function(data) {
        window.location.href = "/#/dashboard";
      }, function(error) {
        console.log('error', error);
      });
    }

    $scope.uploadSlide = function() {
      clearInterval(timer);
      recorder.camera.stop();
      $scope.nextSlide('finish');
      $scope.recordEndAt = new Date().getTime();
      recorder.stopRecording(stopRecordAndUpload);
      // document.getElementById('example-video').src = recorder.getBlob();
      // var player = videojs('example-video');
      // player.src({src:recorder.getBlob(),type:"application/x-mpegurl"})
      // player.play();
      // $scope.currentClickType = type;
      // //fadeOut(video);
      // if (!$scope.nextOpen) {
      //   return;
      // }
      // $scope.nextOpen = false;
      // $scope.prevOpen = false;
      // // $scope.openLoadingModal();
      // console.log(type);
      // navigateType = 'next';
      // if ($scope.currentClickType === 'next') {
      //   $scope.slide++;
      //   $scope.nextOpen = false;
      //   $scope.prevOpen = false;
      // } else if(navigateType == 'prev'){
      //   $scope.slide--;
      //   $scope.nextOpen = false;
      //   if ($scope.slide === 0) {
      //     $scope.prevOpen = false;
      //   } else {
      //     $scope.prevOpen = true;
      //   }
      // }
      // $timeout(function() {
      //   recorder.stopRecording(stopRecordingCallback);
      // }, 0);
    }


    $scope.stopRecord = function() {
      $scope.recordingPaused = !$scope.recordingPaused;
      if($scope.recordingPaused) {
        $scope.nextOpen = false;
        $scope.isPlaying = false;
        clearInterval(timer);
        recorder.pauseRecording();  // pause the recording
        video.pause();
      } else {
        $scope.nextOpen = true;
        $scope.isPlaying = true;
        recorder.resumeRecording(); // resume again
        timer = setInterval(function() {
          $scope.currentSlideDuration++;
          $scope.practiceTotalDuration++;
          $scope.displayDuration = fancyTimeFormat($scope.practiceTotalDuration);
          $scope.$apply();
        }, 1000);
        video.play();
      }
    }
  }
];

},{}],14:[function(require,module,exports){
'use strict';

module.exports = [
  '$state',
  '$rootScope',
  '$scope',
  '$window',
  'CommonService',
  'uuid',
  'toastr',
  'AppConfig',
  'AppConstant',
  'fetchPresentation',
  'PresentationService',
  'MentorService',
  '$uibModal',
  'loggedInUser',
  '$interval',
  '$timeout',
  function($state, $rootScope, $scope, $window, CommonService, uuid, toastr, AppConfig, AppConstant, fetchPresentation, PresentationService, MentorService, $uibModal, loggedInUser, $interval, $timeout) {
    var video = document.getElementById('practice-video'), player = videojs('practice-video'),
      intervalPromise,
      seekHandlePos = 0,
      curTime = 0,
      recDur = 0,
      slidePosition = [],
      commentCount,
      allComments = [],
      timer,
      currentActiveComment = undefined, seekWidth;
      $scope.currentSlide = 0;

    $scope.$on('$destroy', function() {
      $scope.pausePlayToggle('stop');
    })

    $timeout(function() {
      $('.video-section-body').bind('contextmenu', function(e) {
        return false;
      });
    }, 100)

    function fancyTimeFormat(time) {
      // Hours, minutes and seconds
      time = time.toFixed(2);

      var hrs = ~~(time / 3600);
      var mins = ~~((time % 3600) / 59);
      var secs = time % 59;
      secs = secs.toFixed(0);
      // Output like "1:01" or "4:03:59" or "123:03:59"
      var ret = "";

      if (hrs > 0) {
        ret += "" + hrs + ":" + (mins < 10 ? "0" : "");
      }

      ret += "" + mins + ":" + (secs < 10 ? "0" : "");
      ret += "" + secs;
      return ret;
    }

    function slideMarkerSetup() {
      var i, calcPercentage, totalDuration = $scope.practice.duration,
        slideMarker, calcLeft = 0,
        dur = 0,
        seekBar = angular.element('.seek-bar');
      for (i = 0; i < $scope.practice.slideList.length - 1; i++) {
        dur = dur + $scope.practice.slideList[i].duration;
        calcPercentage = dur / totalDuration;
        calcLeft = 209 + (calcPercentage * seekBar.width());
        slidePosition.push(calcLeft);
        slideMarker = angular.element('<div id="slide' + (i + 1) + '" class="slide-marker display-inline-block" style="left: ' + calcLeft + 'px;"></div>');
        angular.element('.bottom-section').append(slideMarker);
        console.log('slide marker setup', seekBar.width());
      }
    }

    function commentMarkerSetup() {
      var i, j, calcLeft, seekBarWidth = angular.element('.seek-bar').width(),
        commentDiv,
        bottomSection = angular.element('.bottom-section'),
        commentCount = 1,
        currentComment;
      for (i = 0; i < $scope.practice.slideList.length; i++) {
        for (j = 0; j < $scope.practice.slideList[i].comments.length; j++) {
          allComments.push($scope.practice.slideList[i].comments[j]);
          currentComment = $scope.practice.slideList[i].comments[j];
          calcLeft = 201 + $scope.practice.slideList[i].comments[j].offset * seekBarWidth / 100;
          commentDiv = angular.element('<div id="comment' + commentCount + '" class="comment-marker display-inline-block" style="left: ' + calcLeft + 'px;"></div>');
          bottomSection.append(commentDiv);
          commentDiv.on('click', currentComment, $scope.mouseOnComment);
          commentCount++;
        }
      }
    }

    $scope.init = function(params) {
      $rootScope.page = 'video';
      $scope.presentation = fetchPresentation.presentationDetails;
      $scope.showPage;
      if(($scope.presentation && $scope.presentation.createdBy) && ($scope.presentation.createdBy._id+"" == ""+loggedInUser.getData()._id))
        $scope.showPage = true;
      else
        toastr.error("Invalid URL entered. Our support team has been notified of this error.", 'Error');

      if(!$scope.showPage)
        window.location.href = "/#/dashboard";
      $scope.practice = fetchPresentation.practiceDetails;

      $scope.showCommentArea = true;
      $scope.currentTime = "00:00";
      $scope.videoDuration = "00:00";
      $scope.currentLargeSection = 'webcam';
      $scope.calcBackgroundPosition = 0;
      $scope.slide = 0;
      $scope.totalSlides = $scope.practice.slideList.length;
      video.src = $scope.practice.videoUrl;
      $scope.currentSlideImage = $scope.practice.slideList[$scope.slide].imageUrl;
      video.load();
      player.src({src:$scope.practice.videoUrl,type:"video/webm"})
      player.on("waiting", function () {
        $scope.loading = true;
      });
      player.on("playing", function () {
        $scope.loading = false;
      });
      $scope.play = false;

      video.addEventListener('loadedmetadata', function() {
        $scope.duration = video.duration;
        $scope.videoDuration = fancyTimeFormat($scope.practice.duration);
      });

      video.addEventListener('ended',function() {
        $scope.pausePlayToggle('stop');
      });

      timer = $interval(function() {
        seekWidth = angular.element('.seek-bar').width() ;
        var left = (205 + video.currentTime) * (seekWidth / $scope.practice.duration);

        var index = 0;

        for (var i = 0; i < $scope.practice.slideList.length; i++) {
          if((video.currentTime >= $scope.practice.slideList[i].startTime) && (video.currentTime <= $scope.practice.slideList[i].endTime)) {
            index = i;
          }
          if(video.currentTime == $scope.practice.duration.toFixed(2)) {
            $scope.pausePlayToggle('stop');
          }
        }

        $scope.currentSlideImage = $scope.practice.slideList[index].imageUrl;
        $scope.slide = index;
        if ($scope.slide > 0) {
          //angular.element('.seek-handle').css('left', slidePosition[$scope.slide - 1] + left - 205);
          $scope.calcBackgroundPosition = (recDur + video.currentTime) * 100 / Math.round($scope.practice.duration);
        } else {
          //angular.element('.seek-handle').css('left', left);
          $scope.calcBackgroundPosition = video.currentTime * 100 / Math.round($scope.practice.duration);
        }

      }, 0);

      $timeout(function() {
        slideMarkerSetup();
        commentMarkerSetup();
        if ($rootScope.setSlide) {
            $scope.gotoPosition('slide', $rootScope.setSlide);
        }
      }, 0);

    };

    $scope.pausePlayToggle = function(type) {

      if (type == 'stop') {
        video.pause();
        player.pause();
        $scope.play = false;
        $scope.slide = 0;
        $interval.cancel(intervalPromise);
        $scope.calcBackgroundPosition = 0;
        video.currentTime = 0;
        $scope.currentTime = fancyTimeFormat(recDur + video.currentTime);
      } else if($scope.play) {
        video.pause();
        player.pause();
        $scope.play = false;
        $interval.cancel(intervalPromise);
      } else {
        $scope.play = true;
        video.play();
        player.play();
        intervalPromise = $interval(function() {
            $scope.play = true;
            $scope.currentTime = fancyTimeFormat(recDur + video.currentTime);
        }, 0);
      }
    }

    $scope.gotoPosition = function(e, param) {

      var positionPercent;
      if (e == 'slide') {
        if (param == 0) {
          positionPercent = 0;
        } else {
          positionPercent = (slidePosition[param - 1] - 209) * 100 / angular.element('.seek-bar').width();
        }
      } else {
        positionPercent = e.offsetX * 100 / angular.element('.seek-bar').width();
      }
      var currentTime = positionPercent * $scope.practice.duration / 100,
        currentSlide,
        curTime = positionPercent * $scope.practice.duration / 100;
      // console.log('currentTime', currentTime, $scope.duration);
      var recurringDuration = 0;
      for (var i = 0; i < $scope.practice.slideList.length; i++) {
        recurringDuration = recurringDuration + $scope.practice.slideList[i].duration;
        currentSlide = i;
        if (i > 0) {
          currentTime = currentTime - recurringDuration + $scope.practice.slideList[i].duration;
          recDur = recurringDuration - $scope.practice.slideList[i].duration;
        } else {
          currentTime = currentTime;
          recDur = 0;
        }

        $scope.slide = i;
        video.pause();
        $interval.cancel(intervalPromise);

        $scope.currentSlideImage = $scope.practice.slideList[$scope.slide].imageUrl;
        video.currentTime = currentTime;
        player.currentTime(currentTime);
        $scope.currentTime = fancyTimeFormat(curTime);
        $scope.play = false;
        $scope.pausePlayToggle();
        break;
      }

    }

    $scope.playSlideVideo = function() {
      $scope.currentSlideImage = $scope.practice.slideList[$scope.slide].imageUrl;

      // video.play();
      // $scope.play = true;
      $timeout(function() {
          $scope.pausePlayToggle();
      }, 0)
    }

    $scope.swapSection = function(param) {
      if (param !== $scope.currentLargeSection) {
        $scope.currentLargeSection = param;
      }
    }

    $scope.goToPreviousSlide = function() {

      if ($scope.slide !== 0) {
        $scope.gotoPosition('slide', $scope.slide - 1);
      }
    }

    $scope.goToNextSlide = function() {
      video.pause();
      if ($scope.slide + 1 !== $scope.totalSlides) {
        $scope.gotoPosition('slide', $scope.slide + 1);
      }
    }

    $scope.goBack = function() {
      if (history.length > 2) {
        $state.go('auth.dashboard');
      } else {
        history.back();
      }
    }

    $scope.mouseOnComment = function(e) {
      var flag = false;
      console.log('mouse on comment', e);
      if (currentActiveComment) {
        if (currentActiveComment._id == e.data._id) {
          console.log('time to hide');
          flag = true;
        }
      }
      currentActiveComment = angular.copy(e.data);
      angular.element('.down-pointer').remove();
      var commentContainer = angular.element('.comment-container'),
        calcPercentage = e.data.offset * angular.element('.seek-bar').width() / 100;
      if (flag) {
        commentContainer.css({
          'opacity': '0'
        });
        currentActiveComment._id = 1;
      } else {
        $scope.currentComment = e.data.comment;
        setTimeout(function() {
          commentContainer.css({
            'left': e.pageX - 97,
            'opacity': '1'
          });
          commentContainer.append('<div class="down-pointer"></div>');
        }, 10)
      }


    };



  }
];

},{}],15:[function(require,module,exports){
'use strict';

module.exports = ['$filter', '$browser', function($filter, $browser) {
    return {
        require: 'ngModel',
        link: function($scope, $element, $attrs, ngModelCtrl) {
            var listener = function() {
                var value = $element.val().replace(/[^0-9]/g, '');
                $element.val($filter('tel')(value, false));
            };

            // This runs when we update the text field
            ngModelCtrl.$parsers.push(function(viewValue) {
                return viewValue.replace(/[^0-9]/g, '').slice(0, 10);
            });

            // This runs when the model gets updated on the scope directly and keeps our view in sync
            ngModelCtrl.$render = function() {
                $element.val($filter('tel')(ngModelCtrl.$viewValue, false));
            };

            $element.bind('change', listener);
            $element.bind('keydown', function(event) {
                var key = event.keyCode;
                // If the keys include the CTRL, SHIFT, ALT, or META keys, or the arrow keys, do nothing.
                // This lets us support copy and paste too
                if (key == 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) {
                    return;
                }
                $browser.defer(listener); // Have to do this or changes don't get picked up properly
            });

            $element.bind('paste cut', function() {
                $browser.defer(listener);
            });
        }

    };

}];
},{}],16:[function(require,module,exports){
'use strict';

module.exports = ['$window', function($window) {

    var loggedinUser = {
        userData: {}
    };

    function setData(data) {
        loggedinUser.userData = data;
        $window.localStorage.ErticulateUser = JSON.stringify(data);
    }

    function getData() {
        // console.log('in getdata',$window.localStorage.ErticulateUser);
        loggedinUser.userData = $window.localStorage.ErticulateUser ? JSON.parse($window.localStorage.ErticulateUser) : {};
        return loggedinUser.userData;

    }

    function resetData() {
        $window.localStorage.ErticulateUser = JSON.stringify({});
        $window.localStorage.userSession = JSON.stringify({});
        loggedinUser.userData = {};
    }

    return {
        setData: setData,
        getData: getData,
        resetData: resetData
    };

}];
},{}],17:[function(require,module,exports){
 'use strict';

 module.exports = ['$sce',
     function($sce) {
         return function(text) {
             console.log(text);
             if (text !== undefined) {
                 text = text.replace(/\n/g, '<br />');
                 return $sce.trustAsHtml(text);
             }
         };
     }
 ];
},{}],18:[function(require,module,exports){
'use strict';

module.exports = ['$sce',
    function($sce) {
        return function(rating, type) {
            var star = '';
            if (rating !== undefined) {

                var halfStar = '<i class="fa fa-star-half-o star-color"></i>',
                    fullStar = '<i class="fa fa-star star-color"></i>',
                    emptyStar = '<i class="fa fa-star empty-star"></i>',
                    star = '',
                    newRating = Math.floor(rating);

                if (type == 'presenter') {
                    fullStar = "<img src='./resources/images/star.png' / class='margin-left-5'>";
                    emptyStar = "<img src='./resources/images/star-big.png' / class='margin-left-5'>";
                }
                if (type == 'avgRating') {
                    halfStar = '<i class="fa fa-star-half-o color-gray"></i>';
                    fullStar = '<i class="fa fa-star color-gray"></i>';
                }


                if (rating) {
                    var halfRating = rating - newRating,
                        remainingRating = 5 - newRating;
                    for (var i = 1; i <= newRating; i++) {
                        star += fullStar;
                    }
                    if (halfRating !== 0) {
                        star += halfStar;
                        if (remainingRating) {
                            for (var i = 1; i < remainingRating; i++) {
                                star += emptyStar;
                            }
                        }
                    } else {
                        for (var i = 1; i <= remainingRating; i++) {
                            star += emptyStar;
                        }
                    }

                } else {
                    for (var j = 1; j <= 5; j++) {
                        star += emptyStar;
                    }
                }
            }

            return $sce.trustAsHtml(star);
        };
    }
];
},{}],19:[function(require,module,exports){
'use strict';

module.exports = [
    function() {
        return function(tel) {
            console.log(tel);
            if (!tel) { return ''; }

            var value = tel.toString().trim().replace(/^\+/, '');

            if (value.match(/[^0-9]/)) {
                return tel;
            }

            var country, city, number;

            switch (value.length) {
                case 1:
                case 2:
                case 3:
                    city = value;
                    break;

                default:
                    city = value.slice(0, 3);
                    number = value.slice(3);
            }

            if (number) {
                if (number.length > 3) {
                    number = number.slice(0, 3) + '-' + number.slice(3, 7);
                } else {
                    number = number;
                }

                return ("(" + city + ") " + number).trim();
            } else {
                return "(" + city;
            }

        };
    }
];
},{}],20:[function(require,module,exports){
'use strict';
// Module defination as well as defination for all the directives, controllers for this modules

module.exports = angular.module('modules.common', [
        'ui.router'
    ])
    .factory('loggedInUser', require('./factory/userdata'))
    .directive('phoneInput', require('./directives/phone-musk-directive'))
    .service('HttpService', require('./services/http-service'))
    .service('CommonService', require('./services/common-service'))
    .service('PresentationService', require('./services/presentation-service'))
    .controller('loginCtrl', require('./controllers/loginCtrl'))
    .controller('profileCtrl', require('./controllers/profileCtrl'))
    .controller('dashboardHtmlCtrl', require('./controllers/dashboardHtml'))
    .controller('feedbackCtrl', require('./controllers/feedback-notification-controller'))
    .controller('setPasswordCtrl', require('./controllers/set-password-controller'))
    .controller('changeEmailCtrl', require('./controllers/change-email-controller'))
    .controller('ChangePasswordModalController', require('./controllers/change-password-modal-controller'))
    .controller('UploadPresentationModalController', require('./controllers/upload-presentation-modal-controller'))
    .controller('commonPanelCtrl', require('./controllers/common-panel-controller'))
    .controller('videoRecordCtrl', require('./controllers/video-record-controller'))
    .controller('resetPasswordCtrl', require('./controllers/reset-password-controller'))
    .controller('presentationWatchCtrl', require('./controllers/presentation-watch-ctrl'))
    .controller('videoWatchCtrl', require('./controllers/video-watch-controller'))
    // .controller('addFeedback', require('./controllers/add-feedback-controller'))
    // .controller('mentorPresenterListCtrl', require('./controllers/mentor-presenter-list-controller'))
    .filter('starRating', require('./filters/star-rating-filter'))
    .filter('breakFilter', require('./filters/break-filter'))
    .filter('tel', require('./filters/tel-filter'))
    // .filter('groupBy', require('./filters/group-by-filter'))
    .config(require('./router/route'));

},{"./controllers/change-email-controller":2,"./controllers/change-password-modal-controller":3,"./controllers/common-panel-controller":4,"./controllers/dashboardHtml":5,"./controllers/feedback-notification-controller":6,"./controllers/loginCtrl":7,"./controllers/presentation-watch-ctrl":8,"./controllers/profileCtrl":9,"./controllers/reset-password-controller":10,"./controllers/set-password-controller":11,"./controllers/upload-presentation-modal-controller":12,"./controllers/video-record-controller":13,"./controllers/video-watch-controller":14,"./directives/phone-musk-directive":15,"./factory/userdata":16,"./filters/break-filter":17,"./filters/star-rating-filter":18,"./filters/tel-filter":19,"./router/route":21,"./services/common-service":22,"./services/http-service":23,"./services/presentation-service":24}],21:[function(require,module,exports){
module.exports = ['$stateProvider',
    '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {
        $stateProvider
            .state('public', {
                abstract: true,
                type: 'public',
                template: require('../templates/public.html')
                // controller: 'commonPanelCtrl as vm'
            })
            .state('public.login', {
                url: '/login',
                type: 'public',
                template: require('../templates/login.html'),
                controller: 'loginCtrl as vm'
            })

            .state('public.resetPassword', {
                url: '/reset-password/:id/:token',
                type: 'public',
                template: require('../templates/reset-password.html'),
                controller: 'resetPasswordCtrl',
                resolve: {
                    verifyOtp: ['$q', '$stateParams', 'CommonService', 'uuid', 'loggedInUser', '$window', function($q, $stateParams, CommonService, uuid, loggedInUser, $window) {
                        var defer = $q.defer();
                        loggedInUser.resetData();
                        $window.localStorage.removeItem('userSession');
                        $window.localStorage.removeItem('pptCount');
                        CommonService.verifyOtp($stateParams.id, uuid.v4()).then(function(response) {
                            defer.resolve(response.success);
                        }, function(error) {
                            // defer.reject(error);
                            defer.resolve(error.errorCode);
                        });
                        return defer.promise;
                    }]
                }
            })

            .state('public.404', {
                url: '/404',
                template: require('../templates/404.html')
            })

            .state('auth.profile', {
                url: '/profile',
                type: 'auth',
                template: require('../templates/profile.html'),
                controller: 'profileCtrl'
            })
            .state('public.forgotPassword', {
                url: '/forgot-password',
                type: 'public',
                template: require('../templates/forgot-password.html'),
                controller: 'loginCtrl as vm'
            })
            .state('feedback-notification', {
                url: '/feedback-notification',
                type: 'auth',
                template: require('../templates/feedback-notification.html'),
                controller: 'feedbackCtrl'
            })
            .state('public.setPassword', {
                url: '/set-password/:id',
                type: 'public',
                template: require('../templates/set-password.html'),
                controller: 'setPasswordCtrl',
                resolve: {
                    verifyLink: ['$q', '$stateParams', 'CommonService', 'uuid', 'loggedInUser', '$window', function($q, $stateParams, CommonService, uuid, loggedInUser, $window) {
                        var defer = $q.defer();
                        loggedInUser.resetData();
                        $window.localStorage.removeItem('userSession');
                        $window.localStorage.removeItem('pptCount');
                        CommonService.verifyLink($stateParams.id, uuid.v4()).then(function(response) {
                            defer.resolve(response.success);
                        }, function(error) {
                            // defer.reject(error);
                            defer.resolve(error.errorCode);
                        });
                        return defer.promise;
                    }]
                }
            })
            .state('public.changeEmail', {
                url: '/change-email/:id',
                type: 'public',
                template: require('../templates/change-email.html'),
                controller: 'changeEmailCtrl',
                resolve: {
                    verifyEmail: ['$q', '$stateParams', 'CommonService', 'uuid', 'loggedInUser', '$window', function($q, $stateParams, CommonService, uuid, loggedInUser, $window) {
                        var defer = $q.defer();
                        loggedInUser.resetData();
                        $window.localStorage.removeItem('userSession');
                        $window.localStorage.removeItem('pptCount');
                        CommonService.verifyEmail($stateParams.id, uuid.v4()).then(function(response) {
                            defer.resolve(response.success);
                        }, function(error) {
                            console.log('error ', error);
                            // defer.reject(error);
                            defer.resolve(error.errorCode);
                        });
                        return defer.promise;
                    }]
                }
            })
            .state('auth', {
                abstract: true,
                type: 'auth',
                template: require('../templates/common-panel.html'),
                controller: 'commonPanelCtrl'
            })
            .state('auth.dashboard', {
                url: '/dashboard',
                type: 'auth',
                template: require('../templates/presentation_dashboard.html'),
                controller: 'dashboardHtmlCtrl'
            })
            .state('auth.feedback', {
                url: '/dashboard/feedback/:presentationRef/:practiceRef',
                type: 'auth',
                template: require('../templates/presentation_dashboard.html'),
                controller: 'dashboardHtmlCtrl'
            })
            .state('auth.video', {
                url: '/video/:id',
                type: 'auth',
                template: require('../templates/video.html'),
                controller: 'videoRecordCtrl',
                resolve: {
                    fetchPresentation: ['$q', '$stateParams', 'PresentationService', function($q, $stateParams, PresentationService) {
                        var defer = $q.defer();
                        PresentationService.getPresentationDetails($stateParams.id, {pesentationOnly: true}).then(function(response) {

                            defer.resolve(response.data);
                        }, function(error) {
                            console.log('error', error);
                            defer.reject(error);
                        })

                        return defer.promise;
                    }]
                }
            })
            .state('auth.presentationView1', {
                url: '/presentation/:id',
                type: 'auth',
                template: require('../templates/presentation-watch.html'),
                controller: 'presentationWatchCtrl',
                resolve: {
                    fetchSlides: ['$q', '$stateParams', 'PresentationService', function($q, $stateParams, PresentationService) {
                        var defer = $q.defer();
                        PresentationService.getSlides($stateParams.id).then(function(response) {
                            response.data.slideNo = 1;
                            defer.resolve(response.data);
                        }, function(error) {
                            console.log('error', error);
                            defer.reject(error);
                        })

                        return defer.promise;
                    }]
                }
            })
            .state('auth.presentationView', {
                url: '/presentation/:id/:slideNo',
                type: 'auth',
                template: require('../templates/presentation-watch.html'),
                controller: 'presentationWatchCtrl',
                resolve: {
                    fetchSlides: ['$q', '$stateParams', 'PresentationService', function($q, $stateParams, PresentationService) {
                        var defer = $q.defer();
                        PresentationService.getSlides($stateParams.id).then(function(response) {
                          response.data.slideNo = $stateParams.slideNo;
                            defer.resolve(response.data);
                        }, function(error) {
                            console.log('error', error);
                            defer.reject(error);
                        })

                        return defer.promise;
                    }]
                }
            })
            .state('auth.videoView', {
                url: '/watch/:id',
                type: 'auth',
                template: require('../templates/video-watch.html'),
                controller: 'videoWatchCtrl',
                resolve: {
                    fetchPresentation: ['$q', '$stateParams', 'PresentationService', function($q, $stateParams, PresentationService) {
                        var defer = $q.defer();
                        PresentationService.getPracticeData($stateParams.id).then(function(data) {
                            console.log('data', data);
                            defer.resolve(data.data);
                        }, function(error) {
                            console.log('error', error);
                            defer.reject(error);
                        })

                        return defer.promise;
                    }]
                }
            });

    }
];

},{"../templates/404.html":25,"../templates/change-email.html":26,"../templates/common-panel.html":27,"../templates/feedback-notification.html":28,"../templates/forgot-password.html":29,"../templates/login.html":30,"../templates/presentation-watch.html":31,"../templates/presentation_dashboard.html":32,"../templates/profile.html":33,"../templates/public.html":34,"../templates/reset-password.html":35,"../templates/set-password.html":36,"../templates/video-watch.html":37,"../templates/video.html":38}],22:[function(require,module,exports){
'use strict';

module.exports = [
    'HttpService',
    'API',
    function(HttpService, API) {

        function login(data, deviceId) {
            var apiObject = {
                url: API.login,
                method: 'POST',
                data: data,
                deviceId: deviceId
            };
            return HttpService
                .apiRequest(apiObject);
        }


        function logout() {
            var apiObject = {
                url: API.logout,
                method: 'POST'
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function changePassword(data) {
            var apiObject = {
                url: API.changePassword,
                method: 'PUT',
                data: data
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function requestOTP(data, deviceId) {
            console.log(data, deviceId);
            var apiObject = {
                url: API.requestOTP,
                method: 'POST',
                data: data,
                deviceId: deviceId
            };
            return HttpService
                .apiRequest(apiObject);
        }


        function setPassword(data, deviceId) {
            console.log(data);
            var apiObject = {
                url: API.setPassword,
                method: 'POST',
                data: data,
                deviceId: deviceId
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function verifyLink(id, deviceId) {
            var apiObject = {
                url: API.verifyLink + id,
                deviceId: deviceId
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function verifyEmail(id, deviceId) {
            var apiObject = {
                url: API.verifyEmail + id,
                deviceId: deviceId
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function changeEmail(data, deviceId) {
            var apiObject = {
                url: API.changeEmail,
                deviceId: deviceId,
                method: 'PUT',
                data: data
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function declineInvitation(id, deviceId) {
            console.log('deviceId ', deviceId);
            var apiObject = {
                url: API.declineInvitation + id,
                deviceId: deviceId,
                method: 'POST'
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function getProfile() {
            var apiObject = {
                url: API.profile
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function resetPassword(data, deviceId) {
            var apiObject = {
                url: API.resetPassword,
                data: data,
                deviceId: deviceId,
                method: 'POST'
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function verifyOtp(id, deviceId) {
            var apiObject = {
                url: API.verifyOtp + id,
                deviceId: deviceId
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function netTesting(deviceId) {
            var apiObject = {
                url: API.netTesting,
                deviceId: deviceId
            };
            return HttpService
                .apiRequest(apiObject);
        }

        return {
            login: login,
            logout: logout,
            changePassword: changePassword,
            requestOTP: requestOTP,

            getProfile: getProfile,
            // setPassword: setPassword,
            // verifyLink: verifyLink,
            // declineInvitation: declineInvitation

            setPassword: setPassword,
            verifyLink: verifyLink,
            verifyEmail: verifyEmail,
            changeEmail: changeEmail,
            declineInvitation: declineInvitation,
            resetPassword: resetPassword,
            verifyOtp: verifyOtp,
            netTesting: netTesting
        };
    }
];
},{}],23:[function(require,module,exports){
'use strict';

module.exports = [
    '$q',
    '$http',
    'loggedInUser',
    'toastr',
    '$rootScope',
    '$window',
    '$state',
    'AppConfig',
    function($q, $http, loggedInUser, toastr, $rootScope, $window, $state, AppConfig) {
        return {
            apiRequest: function apiRequest(ApiObj) {
                var deffered = $q.defer();
                var sessionData = $window.localStorage.userSession ? JSON.parse($window.localStorage.userSession) : {};

                var headers = {
                    'x-auth-deviceid': Object.keys(sessionData).length ? sessionData.deviceId : ApiObj.deviceId,
                    'x-auth-devicetype': 3,
                    'x-auth-token': Object.keys(sessionData).length ? sessionData.token : ''
                };

                ApiObj.headers = angular.extend({}, (ApiObj.headers || {}), headers);

                var apiObj = {
                    method: ApiObj.method || 'GET',
                    headers: ApiObj.headers,
                    url: ApiObj.url || '',
                    params: ApiObj.params || {},
                    data: ApiObj.data || {}
                };

                if (ApiObj.transformRequest) {
                    apiObj.transformRequest = angular.identity;
                }

                $http(apiObj)
                    .success(function(data) {
                        if (data.success) {
                            deffered.resolve(data);
                        } else {
                            if (data.errorCode === 1000) {
                                loggedInUser.resetData();
                                $window.intercomSettings = {
                                    app_id: "xaak7ar1"
                                };
                                localStorage.removeItem('pptCount');
                                localStorage.removeItem('userSession');
                                var w = window;
                                var ic = w.Intercom;
                                if (typeof ic === "function") {
                                    ic('reattach_activator');
                                    ic('update', intercomSettings);
                                    w.Intercom('shutdown');
                                    $state.go('public.login');
                                } else {
                                    var d = document;
                                    var i = function() { i.c(arguments) };
                                    i.q = [];
                                    i.c = function(args) { i.q.push(args) };
                                    w.Intercom = i;

                                    function l() {
                                        var s = d.createElement('script');
                                        s.type = 'text/javascript';
                                        s.async = true;
                                        s.src = 'https://widget.intercom.io/widget/xaak7ar1';
                                        var x = d.getElementsByTagName('script')[0];
                                        x.parentNode.insertBefore(s, x);
                                    }
                                    l();
                                    // if (w.attachEvent) { w.attachEvent('onload', l); } else { w.addEventListener('load', l, false); }
                                }
                                toastr.error(AppConfig.errorCode[data.errorCode]);
                                $state.go('public.login');
                            }
                            deffered.reject(data);
                        }
                    })
                    .error(function(error) {
                        if (error) {
                            deffered.reject(error);
                        } else {
                            toastr.error(AppConfig.errorCode['500'], 'Error');
                        }
                    });
                return deffered.promise;
            }
        };
    }
];

},{}],24:[function(require,module,exports){
'use strict';

module.exports = [
    'HttpService',
    'API',
    function(HttpService, API) {

        function getPresentationList(params) {
            var apiObject = {
                url: API.getPresentationList,
                params: params
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function getPresentationDetails(id, data) {
            var apiObject = {
                url: API.getPresentationDetails + id,
                method: 'POST',
                data: data
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function deletePresentation(id) {
            var apiObject = {
                url: API.getPresentationDetails + id,
                method: 'DELETE'
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function deletePractice(id) {
            var apiObject = {
                url: API.deletePracticeURL + id,
                method: 'DELETE'
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function editPresentation(id, data) {
            var apiObject = {
                url: API.getPresentationDetails + id,
                method: 'PUT',
                data: data
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function readFeedback(params) {
            var apiObject = {
                url: API.readFeedback,
                params: params
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function acknowledgeComment(id, data) {
            var apiObject = {
                url: API.acknowledgeComment + id,
                method: 'POST',
                data: data
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function sharePresentationList(id, searchKey) {
            var apiObject = {
              url: API.sharePresentationList + id,
              params: searchKey
            };
            return HttpService
              .apiRequest(apiObject);
        }

        function getAllPresenterNotifications() {
            var apiObject = {
              url: API.getAllPresenterNotifications
            };
            return HttpService
              .apiRequest(apiObject);
        }

        function sharePresentation(data) {
            var apiObject = {
              url: API.sharePresentation,
              method: 'POST',
              data: data
            };
            return HttpService
              .apiRequest(apiObject);
        }

        function uploadPresentationVideo(cfg) {

          var apiObject = {
              url: API.uploadPptVideo,
              method: 'POST',
              data: cfg.data,
              headers: cfg.headers,
              transformRequest: true
          };
          return HttpService
              .apiRequest(apiObject);
        }


        function getPracticeDetail(id) {
            var apiObject = {
                url: API.getPracticeDetail(id)
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function getPracticeData(id) {
            var apiObject = {
                url: API.getPracticeData(id)
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function readNotification(data) {
            var apiObject = {
                url: API.readNotification,
                method: 'PUT',
                data: data
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function watchVideoLog() {
            var apiObject = {
                url: API.practiceActivityLog,
                method: 'POST'
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function practiceVideoLog() {
            var apiObject = {
                url: API.presenterPracticeActivityLog,
                method: 'POST'
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function deletePracticeLog() {
            var apiObject = {
                url: API.practiceDeleteActivityLog,
                method: 'POST'
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function getFeedbacks(data) {
            var apiObject = {
                url: API.getPracticeFeedbacks,
                method: 'POST',
                data: data
            };
            return HttpService
                .apiRequest(apiObject);
        }
        function getSlides(id) {
            var apiObject = {
                url: API.getSlides+id,
                method: 'GET'
            };
            return HttpService
                .apiRequest(apiObject);
        }

        return {
            getPresentationList: getPresentationList,
            getPresentationDetails: getPresentationDetails,
            deletePresentation: deletePresentation,
            editPresentation: editPresentation,
            readFeedback: readFeedback,
            acknowledgeComment: acknowledgeComment,
            sharePresentationList: sharePresentationList,
            sharePresentation: sharePresentation,
            uploadPresentationVideo: uploadPresentationVideo,
            getAllPresenterNotifications: getAllPresenterNotifications,
            getPracticeDetail: getPracticeDetail,
            getPracticeData: getPracticeData,
            readNotification: readNotification,
            watchVideoLog: watchVideoLog,
            practiceVideoLog: practiceVideoLog,
            deletePracticeLog: deletePracticeLog,
            getFeedbacks: getFeedbacks,
            deletePractice: deletePractice,
            getSlides: getSlides
        };
    }
];

},{}],25:[function(require,module,exports){
module.exports = "<img src=./resources/images/maxresdefault.jpg width=100% height=100%>";

},{}],26:[function(require,module,exports){
module.exports = "<div ng-init=init() class=\"login-container container-fluid\"><div class=content-wrapper ng-if=\"userNotFound && !emailVerified\"><div class=\"well text-center oops\">User not found</div></div><div class=content-wrapper ng-if=\"emailVerified && !userNotFound\"><div class=\"well text-center oops\">Email already verified.</div></div><div class=login-container-overlay></div></div>";

},{}],27:[function(require,module,exports){
module.exports = "<div class=section-container ng-init=init() ng-class=\"{'video-container height-100': $root.page=='video'}\"><div class=\"section-header row\" ng-if=\"$root.page!='video'\"><div class=col-sm-6><div class=\"logo-container background-center cursor-pointer\" ng-click=moveToHome()></div></div><div class=\"col-sm-6 text-right\"><button type=button class=\"btn btn-default upload-btn hover-btn\" ng-click=openUploadModal()>Upload Presentation</button><div class=\"header-dropdown display-inline-block\"><ul class=\"nav menu-open-close\"><li class=\"dropdown menu-open-close cursor-pointer\" id=menu_id ng-click=openDropDownMenu()><div class=\"profile-link mt-5 menu-open-close\"><span class=menu-open-close><img ng-if=erticulateUserData.profileImage class=\"profile-image background-center display-inline-block menu-open-close margin-right-5\" ng-src=\"{{picUrl + erticulateUserData.profileImage}}\"><div ng-if=!erticulateUserData.profileImage class=\"profile-image background-center display-inline-block menu-open-close margin-right-5\" style=background-image:url(./resources/images/default-user.png)></div><i class=\"fa fa-angle-down menu-open-close\"></i></span></div><ul class=\"dropdown-menu profile-dropdown-menu dropdown-menu-default\"><li ui-sref=auth.profile><a class=profile-dropdown-name><span>{{erticulateUserData.firstName}} {{erticulateUserData.lastName}}</span> <span class=\"profile-dropdown-name font-12 grey-font\">{{erticulateUserData.email}}</span></a></li><li class=\"divider m-0\"></li><li ui-sref=auth.profile><a><i class=icon-settings></i> My Profile</a></li><li ng-click=logout()><a href=\"\"><i class=icon-key></i> Log Out</a></li></ul></li></ul></div></div></div><div class=\"section-body height-100\"><div class=\"main-container height-100\" ui-view></div></div><footer class=main-footer ng-show=showCopyright>Copyright &copy; {{date| date:'yyyy'}} All rights reserved. Version {{version}}</footer></div>";

},{}],28:[function(require,module,exports){
module.exports = "<div class=\"row margin0\"><div class=\"col-sm-6 presenter-dashboard\"><div class=presentation-tile-list><div class=tile-wrapper><div class=presentation-tile><div class=presentation-image><img src=./resources/images/presentation.png></div><div class=presentaion-desc><div class=presentaion-title>Presentation Title</div><div class=client-name>Client Name</div><div class=grey-text>Product Name</div><div class=grey-text>29th Jan,2018s</div><div class=\"overflow-reset font13\"><span class=pull-left ng-bind-html=4|starRating></span> <a href=\"\" class=view-mentors-link>From 4 Mentors</a> <a href=\"\" class=\"practice-link pull-right\">Practice</a></div></div></div></div><div class=tile-wrapper><div class=\"presentation-tile selected-tile\"><div class=presentation-image><img src=./resources/images/presentation.png><div class=feedback-notification-mark></div></div><div class=presentaion-desc><div class=presentaion-title>Presentation Title</div><div class=client-name>Client Name</div><div class=grey-text>Product Name</div><div class=grey-text>29th Jan,2018s</div><div class=\"overflow-reset font13\"><span class=pull-left ng-bind-html=3.5|starRating></span> <a href=\"\" class=view-mentors-link>From 4 Mentors</a> <a href=\"\" class=\"practice-link pull-right\">Practice</a></div></div></div><div class=show-details><img src=./resources/images/right-arrow-white.png></div></div></div></div><div class=col-sm-6><div class=feedback-notification-container><div class=feedback-notification-header><span class=header-date>29 Jan, 2018</span><hr></div><div class=feedback-list><div class=\"each-feedback overflow-reset\"><div class=user-image><img src=http://themes.laborator.co/xenon/assets/images/user-3.png width=40></div><div class=feedback><div class=content><span class=mentor-name>Mentor 1</span> gave you a feedback and you have received 4 stars for your <span class=presentation-name>Presentation 1</span></div><div class=overflow-reset><div class=\"pull-left date-time\">6 Feb, 2018 8:35AM</div><div class=pull-right><a href=\"\" class=view-feedback-link>View Feedback</a></div></div></div></div><div class=\"each-feedback overflow-reset\"><div class=user-image><img src=http://themes.laborator.co/xenon/assets/images/user-4.png width=40></div><div class=feedback><div class=content><span class=mentor-name>Mentor 1</span> gave you a feedback and you have received 4 stars for your <span class=presentation-name>Presentation 1</span></div><div class=overflow-reset><div class=\"pull-left date-time\">6 Feb, 2018 8:35AM</div><div class=pull-right><a href=\"\" class=view-feedback-link>View Feedback</a></div></div></div></div><div class=\"each-feedback overflow-reset\"><div class=user-image><img src=http://themes.laborator.co/xenon/assets/images/user-1.png width=40></div><div class=feedback><div class=content><span class=mentor-name>Mentor 1</span> gave you a feedback and you have received 4 stars for your <span class=presentation-name>Presentation 1</span></div><div class=overflow-reset><div class=\"pull-left date-time\">6 Feb, 2018 8:35AM</div><div class=pull-right><a href=\"\" class=view-feedback-link>View Feedback</a></div></div></div></div><div class=\"each-feedback overflow-reset\"><div class=user-image><img src=http://themes.laborator.co/xenon/assets/images/user-2.png width=40></div><div class=feedback><div class=content><span class=mentor-name>Mentor 1</span> gave you a feedback and you have received 4 stars for your <span class=presentation-name>Presentation 1</span></div><div class=overflow-reset><div class=\"pull-left date-time\">6 Feb, 2018 8:35AM</div><div class=pull-right><a href=\"\" class=view-feedback-link>View Feedback</a></div></div></div></div></div></div></div></div><a href=\"\" ng-click=openWatchAndShareModal()>Watch and Share</a> &nbsp; <a href=\"\" ng-click=selectMentors()>Select Mentors</a> &nbsp; <a href=\"\" ng-click=openUploadModal()>Upload Presentation</a>";

},{}],29:[function(require,module,exports){
module.exports = "<div ng-init=init() class=\"login-container container-fluid\"><div class=content-wrapper><div class=login-container-overlay></div><div class=login-logo><img src=./resources/images/login-logo.png></div><form class=login-form role=form novalidate=novalidate id=login name=forgotPasswordForm ui-form=forgotPassword><div class=login-header>Forgot Your Password?</div><div class=border-div></div><div class=\"forgot-password-info col-xs-12 padding-0\"><p>No worries! Please enter the email address you use</p><p>for Erticulate and we will send you a reset.</p></div><div class=\"form-group pos-relative\"><input type=text class=form-control name=email placeholder=\"Email Address\" ng-model=forgotPasswordDetails.email ui-email ui-required><div ng-if=\"forgotPasswordForm.$submitError && forgotPasswordForm.email.$invalid && !forgotPasswordForm.email.$dirty\"><div class=\"error errorMessage\" ng-message=uiRequired ng-if=!forgotPasswordForm.email.$viewValue>Please enter email.</div><div class=\"error errorMessage\" ng-message=uiRequired ng-if=forgotPasswordForm.email.$viewValue>Invalid email.</div></div></div><div class=\"login-footer col-xs-12\"><a class=\"pull-left forgot-password cursor-pointer\" ui-sref=public.login>Back to Sign In</a> <button type=submit class=\"btn btn-primary pull-right sign-in-button\">Reset Password</button></div></form></div></div>";

},{}],30:[function(require,module,exports){
module.exports = "<div ng-init=init() class=\"login-container container-fluid\"><div class=content-wrapper><div class=login-logo><img src=./resources/images/login-logo.png></div><form class=login-form role=form novalidate=novalidate id=login name=loginForm ui-form=login><div class=login-header>Sign into your Erticulate account</div><div class=border-div></div><div class=\"text-center error margin-top-10\">{{errorMessage}}</div><div class=\"form-group pos-relative\"><input type=text class=form-control name=email placeholder=\"Email Address\" ng-model=loginDetails.email ui-email ui-required><div ng-if=\"loginForm.$submitError && loginForm.email.$invalid && !loginForm.email.$dirty\"><div class=\"error errorMessage\" ng-message=uiRequired ng-if=!loginForm.email.$viewValue>Please enter email.</div><div class=\"error errorMessage\" ng-message=uiRequired ng-if=loginForm.email.$viewValue>Invalid email.</div></div></div><div class=\"form-group pos-relative\"><label class=\"pull-right password-label\">Passwords are case sensitive</label><input type=password class=form-control name=password placeholder=Password ng-model=loginDetails.password ui-required> <span ng-show=\"(loginForm.$submitError && loginForm.password.$invalid && !loginForm.password.$dirty)\" id=password-error class=\"error errorMessage\" for=password>Please enter password.</span></div><div class=\"login-footer col-xs-12\"><a class=\"pull-left forgot-password cursor-pointer\" ui-sref=public.forgotPassword>Forgot Password?</a> <button type=submit class=\"btn btn-primary pull-right sign-in-button\">Sign In</button></div></form><div class=\"login-footer col-xs-12\"><p class=\"text-muted text-center\">Copyright &copy; {{date| date:'yyyy'}} All rights reserved. <span>Erticulate {{version}}</span></p></div></div><div class=login-container-overlay></div></div>";

},{}],31:[function(require,module,exports){
module.exports = "<div class=video-section-body ng-init=init()><div class=\"slide-image-container height-100 background-center\"><div class=\"slide-image height-100 presentation-image-view\" style=\"background-image: url('{{currentImage}}')\"></div></div><div class=slide-control-container><div class=\"slide-detail text-white text-center\">Slide {{slide}} of {{presentation.imageList.length}}</div><div class=slide-navigator><div class=\"left-navigator display-inline-block\" ng-class=\"{'disabled':prevOpen}\" ng-click=prevImage()>Prev Slide</div><div class=\"right-navigator display-inline-block\" ng-class=\"{'disabled':nextOpen}\" ng-click=nextImage()>Next Slide</div></div></div></div>";

},{}],32:[function(require,module,exports){
module.exports = "<div class=section-body ng-init=init()><div class=content-section-container><div class=content-section-heading-{{$index+1}} ng-class=\"{'active-background-color':selectedTab.heading==tab.heading}\" ng-repeat=\"tab in tabs\" ng-click=selectTab(tab) ui-sref={{tab.link}}>{{tab.heading}}</div><div class=\"panel-container row\"><div class=col-sm-6><div class=cil-sm-12><div class=col-sm-2><div class=\"main-panel-heading filters\">Filters</div></div><div class=\"col-sm-10 form-section\"><form name=\" searchFrom\" class=\"col-sm-12 searchFrom\" ui-form=selectFilter><div class=col-sm-6><label for=select-filter class=search-filter-dropdown></label><select name=select-filter class=search-dropdown ng-options=\"status.name for status in presentationFilter\" ng-model=filterData.filterType ng-change=clearFilter(true)></select></div><div class=col-sm-6><input class=search-box placeholder=\"Search by Keyword\" ng-model=filterData.filterValue ng-disabled=searchObject.noFilter placeholder=Search name=srch-term id=srch-term type=text><div style=\"\"><button class=\"btn btn-default search-icon-presentor\" type=submit xng-if=!searchObject.searchHide ng-click=selectFilter()><i class=\"fa fa-search\"></i></button></div></div></form></div></div><div class=main-panel-body><div class=\"row presenter-dashboard\" ng-if=\"presentationList.length && !presentationListLoading\"><div class=col-sm-12><div class=\"col-sm-12 presentation-tile-list\"><div class=\"col-sm-12 tile-wrapper presentation-tile word-break presentation-each\" ng-repeat=\"presentation in presentationList\" ng-if=!presentation.deleted ng-class=\"{'active':presentation.active}\"><div class=col-sm-12><div class=\"col-sm-3 video-thumbnail\" ng-click=selectPresentation(presentation)><img src=./resources/images/new.png ng-if=presentation.practiceFlag class=new-tag> <img class=image-thumbnail ng-src=\"{{picUrl + presentation.imageList[0]}}\"><div class=new-comment-dot ng-if=presentation.feedbackFlag></div></div><div class=\"col-sm-9 presentation-details\"><div class=\"row presentation-title cursor-pointer\"><span ng-show=!onClickEdit ng-click=selectPresentation(presentation)>{{presentation.title}}</span> <input type=text class=\"presentation-input-title form-control\" placeholder=\"Presentation Title\" ng-show=onClickEdit name=\"\" value=\"\" ng-model=presentation.title> <span ng-click=onClickDeletePresentation(presentation) class=pull-right><i class=\"fa fa-trash delete-icon\"></i></span> <span ng-click=\"onClickEdit = true;\" ng-show=!onClickEdit class=pull-right><i class=\"fa fa-pencil edit-icon\"></i></span> <span ng-show=onClickEdit ng-click=\"onClickEdit = false; savePresentation(presentation); \" class=pull-right><i class=\"fa fa-check save-icon\"></i></span></div><div class=\"row client-name div-ellipsis project\"><b class=presentation-label ng-click=selectPresentation(presentation)>Project:</b> <span class=presentation-span-project ng-show=!onClickEdit ng-click=selectPresentation(presentation)>{{presentation.clientName}}</span> <input type=text class=\"presentation-input-project form-control\" placeholder=\"Project name\" name=\"\" ng-show=onClickEdit value=\"\" ng-model=presentation.clientName></div><div class=\"row grey-text client\"><b class=presentation-label ng-click=selectPresentation(presentation)>Note:</b><span ng-show=!onClickEdit ng-click=selectPresentation(presentation)>{{presentation.productName}}</span><textarea class=\"presentation-input-note form-control\" placeholder=Note ng-show=onClickEdit name=\"\" rows=2 value=\"\" ng-model=presentation.productName></textarea></div><div class=\"row grey-text created-text-row\"><b class=presentation-label ng-click=selectPresentation(presentation)>Created:</b><span ng-click=selectPresentation(presentation) class=presentation-date>{{presentation.createDate | date:'MMM d, yyyy h:mm a'}}</span> <a href=\"\" class=\"btn cursor-pointer practice-button pull-right\" ng-click=\"practicePresentation(presentation, $event)\">New Practice</a></div></div></div><div class=\"col-sm-12 presentaion-practices cursor-pointer\" ng-repeat=\"practice in presentation.practices | orderBy: '-createDate'\" ng-if=!practice.deleted ng-click=onclickPractice(practice) ng-class=\"{'active': presentationActiveID == practice._id}\"><div class=\"practice-watch-button pull-left cursor-pointer hover-btn\"><a href=/#/watch/{{practice._id}} class=white-color>Watch <i class=\"fa fa-play white-color\"></i></a></div><div class=\"practice-share-button pull-left cursor-pointer hover-btn\" ng-click=sharePractice(practice)>Share <img src=./resources/images/share-btn.png></div><span class=\"grey-text pull-left\">&nbsp;&nbsp;{{practice.createDate | date:'MMM d, yyyy h:mm a'}}</span>&nbsp;&nbsp; <span class=\"cursor-default rating-stars\" ng-bind-html=\"practice.avgRating | starRating\"></span> &nbsp;<a href=\"\" class=cursor-pointer ng-click=selectPractice(practice) ng-if=practice.feedbackCount><span class=orange-text>({{practice.feedbackCount}})</span></a> <span ng-click=onClickDeletePractice(practice)><i class=\"fa fa-trash pull-right delete-icon delete-practice-icon\"></i></span></div></div></div></div></div><div class=\"col-xs-12 padding-left-0 margin-top-10\"><div class=\"margin-bottom-0 text-center no-ppt\" ng-if=\"!presentationList.length && !presentationListLoading\"><img class=margin-bottom-20 src=./resources/images/no-presentation.png width=50><div ng-if=disableSearch><div class=no-ppt-text><div>Hi {{erticulateUserData.firstName}}, it seems you don't have any</div><div>presentation to practice.</div></div><div class=small-heading>To upload a presentation <span class=\"cursor-pointer click-upload\" ng-click=openUploadModal()>Click Here</span></div></div><div ng-if=!disableSearch><div class=no-ppt-text><div>Hi {{erticulateUserData.firstName}}, it seems you don't have any</div><div>presentation for this search.</div></div></div></div></div><div class=\"text-center table-loading margin-top-10\" ng-show=presentationListLoading><i class=\"fa fa-spinner fa-spin spinner-loader\"></i> &nbsp; <span class=spinner-text>Loading presentations...</span></div></div></div><div class=col-sm-6><div class=\"main-panel-heading ppt-details\"><img src=./resources/images/feedback-notification.png class=margin-right-10 ng-show=\"showSection == 'notifications'\"> <span ng-show=\"showSection == 'notifications'\">Feedback Notifications</span> <img src=./resources/images/back-black.png class=\"cursor-pointer margin-right-10\" ng-click=\"showSection = 'notifications'\" ng-show=\"showSection == 'details'\"> <span ng-show=\"showSection == 'details'\">Presentation Details</span> <img src=./resources/images/back-black.png class=\"cursor-pointer margin-right-10\" ng-click=\"showSection = 'notifications'\" ng-show=\"showSection == 'feedbacks'\"> <span ng-show=\"showSection == 'feedbacks'\">Feedback Details</span><div class=\"presentation-share-button pull-right cursor-pointer hover-btn\" ng-show=\"showSection == 'feedbacks'\" ng-click=feedbackPreview()><i class=\"fa fa-print\"></i> Print</div><div class=\"presentation-share-button pull-right cursor-pointer hover-btn\" ng-show=\"!isEditable && showSection == 'details'\" ng-click=openEditPresentation()><img src=./resources/images/edit-btn.png> <span>Edit</span></div><div class=\"presentation-share-button pull-right cursor-pointer hover-btn cancel-button\" ng-if=\"isEditable && showSection == 'details'\" ng-click=cancelEditPresentation()><img src=./resources/images/cancel-btn.png> <span>Cancel</span></div><div class=\"edit-button presentation-share-button pull-right cursor-pointer hover-btn\" ng-if=\"isEditable && showSection == 'details'\" ng-click=savePresentationDetails()><img src=./resources/images/save-btn.png> <span>Save</span></div></div><div class=main-panel-body><div class=\"row margin0\"><div class=\"col-sm-12 padding-0\"><div class=\"feedback-notification-container ml-0 mt-20\" ng-show=\"showSection == 'notifications'\" ng-class=\"{'border-0':!notificationObject.length,'box-shadow-0':!notificationObject.length}\"><div class=feedback-notification-header ng-repeat=\"item in notificationObject | orderBy: '-date'\" ng-if=notificationObject.length><div class=margin-bottom-50><span class=header-date>{{item._id}}</span><hr></div><div class=feedback-list ng-repeat=\"(key,value) in item.notifications | groupBy:'[presentationRef,notificationType]' \"><div class=\"each-feedback overflow-reset\" xxng-repeat=\"item2 in value\"><div class=\"user-image pos-relative\"><img ng-if=\"value.length>1\" ng-src=\"{{picUrl + value[0].presentationImage}}\" class=border-radius-0 width=40 height=40> <img ng-if=\"value[0].senderProfileImage && value.length===1\" ng-src=\"{{picUrl + value[0].senderProfileImage}}\" width=40 height=40> <img ng-if=\"!value[0].senderProfileImage && value.length===1\" src=./resources/images/default-user.png width=40 height=40><div class=new-feedback-dot ng-if=!value[0].read></div></div><div class=feedback><div class=content><span class=mentor-name>{{value[0].senderFirstName+' '+value[0].senderLastName}} <span ng-if=\"value.length>1\" class=mentor-name>& {{value.length-1}} other<span ng-if=\"value.length-1>1\" class=mentor-name>s</span></span></span> <span ng-if=\"value.length===1\">gave you feedback and you received {{value[0].data.rating}} stars for your</span> <span ng-if=\"value.length>1\">gave feedback for</span> <span class=presentation-name>{{value[0].presentationTitle}}.</span></div><div class=overflow-reset><div class=\"pull-left date-time\" ng-hide=\"value.length>1\">{{value[0].createDate | date:'MMM d, yyyy h:mm a'}}</div><div class=pull-right><a class=view-feedback-link ng-click=viewFeedback(value[0])>View Feedback</a></div></div></div></div></div></div><div class=\"col-xs-12 padding-0\" ng-if=\"!notificationObject.length && presentationList.length\"><div class=\"no-feedback-ppt margin-right-10 margin-left-10 text-center\"><img class=margin-bottom-20 src=./resources/images/no-feedback.png width=50 height=50><div class=no-ppt-text><div>No feedback notification present.</div></div></div></div></div><div class=\"col-xs-12 mt-20 presentation-details-container padding-0\" ng-show=\"showSection == 'details' || showSection == 'feedbacks'\"><div class=\"col-xs-12 top-fixed-bar\" ng-show=\"showSection == 'feedbacks'\"><div class=\"col-xs-6 padding-left-0\"><div class=navmenu>Feedback</div></div><div class=\"col-xs-6 text-align-right padding-left-right-0 padding-top-15\" ng-class=\"{'active': viewData.active==='feedback'}\"><div class=\"display-inline-block col-xs-7 padding-right-0 padding-top-5\"><img src=./resources/images/info.png ng-click=scrollToGrade() class=cursor-pointer></div><div class=\"col-xs-5 padding-0 font-12\" ng-if=presentationDetails.feedback.overallRating><div ng-bind-html=\"presentationDetails.feedback.overallRating | starRating:'avgRating'\" class=\"display-inline-block font-16\"></div><div class=avg-rating-text>Average Rating</div></div></div></div><div class=\"col-xs-12 padding-0\" ng-show=\"showSection == 'details'\"><div class=\"col-xs-12 bottom-scrollable-content\"><div class=\"col-xs-12 padding-0 presentation-thumbnail min-height-350\" id=presentation-thumbnail><img class=presentation-view-image src={{picUrl+presentationDetails.imageList[0]}}><div class=play-icon-layer><div class=play-video-icon ng-click=openVideo(presentationDetails)><img src=./resources/images/video-play.png></div></div></div><div class=\"col-xs-12 padding-0 margin-bottom-30 presentation-details\"><div class=\"col-xs-12 presentation-details\"><div class=\"col-xs-4 padding-left-0 details-heading\" ng-class=\"{'margin-top-5':isEditable}\">Presentation Title</div><div class=\"form-group margin-bottom-0 col-xs-8 padding-right-0\"><span ng-bind=presentationDetails.title ng-if=!isEditable class=word-break></span> <input type=text class=\"width-100 margin-top-0 form-control\" name=title placeholder=Title ng-model=presentationDetails.title ng-if=isEditable><div ng-show=\"editPresentation && !presentationDetails.title\" class=\"font-12 padding0 col-xs-12 color-red margin-top-5\">This field is required.</div></div></div><div class=\"col-xs-12 presentation-details\"><div class=\"col-xs-4 padding-left-0 details-heading\" ng-class=\"{'margin-top-5':isEditable}\">Project</div><div class=\"form-group margin-bottom-0 col-xs-8 padding-right-0\"><span ng-bind=presentationDetails.clientName ng-if=!isEditable></span> <input type=text class=\"width-100 margin-top-0 form-control\" name=clientName placeholder=Project ng-model=presentationDetails.clientName ng-if=isEditable></div></div><div class=\"col-xs-12 presentation-details\"><div class=\"col-xs-4 padding-left-0 details-heading\" ng-class=\"{'margin-top-5':isEditable}\">Note</div><div class=\"form-group margin-bottom-0 col-xs-8 padding-right-0\"><span ng-bind=presentationDetails.productName ng-if=!isEditable></span> <input type=text class=\"width-100 margin-top-0 form-control\" name=productName placeholder=Note ng-model=presentationDetails.productName ng-if=isEditable></div></div><div class=\"col-xs-12 presentation-details\"><div class=\"col-xs-4 padding-left-0 details-heading\">Create Date</div><div class=\"col-xs-8 padding-right-0\" ng-bind=\"presentationDetails.createDate | date:'MMM d, yyyy h:mm a'\"></div></div><div class=\"col-xs-12 presentation-details\" ng-if=!isEditable><div class=\"col-xs-4 padding-left-0 details-heading\">Rating</div><div class=\"col-xs-8 padding-right-0\"><span ng-bind-html=\"presentationDetails.avgRating | starRating\"></span></div></div></div></div></div><div class=\"col-xs-12 padding-0\" ng-if=\"showSection == 'feedbacks'\"><div class=\"col-xs-12 mentor-presnter-list-container bottom-scrollable-content\" ng-if=\"presentationDetails.feedback && presentationDetails.feedback.comments.length\"><div class=\"grade-content col-xs-12 margin-bottom-20\" ng-repeat=\"feedback in feedbacks\"><div class=\"col-xs-12 grade-tile\" ng-class=\"{'border-bottom-0':feedback.isCollapsed}\"><div class=\"col-xs-1 padding-left-0\"><img src=./resources/images/mandatory-question.png></div><div class=\"col-xs-11 padding-right-0 grade-name\">{{feedback._id}} <img src=./resources/images/accordion-collapse.png class=\"pull-right cursor-pointer\" ng-if=!feedback.isCollapsed ng-click=\"openAccordion(feedback,'feedback')\"> <img src=./resources/images/accordion-expand.png ng-if=feedback.isCollapsed class=\"pull-right cursor-pointer\" ng-click=\"openAccordion(feedback,'feedback')\"></div></div><div uib-collapse=feedback.isCollapsed class=\"col-xs-12 grade-collapse\"><div class=\"col-xs-12 question-comments\" ng-repeat=\"comment in feedback.unseen\"><div class=\"col-xs-12 padding-top-40 padding-left-0 padding-right-0 pos-relative\"><div class=border-repeat></div><div class=commented-by-date-content ng-style=\"{'background-image':'url({{picUrl + comment.profileImage}})'}\" ng-if=comment.profileImage></div><div class=commented-by-date-content ng-style=\"{'background-image':'url(./resources/images/default-user.png)'}\" ng-if=!comment.profileImage></div><div class=border-repeat-bottom-feedback ng-if=\"$index==feedback.unseen.length-1&&!comment.thankedFlag\"></div><div ng-bind=\"comment.firstName+' '+comment.lastName\" class=commented-by></div><div ng-bind=\"comment.commentedAt|date:'MMM d, yyyy h:mm a'\" class=commented-date></div></div><div class=\"col-xs-12 comment border-repeat-feedback\" ng-bind-html=\"comment.text| breakFilter\"></div><div class=\"col-xs-12 thanked-by\" ng-if=comment.thankedFlag><div class=border-repeat-thank></div><span>You thanked {{comment.firstName}} {{comment.lastName}}.</span></div><div class=\"col-xs-12 padding-right-0 text-right\" ng-class=\"{'border-repeat-no-thank':!comment.thankedFlag}\"><span ng-repeat=\"star in comment.ratingArray\" class=hover-btn ng-if=!comment.ratingOnMentorsComment><img src=./resources/images/star-big.png ng-if=!star.filled class=\"cursor-pointer transform-img\" ng-click=modifyRate($index+1,false,comment)> <img src=./resources/images/star.png ng-if=star.filled class=cursor-pointer ng-click=modifyRate($index+1,false,comment)></span> <span ng-if=comment.ratingOnMentorsComment ng-bind-html=\"comment.ratingOnMentorsComment | starRating:'presenter'\"></span> <img src=./resources/images/thank-you.png class=\"cursor-pointer margin-left-10 transform-img\" ng-click=thankComment(comment) ng-if=!comment.thankedFlag></div></div><div class=\"col-xs-12 question-comments\" ng-repeat=\"comment in feedback.seen\" ng-if=feedback.viewRead><div class=\"col-xs-12 padding-top-40 padding-left-0 padding-right-0 pos-relative\"><div class=border-repeat></div><div class=commented-by-date-content ng-style=\"{'background-image':'url({{picUrl + comment.profileImage}})'}\" ng-if=comment.profileImage></div><div class=commented-by-date-content ng-style=\"{'background-image':'url(./resources/images/default-user.png)'}\" ng-if=!comment.profileImage></div><div class=border-repeat-bottom-feedback ng-if=\"$index==feedback.seen.length-1&& !comment.thankedFlag\"></div><div ng-bind=\"comment.firstName+' '+comment.lastName\" class=commented-by></div><div ng-bind=\"comment.commentedAt|date:'MMM d, yyyy h:mm a'\" class=commented-date></div></div><div class=\"col-xs-12 comment border-repeat-feedback\" ng-bind-html=\"comment.text| breakFilter\"></div><div class=\"col-xs-12 thanked-by\" ng-if=comment.thankedFlag><div class=border-repeat-thank></div><span>You thanked {{comment.firstName}} {{comment.lastName}}.</span></div><div class=\"col-xs-12 padding-right-0 text-right\" ng-class=\"{'border-repeat-no-thank':!comment.thankedFlag}\"><div class=\"col-xs-12 padding-right-0 text-right\"><span ng-repeat=\"star in comment.ratingArray\" class=hover-btn ng-if=!comment.ratingOnMentorsComment><img src=./resources/images/star-big.png ng-if=!star.filled class=\"cursor-pointer transform-img\" ng-click=modifyRate($index+1,false,comment)> <img src=./resources/images/star.png ng-if=star.filled class=cursor-pointer ng-click=modifyRate($index+1,false,comment)></span> <span ng-if=comment.ratingOnMentorsComment ng-bind-html=\"comment.ratingOnMentorsComment | starRating:'presenter'\"></span> <img src=./resources/images/thank-you.png class=\"cursor-pointer margin-left-10 transform-img\" ng-click=thankComment(comment) ng-if=!comment.thankedFlag></div></div></div><div class=\"col-xs-12 text-right margin-top-10\" ng-if=\"!feedback.viewRead && feedback.seen.length\"><a ng-click=showReadComments(feedback) class=\"cursor-pointer text-underline\">Show Read Comments</a></div></div></div><div class=\"col-xs-12 slide-heading\" ng-if=slides.length>Presentation Slides</div><div class=\"grade-content col-xs-12 margin-bottom-20\" ng-repeat=\"slide in slides \"><div class=\"col-xs-12 slide-tile\" ng-class=\"{'border-bottom-0':slide.isCollapsed}\"><div class=\"col-xs-4 padding-left-0\"><div class=\"slide-thumbnail padding-0 col-xs-12\" ng-style=\"{'background-image':'url({{picUrl+presentationDetails.imageList[slide.index - 1]}})'}\" xxng-if=slide.slideUrl><img src=./resources/images/slide-play.png ng-click=\"openSlideVideo(presentationDetails, slide.index)\" class=\"cursor-pointer slide-play-image\"></div></div><div class=\"col-xs-8 padding-0 grade-name\"><div class=\"col-xs-11 padding-0\">{{slide._id}}</div><img src=./resources/images/accordion-collapse.png class=\"pull-right cursor-pointer margin-top-10\" ng-if=!slide.isCollapsed ng-click=\"openAccordion(slide,'slide')\"> <img src=./resources/images/accordion-expand.png ng-if=slide.isCollapsed class=\"pull-right cursor-pointer margin-top-10\" ng-click=\"openAccordion(slide,'slide')\"><div class=\"col-xs-11 padding-0 feedback-count\"><span ng-if=\"slide.commenters.length>1\">{{slide.commenters.length}} Comments Received</span><span ng-if=\"slide.commenters.length==1\">{{slide.commenters.length}} Comment Received</span></div></div></div><div uib-collapse=slide.isCollapsed class=\"col-xs-12 grade-collapse xwidth-auto\"><div class=\"col-xs-12 question-comments\" ng-repeat=\"comment in slide.unseen\"><div class=\"col-xs-12 padding-top-40 padding-left-0 padding-right-0 pos-relative\"><div class=border-repeat></div><div class=commented-by-date-content ng-style=\"{'background-image':'url({{picUrl + comment.profileImage}})'}\" ng-if=\"comment.profileImage && !slide.isCollapsed\"></div><div class=commented-by-date-content ng-style=\"{'background-image':'url(./resources/images/default-user.png)'}\" ng-if=!comment.profileImage></div><div class=border-repeat-bottom ng-if=\"$index==slide.unseen.length-1\"></div><div ng-bind=\"comment.firstName+' '+comment.lastName\" class=commented-by></div><div ng-bind=\"comment.commentedAt|date:'MMM d, yyyy h:mm a'\" class=commented-date></div></div><div class=\"col-xs-12 comment border-repeat-feedback\" ng-bind-html=\"comment.text| breakFilter\"></div></div><div class=\"col-xs-12 question-comments\" ng-repeat=\"comment in slide.seen\" ng-if=slide.viewRead><div class=\"col-xs-12 padding-top-40 padding-left-0 padding-right-0 pos-relative\"><div class=border-repeat></div><div class=commented-by-date-content ng-style=\"{'background-image':'url({{picUrl + comment.profileImage}})'}\" ng-if=\"comment.profileImage && !slide.isCollapsed\"></div><div class=commented-by-date-content ng-style=\"{'background-image':'url(./resources/images/default-user.png)'}\" ng-if=!comment.profileImage></div><div class=border-repeat-bottom ng-if=\"$index==slide.seen.length-1\"></div><div ng-bind=\"comment.firstName+' '+comment.lastName\" class=commented-by></div><div ng-bind=\"comment.commentedAt|date:'MMM d, yyyy h:mm a'\" class=commented-date></div></div><div class=\"col-xs-12 comment border-repeat-feedback\" ng-bind-html=\"comment.text| breakFilter\"></div></div><div class=\"col-xs-12 text-right margin-top-10\" ng-if=\"!slide.viewRead && slide.seen.length\"><a ng-click=showReadComments(slide) class=\"cursor-pointer text-underline\">Show Read Comments</a></div></div></div><div class=\"col-xs-12 grades-heading\" ng-if=!hideGrading>Grades</div><div class=\"grade-content col-xs-12 margin-bottom-20\" ng-repeat=\"grade in grades\" ng-if=!gradeResponse[grade.id].noFeedback><div class=\"col-xs-12 padding0\"><div class=\"col-xs-12 grade-tile\" ng-class=\"{'border-bottom-0':grade.isCollapsed}\"><div class=\"col-xs-1 padding-left-0\"><img src=\"./resources/images/grades.png\"></div><div class=\"col-xs-11 padding-right-0 grade-name\"><div class=\"col-xs-6 padding-left-0\" id={{grade.heading}}>{{grade.heading}}</div><div class=\"col-xs-5 text-right padding0\" ng-bind-html=\"gradeResponse[grade.id].rating | starRating\" ng-if=gradeResponse[grade.id].rating></div><img src=./resources/images/accordion-collapse.png class=\"margin-top-5 pull-right cursor-pointer\" ng-if=!grade.isCollapsed ng-click=\"openAccordion(grade,'grade')\"> <img src=./resources/images/accordion-expand.png ng-if=grade.isCollapsed class=\"margin-top-5 pull-right cursor-pointer\" ng-click=\"openAccordion(grade,'grade')\"></div></div><div uib-collapse=grade.isCollapsed class=\"col-xs-12 padding0 grade-info-collapse xwidth-auto\"><div class=\"col-xs-12 padding-left-0 padding-right-0 padding-bottom-20 xwidth-auto\"><div class=\"col-xs-12 grade-comments\" ng-repeat=\"comment in gradeResponse[grade.id].comments\"><div class=\"col-xs-12 padding-top-20 padding-left-0 padding-right-0 pos-relative\"><div class=horizontal-marker></div><div class=\"view-comment-profile-image col-xs-2 padding-left-0\" ng-style=\"{'background-image':'url({{picUrl + comment.userPic}})'}\" ng-if=comment.userPic></div><div class=\"view-comment-profile-image col-xs-2 padding-left-0\" style=background-image:url(./resources/images/default-user.png) ng-if=!comment.userPic></div><div class=\"col-xs-10 padding0\"><div ng-bind=comment.userName class=\"commented-by margin-top-5 col-xs-12\"></div><div class=\"col-xs-12 font-weight-100\" ng-bind=comment.text></div></div></div></div></div><div class=\"col-xs-12 padding-left-0 padding-right-1 comment-subcategory\" ng-repeat=\"sub in grade.subCategory\" ng-if=\"grade.subCategory && (gradeResponse[grade.id].subCategory[sub.id].rating || gradeResponse[grade.id].subCategory[sub.id].comments.length)\"><div class=col-xs-12><div class=\"col-xs-9 comment-subcategory-heading\">{{sub.heading}}</div><div class=\"col-xs-3 width-auto padding0 font-17 subcategory-rating pull-left\" ng-bind-html=\"gradeResponse[grade.id].subCategory[sub.id].rating | starRating\" ng-if=gradeResponse[grade.id].subCategory[sub.id].rating></div></div><div class=\"col-xs-12 xwidth-auto comment-subcategory-content\"><div class=\"col-xs-12 grade-comments\" ng-repeat=\"comment in gradeResponse[grade.id].subCategory[sub.id].comments\"><div class=\"col-xs-12 padding-top-20 padding-left-0 padding-right-0 pos-relative\"><div class=horizontal-marker></div><div class=\"view-comment-profile-image col-xs-2 padding-left-0\" ng-style=\"{'background-image':'url({{picUrl + comment.userPic}})'}\" ng-if=comment.userPic></div><div class=\"view-comment-profile-image col-xs-2 padding-left-0\" style=background-image:url(./resources/images/default-user.png) ng-if=!comment.userPic></div><div class=\"col-xs-10 padding0\"><div ng-bind=comment.userName class=\"commented-by margin-top-5 col-xs-12\"></div><div class=\"col-xs-12 font-weight-100\" ng-bind=comment.text></div></div></div></div></div><div class=\"col-xs-12 padding0 comment-subcategory xwidth-auto comment-second-sub-category\" ng-if=\"sub.subCategory && gradeResponse[grade.id].subCategory[sub.id].subCategory[subcat.id].rating\" ng-repeat=\"subcat in sub.subCategory\"><div class=\"col-xs-8 comment-subcategory-heading\">{{subcat.heading}}</div><div class=\"col-xs-4 width-auto padding-right-0 padding-left-9 pull-left font-17\" style=\"padding-left: 0px\" ng-bind-html=\"gradeResponse[grade.id].subCategory[sub.id].subCategory[subcat.id].rating | starRating\" ng-if=gradeResponse[grade.id].subCategory[sub.id].subCategory[subcat.id].rating></div><div class=\"col-xs-12 padding0 xwidth-auto comment-subcategory-content pull-left\"><div class=\"col-xs-12 grade-comments\" ng-repeat=\"comment in gradeResponse[grade.id].subCategory[sub.id].subCategory[subcat.id].comments\"><div class=\"col-xs-12 padding-top-20 padding-left-0 padding-right-0 pos-relative\"><div class=horizontal-marker></div><div class=\"view-comment-profile-image col-xs-2 padding-left-0\" ng-style=\"{'background-image':'url({{picUrl+comment.userPic}})'}\" ng-if=comment.userPic></div><div class=\"view-comment-profile-image col-xs-2 padding-left-0\" style=background-image:url(./resources/images/default-user.png) ng-if=!comment.userPic></div><div class=\"col-xs-10 padding0\"><div ng-bind=comment.userName class=\"commented-by margin-top-5 col-xs-12\"></div><div class=\"col-xs-12 font-weight-100\" ng-bind=comment.text></div></div></div></div></div></div></div></div></div></div></div><div class=\"col-xs-12 padding-0\"><div class=\"no-feedback-ppt margin-right-10 margin-left-10 text-center\" ng-if=\"presentationDetails.feedback && !presentationDetails.feedback.comments.length\"><img class=margin-bottom-20 src=./resources/images/no-feedback.png width=50 height=50><div class=no-ppt-text><div>Hi {{erticulateUserData.firstName}}, it seems you don't have any</div><div>feedback for this presentation.</div></div></div></div></div></div></div></div></div><div class=\"col-xs-12 padding-left-0 margin-top-10\"><div class=\"margin-bottom-0 text-center feedback-notification-container no-feedback-ppt\" ng-if=\"!presentationList.length && !presentationListLoading && !activeMenu\"><img class=margin-bottom-20 src=./resources/images/no-feedback.png width=50 height=50><div class=no-ppt-text><div>To get a feedback, upload a presentation,</div><div>practice and share with mentors.</div></div></div></div><div class=\"text-center table-loading margin-top-20\" ng-show=presentationDetailsLoading><i class=\"fa fa-spinner fa-spin spinner-loader\"></i> &nbsp; <span class=spinner-text>Loading presentation details and feedback...</span></div></div></div></div></div>";

},{}],33:[function(require,module,exports){
module.exports = "<div class=\"section-body profile-container\" ng-init=init()><form name=profileForm ui-form=editProfile><div class=content-section-container><div class=content-section-heading>Profile</div><div class=\"panel-container row margin0\"><div class=\"main-panel-heading col-xs-12 padding-0 ppt-details\"><img src=./resources/images/back-black.png class=\"cursor-pointer margin-right-10\" ng-click=goBack()> <span>View Profile</span><div class=\"hover-btn edit-button pull-right\" ng-click=editModeChange() ng-if=!editMode><img src=./resources/images/edit-btn.png class=\"margin-bottom-5 margin-right-5\"> <span>Edit</span></div><button class=\"hover-btn border-none edit-button pull-right\" ng-if=editMode type=submit><span>Save</span></button><div class=\"hover-btn change-password-button pull-right\" ng-click=openChangePasswordModal() ng-if=!editMode><img src=./resources/images/change-password.png class=\"margin-bottom-5 margin-right-5\"> <span>Change Password</span></div><div class=\"hover-btn change-password-button pull-right\" ng-click=cancel() ng-if=editMode><span>Cancel</span></div></div><div class=\"profile-wrapper col-xs-12 xxwidth-auto\"><div class=\"row margin0\"><div class=\"col-sm-6 col-xs-12 padding0 left-part\"><img src=\"{{userDetails.profileImage || './resources/images/default-user.png'}}\" id=displayImage ng-src=\"{{userDetails.profileImage || './resources/images/default-user.png'}}\" uib-tooltip=\"Upload profile image\"> <input type=file class=\"upload-image cursor-pointer\" id=inputFile style=\"display: none\" accept=.jpg,.jpeg,.png> <span class=\"upload-image cursor-pointer\"><i id=inputIcon ng-show=editMode class=\"fa fa-upload\"></i></span><div class=name-email-container ng-if=!editMode><div class=name>{{userDetails.firstName}} {{userDetails.lastName}}</div><div class=email>{{userDetails.email}}</div></div><div ng-if=editMode class=edit-name-email><div class=form-group><label>First Name</label><input name=firstName class=form-control autocomplete=nope ng-model=userDetails.firstName ui-required><div ng-messages=profileForm.firstName.$error class=error-message role=alert ng-show=\" profileForm.$submitError && profileForm.firstName.$invalid && !profileForm.firstName.$dirty \"><div class=error ng-message=uiRequired ng-if=!profileForm.firstName.$viewValue>This field is required</div></div></div><div class=form-group><label>Last Name</label><input name=lastName class=form-control autocomplete=nope ng-model=userDetails.lastName ui-required><div ng-messages=profileForm.lastName.$error class=error-message role=alert ng-show=\" profileForm.$submitError && profileForm.lastName.$invalid && !profileForm.lastName.$dirty \"><div class=error ng-message=uiRequired ng-if=!profileForm.lastName.$viewValue>This field is required</div></div></div><div class=form-group><label>Email</label><input name=email class=form-control autocomplete=nope ng-model=userDetails.email ui-required ui-email><div ng-messages=profileForm.email.$error class=error-message role=alert ng-show=\"profileForm.$submitError && profileForm.email.$invalid && !profileForm.email.$dirty\"><div class=error ng-message=uiRequired ng-if=!profileForm.email.$viewValue>This field is required</div><div class=error ng-message=uiRequired ng-if=profileForm.email.$viewValue>Please provide valid email.</div></div></div></div></div><div class=\"col-sm-6 col-xs-12 right-part\"><div class=\"row margin0\"><div class=\"col-sm-12 padding0 user-other-details\"><div ng-if=!editMode><div class=\"col-sm-4 padding0 field\">Office Phone</div><div class=\"col-sm-8 padding0 value\">{{userDetails.officePhone || 'N/A'}}</div></div><div class=form-group ng-if=editMode><label>Office Phone</label><input name=officePhone class=form-control autocomplete=nope ng-model=userDetails.officePhone phone-input><div ng-messages=profileForm.officePhone.$error class=error-message role=alert ng-show=\"profileForm.$submitError && profileForm.officePhone.$invalid && !profileForm.officePhone.$dirty\"><div class=error ng-message=uiRequired ng-if=profileForm.officePhone.$viewValue>Please provide valid phone number.</div></div></div></div><div class=\"col-sm-12 padding0 user-other-details\"><div ng-if=!editMode><div class=\"col-sm-4 padding0 field\">Cell Phone</div><div class=\"col-sm-8 padding0 value\">{{userDetails.mobilePhone || 'N/A'}}</div></div><div class=form-group ng-if=editMode><label>Cell Phone</label><input name=cellPhone class=form-control autocomplete=nope ng-model=userDetails.mobilePhone phone-input><div ng-messages=profileForm.cellPhone.$error class=error-message role=alert ng-show=\"profileForm.$submitError && profileForm.cellPhone.$invalid && !profileForm.cellPhone.$dirty\"><div class=error ng-message=uiRequired ng-if=profileForm.cellPhone.$viewValue>Please provide valid phone number.</div></div></div></div><div class=\"col-sm-12 padding0 user-other-details\"><div ng-if=!editMode><div class=\"col-sm-4 padding0 field\">User Type</div><div class=\"col-sm-8 padding0 value\">{{userTypeStatus[userDetails.userType]}}</div></div><div class=form-group ng-if=editMode><label>User Type</label><input name=city class=form-control autocomplete=nope value={{userTypeStatus[userDetails.userType]}} disabled=disabled></div></div><div class=\"col-sm-12 padding0 user-other-details\"><div ng-if=!editMode><div class=\"col-sm-4 padding0 field\">City</div><div class=\"col-sm-8 padding0 value\">{{userDetails.location.city || 'N/A'}}</div></div><div class=form-group ng-if=editMode><label>City</label><input name=city class=form-control autocomplete=nope ng-model=userDetails.location.city ui-required><div ng-messages=profileForm.city.$error class=error-message role=alert ng-show=\" profileForm.$submitError && profileForm.city.$invalid && !profileForm.city.$dirty \"><div class=error ng-message=uiRequired ng-if=!profileForm.city.$viewValue>This field is required</div></div></div></div><div class=\"col-sm-12 padding0 user-other-details\"><div ng-if=!editMode><div class=\"col-sm-4 padding0 field\">State</div><div class=\"col-sm-8 padding0 value\">{{userDetails.location.state || 'N/A'}}</div></div><div class=form-group ng-if=editMode><label>State</label><input name=state class=form-control autocomplete=nope ng-model=userDetails.location.state ui-required><div ng-messages=profileForm.state.$error class=error-message role=alert ng-show=\" profileForm.$submitError && profileForm.state.$invalid && !profileForm.state.$dirty \"><div class=error ng-message=uiRequired ng-if=!profileForm.state.$viewValue>This field is required</div></div></div></div></div></div></div></div></div></div></form></div>";

},{}],34:[function(require,module,exports){
module.exports = "<ui-view></ui-view>";

},{}],35:[function(require,module,exports){
module.exports = "<div ng-init=init() class=\"login-container container-fluid\"><div class=content-wrapper ng-if=\"exists && !expires\"><div class=login-container-overlay></div><div class=login-logo><img src=./resources/images/login-logo.png></div><form class=login-form role=form novalidate=novalidate id=login name=resetPasswordForm ui-form=resetPassword><div class=login-header>Reset Password</div><div class=\"form-group pos-relative\"><input class=\"form-control form-control-solid placeholder-no-fix\" type={{inputType}} autocomplete=nope placeholder=\"New Password\" name=password ng-model=resetPasswordDetails.password ng-focus=focusPassword() ng-blur=blurPassword() ng-change=validatePassword() ui-required> <i class=\"fa fa-eye view-password eye-password-reset\" ng-if=viewPassword ng-click=toggelView()></i> <i class=\"fa fa-eye-slash view-password eye-password-reset\" ng-if=!viewPassword ng-click=toggelView()></i><div class=\"form-control col-xs-12 margin-bottom-10\" uib-collapse=isCollapsed><div class=\"col-xs-12 padding-5 font-16\" ng-repeat=\"validation in passwordValidations\" ng-if=!passwordValidated><span ng-class=\"{'color-green':validation.valid && resetPasswordForm.password.$viewValue,'color-red':!validation.valid && resetPasswordForm.password.$viewValue}\">{{validation.text}}</span></div><div class=\"col-xs-12 padding-5 font-16\" ng-if=passwordValidated><span class=color-green>Your password meets all of the requirements.</span></div></div><div ng-messages=resetPasswordForm.password.$error class=error-message role=alert ng-show=\"resetPasswordForm.$submitError && resetPasswordForm.password.$invalid && !resetPasswordForm.password.$dirty\"><div class=error ng-message=uiRequired ng-if=!resetPasswordForm.password.$viewValue>This field is required</div><div class=error ng-if=resetPasswordForm.password.$viewValue>This field is required</div></div></div><div class=\"form-group pos-relative\"><input type=password class=\"form-input form-control\" name=confirmPassword placeholder=\"Confirm Password\" ng-model=resetPasswordDetails.confirmPassword ui-required ui-equalto=resetPasswordDetails.password ng-disabled=!resetPasswordForm.password.$viewValue><div ng-messages=resetPasswordForm.confirmPassword.$error class=error-message role=alert ng-show=\"resetPasswordForm.$submitError && resetPasswordForm.confirmPassword.$invalid && !resetPasswordForm.confirmPassword.$dirty\"><div class=\"error errorMessage\" ng-message=uiRequired ng-if=!resetPasswordForm.confirmPassword.$viewValue>This field is required</div><div class=\"error errorMessage\" ng-message=uiEqualto ng-if=resetPasswordForm.confirmPassword.$viewValue>Password doesn't match</div></div></div><div class=\"login-footer col-xs-12\"><a class=\"pull-left forgot-password cursor-pointer\" ui-sref=public.login>Back to Sign In</a> <button type=submit class=\"btn btn-primary pull-right sign-in-button\">Reset Password</button></div></form></div><div class=content-wrapper ng-if=\"exists && expires\"><div class=\"well text-center oops\">Oops!! Link has been expired.</div></div><div class=content-wrapper ng-if=\"!expires && !exists\"><div class=\"well text-center oops\">Oops!! User doesn't exist.</div></div></div><div ng-init=init() class=\"login-container container-fluid\"><div class=content-wrapper ng-if=\"exists && !expires\"><div class=login-container-overlay></div><div class=login-logo><img src=./resources/images/login-logo.png></div><form class=login-form role=form novalidate=novalidate id=login name=resetPasswordForm ui-form=resetPassword><div class=login-header>Reset Password</div><div class=\"form-group pos-relative\"><input class=\"form-control form-control-solid placeholder-no-fix\" type={{inputType}} autocomplete=nope placeholder=\"New Password\" name=password ng-model=resetPasswordDetails.password ng-focus=focusPassword() ng-blur=blurPassword() ng-change=validatePassword() ui-required> <i class=\"fa fa-eye view-password eye-password-reset\" ng-if=viewPassword ng-click=toggelView()></i> <i class=\"fa fa-eye-slash view-password eye-password-reset\" ng-if=!viewPassword ng-click=toggelView()></i><div class=\"form-control col-xs-12 margin-bottom-10\" uib-collapse=isCollapsed><div class=\"col-xs-12 padding-5 font-16\" ng-repeat=\"validation in passwordValidations\" ng-if=!passwordValidated><span ng-class=\"{'color-green':validation.valid && resetPasswordForm.password.$viewValue,'color-red':!validation.valid && resetPasswordForm.password.$viewValue}\">{{validation.text}}</span></div><div class=\"col-xs-12 padding-5 font-16\" ng-if=passwordValidated><span class=color-green>Your password meets all of the requirements.</span></div></div><div ng-messages=resetPasswordForm.password.$error class=error-message role=alert ng-show=\"resetPasswordForm.$submitError && resetPasswordForm.password.$invalid && !resetPasswordForm.password.$dirty\"><div class=error ng-message=uiRequired ng-if=!resetPasswordForm.password.$viewValue>This field is required</div><div class=error ng-if=resetPasswordForm.password.$viewValue>This field is required</div></div></div><div class=\"form-group pos-relative\"><input type=password class=\"form-input form-control\" name=confirmPassword placeholder=\"Confirm Password\" ng-model=resetPasswordDetails.confirmPassword ui-required ui-equalto=resetPasswordDetails.password ng-disabled=!resetPasswordForm.password.$viewValue><div ng-messages=resetPasswordForm.confirmPassword.$error class=error-message role=alert ng-show=\"resetPasswordForm.$submitError && resetPasswordForm.confirmPassword.$invalid && !resetPasswordForm.confirmPassword.$dirty\"><div class=\"error errorMessage\" ng-message=uiRequired ng-if=!resetPasswordForm.confirmPassword.$viewValue>This field is required</div><div class=\"error errorMessage\" ng-message=uiEqualto ng-if=resetPasswordForm.confirmPassword.$viewValue>Password doesn't match</div></div></div><div class=\"login-footer col-xs-12\"><a class=\"pull-left forgot-password cursor-pointer\" ui-sref=public.login>Back to Sign In</a> <button type=submit class=\"btn btn-primary pull-right sign-in-button\">Reset Password</button></div></form></div><div class=content-wrapper ng-if=\"exists && expires\"><div class=\"well text-center oops\">Oops!! Link has been expired.</div></div><div class=content-wrapper ng-if=\"!expires && !exists\"><div class=\"well text-center oops\">Oops!! User doesn't exist.</div></div></div>";

},{}],36:[function(require,module,exports){
module.exports = "<div ng-init=init() class=\"login-container container-fluid\"><div class=content-wrapper ng-if=\"expires && !alreadyActioned\"><div class=login-logo><img src=./resources/images/login-logo.png></div><form class=login-form name=setPasswordForm novalidate=novalidate ui-form=setPassword><div class=login-header>Create your password to activate your account.</div><div class=border-div></div><div class=\"form-group pos-relative\"><input class=\"form-control form-control-solid placeholder-no-fix\" type={{inputType}} autocomplete=nope placeholder=\"Enter password\" name=password ng-model=formData.password ng-focus=focusPassword() ng-blur=blurPassword() ng-change=validatePassword() ui-required> <i class=\"fa fa-eye view-password\" ng-if=viewPassword ng-click=toggelView()></i> <i class=\"fa fa-eye-slash view-password\" ng-if=!viewPassword ng-click=toggelView()></i><div class=\"form-control col-xs-12 margin-bottom-10\" uib-collapse=isCollapsed><div class=\"col-xs-12 padding-5 font-16\" ng-repeat=\"validation in passwordValidations\" ng-if=!passwordValidated><span ng-class=\"{'color-green':validation.valid && setPasswordForm.password.$viewValue,'color-red':!validation.valid && setPasswordForm.password.$viewValue}\">{{validation.text}}</span></div><div class=\"col-xs-12 padding-5 font-16\" ng-if=passwordValidated><span class=color-green>Your password meets all of the requirements.</span></div></div><div ng-messages=setPasswordForm.password.$error class=error-message role=alert ng-show=\"setPasswordForm.$submitError && setPasswordForm.password.$invalid && !setPasswordForm.password.$dirty\"><div class=error ng-message=uiRequired ng-if=!setPasswordForm.password.$viewValue ng-bind=message.required[selectedLanguage]></div><div class=error ng-if=setPasswordForm.password.$viewValue>This field is required</div></div></div><div class=\"form-group mt-25\"><input class=\"form-control form-control-solid placeholder-no-fix\" type=password autocomplete=nope placeholder=\"Confirm password\" name=confirmPassword ng-model=formData.confirmPassword ui-required ui-equalto=formData.password ng-disabled=!setPasswordForm.password.$viewValue><div ng-messages=setPasswordForm.confirmPassword.$error class=error-message role=alert ng-show=\"setPasswordForm.$submitError && setPasswordForm.confirmPassword.$invalid && !setPasswordForm.confirmPassword.$dirty\"><div class=error ng-message=uiRequired ng-if=!setPasswordForm.confirmPassword.$viewValue ng-bind=message.required[selectedLanguage]></div><div class=error ng-message=uiEqualto ng-if=setPasswordForm.confirmPassword.$viewValue>Password doesn't match.</div></div></div><div class=\"login-footer col-xs-12\"><a class=\"pull-left forgot-password cursor-pointer\" ng-click=declineInvitation()>Decline Invitation</a> <button type=submit class=\"btn btn-primary pull-right sign-in-button\">Set Password</button></div></form></div><div class=content-wrapper ng-if=\"!expires && !alreadyActioned\"><div class=\"well text-center oops\">Oops!! Link has been expired. Please contact with admin.</div></div><div class=content-wrapper ng-if=alreadyActioned><div class=\"well text-center oops\">You have already taken care of it.</div></div><div class=login-container-overlay></div></div>";

},{}],37:[function(require,module,exports){
module.exports = "<div class=\"section-header row\" ng-init=init()><div class=col-xs-3><div class=\"back-btn-container background-center\" ui-sref=auth.dashboard></div></div><div class=\"col-xs-6 text-center\"><div class=ppt-name>{{presentation.title}}</div></div><div class=\"col-xs-3 text-right\" ng-if=false><div class=\"btn background-center feedback-btn text-white\" nnui-sref=auth.add-feedback({id:presentation._id})>View Feedback</div></div></div><br><div class=\"video-section-body mentor-watch\"><div class=\"slide-image-container height-100 background-center\"><div class=left-section ng-class=\"{'swap-left-section' : currentLargeSection == 'slide'}\" ng-click=\"swapSection('webcam')\" tooltip-placement=\"'top'\" uib-tooltip=\"Set as active window\" tooltip-enable=\"currentLargeSection!='webcam'\"><div ng-click=pausePlayToggle() ng-if=!play style=\"display: block; z-index: 1000; left: 50%; top: 50%; position: absolute; border-radius: 50%; padding: 10px;color: white\"><i class=\"fa fa-play fa-3x\"></i></div><div ng-if=loading style=\"display: block; z-index: 1000 !important; left: 50%; top: 50%; position: absolute; border-radius: 50%; padding: 10px;color: white\"><i class=\"fa fa-circle-o-notch fa-spin fa-2x\"></i></div><video id=practice-video class=\"video-js vjs-default-skin vjs-big-play-centered\"></video><video id=mentor_video class=\"video-js vjs-default-skin\" style=\"display: none !important\"></video></div><div class=right-section id=slideImageViewer ng-class=\"{'swap-right-section' : currentLargeSection == 'slide'}\" ng-click=\"swapSection('slide')\" style=\"background-image: url('{{currentSlideImage}}')\" tooltip-placement=\"'top'\" uib-tooltip=\"Set as active window\" tooltip-enable=\"currentLargeSection=='webcam'\"></div><div class=bottom-section><div class=play-btn ng-click=pausePlayToggle() ng-class=\"{'pause': !play , 'play': play}\"></div><div class=\"current-time display-inline-block text-white\">{{currentTime}}</div><div class=\"seek-bar display-inline-block\" ng-click=gotoPosition($event) style=\"background: linear-gradient(90deg,#ff6634 {{calcBackgroundPosition}}%,#aaa {{calcBackgroundPosition}}%)\"></div><div class=\"comment-container text-white display-inline-block\"><b>{{currentCommenter}}</b><br>{{currentComment}}<div class=down-pointer></div></div><div class=\"total-time display-inline-block text-white\">{{videoDuration}}</div><div class=\"right-area-container display-inline-block height-100\"><div class=\"prev-slide-marker display-inline-block\" ng-click=goToPreviousSlide()></div><div class=\"slide-current-status display-inline-block text-white\">Slide {{slide+1}} of {{totalSlides}}</div><div class=\"next-slide-marker display-inline-block\" ng-click=goToNextSlide()></div></div></div></div></div>";

},{}],38:[function(require,module,exports){
module.exports = "<div class=\"section-header row\" ng-init=init()><div class=col-xs-3><div class=\"back-btn-container background-center\" ui-sref=auth.dashboard></div></div><div class=\"col-xs-6 text-center\"><div class=ppt-name>{{presentation.title}}</div></div><div class=\"col-xs-3 text-right\"><div class=\"btn background-center feedback-btn text-white\" ng-show=showEndAndShare ng-click=\"uploadSlide('finish')\">Finish</div></div></div><div class=video-section-body><div class=\"slide-image-container height-100 background-center\"><div class=\"slide-image height-100\" id=imageDisplay></div></div><div class=webcam-video><video id=record_video></video></div><div class=control-area ng-class=\"{'full-width': videoStartDisabled}\"><div><div class=left-control-area ng-if=videoStartDisabled><div class=\"record-pause-btn record-ctrl-btn\" ng-hide=recordingPaused ng-click=stopRecord()></div><div class=\"record-play-btn record-ctrl-btn\" ng-if=recordingPaused ng-click=stopRecord()></div><div class=\"start-text text-center text-white rec-pause-play-text\" ng-click=stopRecord() ng-hide=recordingPaused>Pause</div><div class=\"start-text text-center text-white rec-pause-play-text\" ng-click=stopRecord() ng-show=recordingPaused>Resume</div><div class=\"start-text text-right text-white rec-dur-text\">{{displayDuration}}</div></div><div class=\"text-white start-text text-center\" ng-if=videoStartDisabled ng-click=stopRecord()>Slide {{slide+1}} of {{totalSlides}}</div><div class=\"text-white start-text text-center\" ng-if=!videoStartDisabled ng-click=startRecord()>Start Practice</div><div class=record-controls ng-if=videoStartDisabled><div class=pause-play-button></div></div></div></div><div class=slide-control-container ng-class=\"{'button-margin': showEndAndShare}\"><div class=slide-navigator><div class=\"right-navigator display-inline-block\" ng-class=\"{'disabled':!nextOpen}\" ng-click=\"nextSlide('next')\" ng-if=!endRecording>Next Slide</div><div class=\"right-navigator display-inline-block end-text add-padding\" ng-class=\"{'disabled':!nextOpen}\" ng-click=\"uploadSlide('finish')\" ng-if=endRecording>Finish</div></div></div></div>";

},{}],39:[function(require,module,exports){
'use strict';

//All the api url are maintained here
// var baseUrl = 'http://192.168.0.33:8000/api/v1/';
// var baseUrl = 'http://192.168.0.26:8000/api/v1/';
// var baseUrl = 'http://ec2-52-77-252-165.ap-southeast-1.compute.amazonaws.com:3000/api/v1/';
// var baseUrl = 'https://test.erticulate.com/api/v1/';
var baseUrl = location.origin + '/api/v1/';
module.exports = {
  //Auth
  picUrl: "",
  login: baseUrl + 'user/login',
  logout: baseUrl + 'account/user/logout',
  profile: baseUrl + 'account/user/profile',
  requestOTP: baseUrl + 'user/forgot-password/reset',
  changePassword: baseUrl + 'account/user/profile/change-password',
  resetPassword: baseUrl + '/user/set-password',
  verifyOtp: baseUrl + '/user/verify-forgot-password-link/',
  userDetails: baseUrl + 'account/admin/user-management/details/',
  setPassword: baseUrl + 'user/activate-user',
  verifyLink: baseUrl + 'user/verify-link/',
  declineInvitation: baseUrl + 'user/decline-invitation/',
  getPresentationList: baseUrl + 'account/presentation/list',
  getPresentationDetails: baseUrl + 'account/presentation/details/',
  changeEmail: baseUrl + 'account/user/profile/change-email',
  verifyEmail: baseUrl + 'user/verify-email/',
  readFeedback: baseUrl + 'account/feedback/read',
  acknowledgeComment: baseUrl + 'account/feedback/acknowledge/',
  addFeedback: baseUrl + 'account/feedback/submit',
  sharePresentationList: baseUrl + 'account/presentation/get-mentors/',
  sharePresentation: baseUrl + '/account/presentation/share',
  uploadPpt: baseUrl + 'account/presentation/upload',
  uploadPptVideo: baseUrl + 'account/practice/upload',
  getPresenterStatistics: baseUrl + 'account/user/profile/get-statistics/',
  getPresenterList: baseUrl + 'account/presentation/shared-presentation/list',
  getAllPresenterNotifications: baseUrl + 'account/notification/presenter/all',
  getPracticeDetail: function(presentationRef) {
    return baseUrl + 'account/practice/get-practice-details/presentation/' + presentationRef;
  },
  getPracticeData: function(practiceID) {
    return baseUrl + 'account/practice/get-practice-details/practice/' + practiceID;
  },
  getAllMentorNotifications: baseUrl + 'account/notification/mentor/all',
  readNotification: baseUrl + 'account/notification/read',
  netTesting: baseUrl + 'common/ping',
  postComment: baseUrl + 'account/practice/add-comment',
  practiceActivityLog: baseUrl + 'account/activity-log/practice-watch',
  presenterPracticeActivityLog: baseUrl + 'account/activity-log/presentation-practice',
  practiceDeleteActivityLog: baseUrl + 'account/activity-log/practice-delete',
  deletePracticeURL: baseUrl + 'account/practice/delete/',
  getPresentationFeedbacks: baseUrl + 'account/feedback/getFeedbackToCopy/',
  getPracticeFeedbacks: baseUrl + 'account/feedback/get',
  getSlides: baseUrl + 'account/presentation/slides/'
};

},{}],40:[function(require,module,exports){
'use strict';

//All the application configurations are maintained here
module.exports = {
    toastr: {
        autoDismiss: false,
        containerId: 'toast-container',
        maxOpened: 1,
        newestOnTop: false,
        positionClass: 'toast-top-center',
        preventDuplicates: false,
        preventOpenDuplicates: true,
        target: 'body',
        timeOut: 6000,
        closeButton: false,
        // closeHtml: '<button>&times;</button>',
        toastClass: 'web-toast'
    },
    leftMenuConfigForSuperAdmin: [{
            title: 'Organization',
            image: './resources/images/organization.png',
            link: 'admin.organization.list',
            name: 'organization',
            moduleKey: 'organization'
        },
        {
            title: 'Presentation',
            image: './resources/images/presentation-icon.png',
            link: 'admin.presentation.list',
            name: 'presentation',
            moduleKey: 'presentation'
        }, {
            title: 'Activity Log',
            image: './resources/images/log.png',
            link: 'admin.activity.list',
            name: 'activityLog',
            moduleKey: 'activityLog'
        }
    ],
    leftMenuConfigForAdmin: [{
        title: 'Company',
        image: './resources/images/vendor.png',
        link: 'admin.company-list',
        name: 'user',
        moduleKey: 'user'
    }],
    role: {
        1: 'User',
        2: 'Admin'
    },
    activeStatus: {
        1: 'Active',
        2: 'Inactive'
    },
    defaultSortConfig: {
        skip: 0,
        limit: 8
    },
    userTypeStatus: {
        1: 'Presenter',
        2: 'Mentor',
        4: 'Company Owner'
    },
    errorCode: {
        /////////////
        // GENERAL //
        /////////////

        400: 'API validation error',
        401: 'Error uploading presentation.',
        403: 'Something went wrong',

        ////////////
        // COMMON //
        ////////////

        500: 'Something went wrong',
        501: 'Admin not found',
        502: 'User not found',
        503: 'Invalid file type error',

        //////////
        // AUTH //
        //////////

        1000: 'Session not found',
        1001: 'OTP is invalid',
        1002: 'OTP timeout',
        1003: 'The login credentials provided are not valid.  Please try again or reset your password to continue.',
        1004: 'Phone number not verified',

        ////////////
        // SIGNUP //
        ////////////

        1500: 'Email already exists, please use another email address',

        //////////////
        // USER     //
        //////////////

        2000: 'User has been blocked',
        2001: 'User is busy',
        2002: 'User not found',
        2008: 'Access denied',

        ///////////////////
        // ORGANIZATION  //
        ///////////////////
        5000: 'Organization already exists',
        5001: 'Organization not found',

        ///////////////////
        // COMPANY  //
        ///////////////////
        3000: 'Company exists',
        3001: 'Company not found',
        4000: 'Max user limit has reached',

        //activation link
        2002: 'User not found',
        2003: 'User doesnot exist',
        2004: 'Invalid activation link',
        2005: 'Email already verified',
        2006: 'User is not verified',
        2008: ' User is not allowed to to use this link',
        //comment
        7001: 'Comment not found'
    },
    presentationFilter: [
        // {
        //     value: 'all',
        //     name: 'Make a Selection'
        // },
        {
            value: 'clientName',
            name: 'Project'
        }, {
            value: 'productName',
            name: 'Note'
        }, {
            value: 'title',
            name: 'Presentation title'
        }
    ],

    presenterFilter: [
        /*{
            value: 'all',
            name: 'Make a Selection'
        },*/
        {
            value: 'firstName',
            name: 'First name'
        }, {
            value: 'lastName',
            name: 'Last name'
        }
    ],

    allowedFileTypes: [
        "application/vnd.ms-powerpoint",
        "application/vnd.ms-powerpoint",
        "application/vnd.ms-powerpoint",
        "application/vnd.ms-powerpoint",
        "application/vnd.openxmlformats-officedocument.presentationml.presentation",
        "application/vnd.openxmlformats-officedocument.presentationml.template",
        "application/vnd.openxmlformats-officedocument.presentationml.slideshow",
        "application/vnd.ms-powerpoint.addin.macroEnabled.12",
        "application/vnd.ms-powerpoint.presentation.macroEnabled.12",
        "application/vnd.ms-powerpoint.presentation.macroEnabled.12",
        "application/vnd.ms-powerpoint.slideshow.macroEnabled.12",
        "application/pdf"
    ],
    'type': {
        1: 'giveFeedback',
        2: 'uploadPresentation',
        3: 'sharePresentation',
        4: 'thankFeedback',
        5: 'rateFeedback'
    }
};

},{}],41:[function(require,module,exports){
'use strict';

//All the application constant are maintained here
module.exports = {
    passwordRegex: /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[\S]{8,}$/,
    video: {
      record: {
        fadeIn: 300,
        fadeOut: 300
      },
      watch: {
        fadeIn: 300,
        fadeOut: 300
      }
    },
    months: [
      "Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sep", "Oct", "Nov", "Dec"
    ],
    houseTypeConfig: {
        1: {
            en: 'Villa'
        },
        2: {
            en: 'Terrace house'
        },
        4: {
            en: 'Apartment block'
        }
    },
    requestOfferTypeConfig: {
        1: {
            en: 'Request'
        },
        2: {
            en: 'Offer'
        }
    },
    requestCategoryConfig: {
        1: {
            en: 'Borrow'
        },
        2: {
            en: 'Service'
        },
        3: {
            en: 'Give Away'
        },
        4: {
            en: 'Go Shopping'
        },
        5: {
            en: 'Buy'
        },
        6: {
            en: 'Sell'
        },
        7: {
            en: 'Others'
        }
    },
    requestStatusConfig: {
        0: {
            en: 'Close'
        },
        1: {
            en: 'Open'
        }
    },
    houseOwnerStatusConfig: {
        0: {
            en: 'Suspend'
        },
        1: {
            en: 'Active'
        }
    },
    userStatusConfig: {
        1: {
            en: 'Suspend'
        },
        2: {
            en: 'Active'
        },
        3: {
            en: 'Pending First Time User'
        },
        4: {
            en: 'Pending Existing User'
        },
        5: {
            en: 'Deleted'
        }
    },
    genderConfig: {
        1: {
            en: 'Male'
        },
        2: {
            en: 'Female'
        },
        3: {
            en: 'Others'
        }
    }
};

},{}],42:[function(require,module,exports){
'use strict';

module.exports = [{
    'name': 'Afghanistan',
    'dial_code': '+93',
    'code': 'AF'
}, {
    'name': 'Albania',
    'dial_code': '+355',
    'code': 'AL'
}, {
    'name': 'Algeria',
    'dial_code': '+213',
    'code': 'DZ'
}, {
    'name': 'AmericanSamoa',
    'dial_code': '+1 684',
    'code': 'AS'
}, {
    'name': 'Andorra',
    'dial_code': '+376',
    'code': 'AD'
}, {
    'name': 'Angola',
    'dial_code': '+244',
    'code': 'AO'
}, {
    'name': 'Anguilla',
    'dial_code': '+1 264',
    'code': 'AI'
}, {
    'name': 'Antarctica',
    'dial_code': '+672',
    'code': 'AQ'
}, {
    'name': 'Antigua and Barbuda',
    'dial_code': '+1268',
    'code': 'AG'
}, {
    'name': 'Argentina',
    'dial_code': '+54',
    'code': 'AR'
}, {
    'name': 'Armenia',
    'dial_code': '+374',
    'code': 'AM'
}, {
    'name': 'Aruba',
    'dial_code': '+297',
    'code': 'AW'
}, {
    'name': 'Australia',
    'dial_code': '+61',
    'code': 'AU'
}, {
    'name': 'Austria',
    'dial_code': '+43',
    'code': 'AT'
}, {
    'name': 'Azerbaijan',
    'dial_code': '+994',
    'code': 'AZ'
}, {
    'name': 'Bahamas',
    'dial_code': '+1 242',
    'code': 'BS'
}, {
    'name': 'Bahrain',
    'dial_code': '+973',
    'code': 'BH'
}, {
    'name': 'Bangladesh',
    'dial_code': '+880',
    'code': 'BD'
}, {
    'name': 'Barbados',
    'dial_code': '+1 246',
    'code': 'BB'
}, {
    'name': 'Belarus',
    'dial_code': '+375',
    'code': 'BY'
}, {
    'name': 'Belgium',
    'dial_code': '+32',
    'code': 'BE'
}, {
    'name': 'Belize',
    'dial_code': '+501',
    'code': 'BZ'
}, {
    'name': 'Benin',
    'dial_code': '+229',
    'code': 'BJ'
}, {
    'name': 'Bermuda',
    'dial_code': '+1 441',
    'code': 'BM'
}, {
    'name': 'Bhutan',
    'dial_code': '+975',
    'code': 'BT'
}, {
    'name': 'Bolivia, Plurinational State of',
    'dial_code': '+591',
    'code': 'BO'
}, {
    'name': 'Bosnia and Herzegovina',
    'dial_code': '+387',
    'code': 'BA'
}, {
    'name': 'Botswana',
    'dial_code': '+267',
    'code': 'BW'
}, {
    'name': 'Brazil',
    'dial_code': '+55',
    'code': 'BR'
}, {
    'name': 'British Indian Ocean Territory',
    'dial_code': '+246',
    'code': 'IO'
}, {
    'name': 'Brunei Darussalam',
    'dial_code': '+673',
    'code': 'BN'
}, {
    'name': 'Bulgaria',
    'dial_code': '+359',
    'code': 'BG'
}, {
    'name': 'Burkina Faso',
    'dial_code': '+226',
    'code': 'BF'
}, {
    'name': 'Burundi',
    'dial_code': '+257',
    'code': 'BI'
}, {
    'name': 'Cambodia',
    'dial_code': '+855',
    'code': 'KH'
}, {
    'name': 'Cameroon',
    'dial_code': '+237',
    'code': 'CM'
}, {
    'name': 'Canada',
    'dial_code': '+1',
    'code': 'CA'
}, {
    'name': 'Cape Verde',
    'dial_code': '+238',
    'code': 'CV'
}, {
    'name': 'Cayman Islands',
    'dial_code': '+ 345',
    'code': 'KY'
}, {
    'name': 'Central African Republic',
    'dial_code': '+236',
    'code': 'CF'
}, {
    'name': 'Chad',
    'dial_code': '+235',
    'code': 'TD'
}, {
    'name': 'Chile',
    'dial_code': '+56',
    'code': 'CL'
}, {
    'name': 'China',
    'dial_code': '+86',
    'code': 'CN'
}, {
    'name': 'Christmas Island',
    'dial_code': '+61',
    'code': 'CX'
}, {
    'name': 'Cocos (Keeling) Islands',
    'dial_code': '+61',
    'code': 'CC'
}, {
    'name': 'Colombia',
    'dial_code': '+57',
    'code': 'CO'
}, {
    'name': 'Comoros',
    'dial_code': '+269',
    'code': 'KM'
}, {
    'name': 'Congo',
    'dial_code': '+242',
    'code': 'CG'
}, {
    'name': 'Congo, The Democratic Republic of the',
    'dial_code': '+243',
    'code': 'CD'
}, {
    'name': 'Cook Islands',
    'dial_code': '+682',
    'code': 'CK'
}, {
    'name': 'Costa Rica',
    'dial_code': '+506',
    'code': 'CR'
}, {
    'name': 'Cote d\'Ivoire',
    'dial_code': '+225',
    'code': 'CI'
}, {
    'name': 'Croatia',
    'dial_code': '+385',
    'code': 'HR'
}, {
    'name': 'Cuba',
    'dial_code': '+53',
    'code': 'CU'
}, {
    'name': 'Cyprus',
    'dial_code': '+537',
    'code': 'CY'
}, {
    'name': 'Czech Republic',
    'dial_code': '+420',
    'code': 'CZ'
}, {
    'name': 'Denmark',
    'dial_code': '+45',
    'code': 'DK'
}, {
    'name': 'Djibouti',
    'dial_code': '+253',
    'code': 'DJ'
}, {
    'name': 'Dominica',
    'dial_code': '+1 767',
    'code': 'DM'
}, {
    'name': 'Dominican Republic',
    'dial_code': '+1 849',
    'code': 'DO'
}, {
    'name': 'Ecuador',
    'dial_code': '+593',
    'code': 'EC'
}, {
    'name': 'Egypt',
    'dial_code': '+20',
    'code': 'EG'
}, {
    'name': 'El Salvador',
    'dial_code': '+503',
    'code': 'SV'
}, {
    'name': 'Equatorial Guinea',
    'dial_code': '+240',
    'code': 'GQ'
}, {
    'name': 'Eritrea',
    'dial_code': '+291',
    'code': 'ER'
}, {
    'name': 'Estonia',
    'dial_code': '+372',
    'code': 'EE'
}, {
    'name': 'Ethiopia',
    'dial_code': '+251',
    'code': 'ET'
}, {
    'name': 'Falkland Islands (Malvinas)',
    'dial_code': '+500',
    'code': 'FK'
}, {
    'name': 'Faroe Islands',
    'dial_code': '+298',
    'code': 'FO'
}, {
    'name': 'Fiji',
    'dial_code': '+679',
    'code': 'FJ'
}, {
    'name': 'Finland',
    'dial_code': '+358',
    'code': 'FI'
}, {
    'name': 'France',
    'dial_code': '+33',
    'code': 'FR'
}, {
    'name': 'French Guiana',
    'dial_code': '+594',
    'code': 'GF'
}, {
    'name': 'French Polynesia',
    'dial_code': '+689',
    'code': 'PF'
}, {
    'name': 'Gabon',
    'dial_code': '+241',
    'code': 'GA'
}, {
    'name': 'Gambia',
    'dial_code': '+220',
    'code': 'GM'
}, {
    'name': 'Georgia',
    'dial_code': '+995',
    'code': 'GE'
}, {
    'name': 'Germany',
    'dial_code': '+49',
    'code': 'DE'
}, {
    'name': 'Ghana',
    'dial_code': '+233',
    'code': 'GH'
}, {
    'name': 'Gibraltar',
    'dial_code': '+350',
    'code': 'GI'
}, {
    'name': 'Greece',
    'dial_code': '+30',
    'code': 'GR'
}, {
    'name': 'Greenland',
    'dial_code': '+299',
    'code': 'GL'
}, {
    'name': 'Grenada',
    'dial_code': '+1 473',
    'code': 'GD'
}, {
    'name': 'Guadeloupe',
    'dial_code': '+590',
    'code': 'GP'
}, {
    'name': 'Guam',
    'dial_code': '+1 671',
    'code': 'GU'
}, {
    'name': 'Guatemala',
    'dial_code': '+502',
    'code': 'GT'
}, {
    'name': 'Guernsey',
    'dial_code': '+44',
    'code': 'GG'
}, {
    'name': 'Guinea',
    'dial_code': '+224',
    'code': 'GN'
}, {
    'name': 'Guinea-Bissau',
    'dial_code': '+245',
    'code': 'GW'
}, {
    'name': 'Guyana',
    'dial_code': '+595',
    'code': 'GY'
}, {
    'name': 'Haiti',
    'dial_code': '+509',
    'code': 'HT'
}, {
    'name': 'Holy See (Vatican City State)',
    'dial_code': '+379',
    'code': 'VA'
}, {
    'name': 'Honduras',
    'dial_code': '+504',
    'code': 'HN'
}, {
    'name': 'Hong Kong',
    'dial_code': '+852',
    'code': 'HK'
}, {
    'name': 'Hungary',
    'dial_code': '+36',
    'code': 'HU'
}, {
    'name': 'Iceland',
    'dial_code': '+354',
    'code': 'IS'
}, {
    'name': 'India',
    'dial_code': '+91',
    'code': 'IN'
}, {
    'name': 'Indonesia',
    'dial_code': '+62',
    'code': 'ID'
}, {
    'name': 'Iran, Islamic Republic of',
    'dial_code': '+98',
    'code': 'IR'
}, {
    'name': 'Iraq',
    'dial_code': '+964',
    'code': 'IQ'
}, {
    'name': 'Ireland',
    'dial_code': '+353',
    'code': 'IE'
}, {
    'name': 'Isle of Man',
    'dial_code': '+44',
    'code': 'IM'
}, {
    'name': 'Israel',
    'dial_code': '+972',
    'code': 'IL'
}, {
    'name': 'Italy',
    'dial_code': '+39',
    'code': 'IT'
}, {
    'name': 'Jamaica',
    'dial_code': '+1 876',
    'code': 'JM'
}, {
    'name': 'Japan',
    'dial_code': '+81',
    'code': 'JP'
}, {
    'name': 'Jersey',
    'dial_code': '+44',
    'code': 'JE'
}, {
    'name': 'Jordan',
    'dial_code': '+962',
    'code': 'JO'
}, {
    'name': 'Kazakhstan',
    'dial_code': '+7 7',
    'code': 'KZ'
}, {
    'name': 'Kenya',
    'dial_code': '+254',
    'code': 'KE'
}, {
    'name': 'Kiribati',
    'dial_code': '+686',
    'code': 'KI'
}, {
    'name': 'Korea, Democratic People\'s Republic of',
    'dial_code': '+850',
    'code': 'KP'
}, {
    'name': 'Korea, Republic of',
    'dial_code': '+82',
    'code': 'KR'
}, {
    'name': 'Kuwait',
    'dial_code': '+965',
    'code': 'KW'
}, {
    'name': 'Kyrgyzstan',
    'dial_code': '+996',
    'code': 'KG'
}, {
    'name': 'Lao People\'s Democratic Republic',
    'dial_code': '+856',
    'code': 'LA'
}, {
    'name': 'Latvia',
    'dial_code': '+371',
    'code': 'LV'
}, {
    'name': 'Lebanon',
    'dial_code': '+961',
    'code': 'LB'
}, {
    'name': 'Lesotho',
    'dial_code': '+266',
    'code': 'LS'
}, {
    'name': 'Liberia',
    'dial_code': '+231',
    'code': 'LR'
}, {
    'name': 'Libyan Arab Jamahiriya',
    'dial_code': '+218',
    'code': 'LY'
}, {
    'name': 'Liechtenstein',
    'dial_code': '+423',
    'code': 'LI'
}, {
    'name': 'Lithuania',
    'dial_code': '+370',
    'code': 'LT'
}, {
    'name': 'Luxembourg',
    'dial_code': '+352',
    'code': 'LU'
}, {
    'name': 'Macao',
    'dial_code': '+853',
    'code': 'MO'
}, {
    'name': 'Macedonia, The Former Yugoslav Republic of',
    'dial_code': '+389',
    'code': 'MK'
}, {
    'name': 'Madagascar',
    'dial_code': '+261',
    'code': 'MG'
}, {
    'name': 'Malawi',
    'dial_code': '+265',
    'code': 'MW'
}, {
    'name': 'Malaysia',
    'dial_code': '+60',
    'code': 'MY'
}, {
    'name': 'Maldives',
    'dial_code': '+960',
    'code': 'MV'
}, {
    'name': 'Mali',
    'dial_code': '+223',
    'code': 'ML'
}, {
    'name': 'Malta',
    'dial_code': '+356',
    'code': 'MT'
}, {
    'name': 'Marshall Islands',
    'dial_code': '+692',
    'code': 'MH'
}, {
    'name': 'Martinique',
    'dial_code': '+596',
    'code': 'MQ'
}, {
    'name': 'Mauritania',
    'dial_code': '+222',
    'code': 'MR'
}, {
    'name': 'Mauritius',
    'dial_code': '+230',
    'code': 'MU'
}, {
    'name': 'Mayotte',
    'dial_code': '+262',
    'code': 'YT'
}, {
    'name': 'Mexico',
    'dial_code': '+52',
    'code': 'MX'
}, {
    'name': 'Micronesia, Federated States of',
    'dial_code': '+691',
    'code': 'FM'
}, {
    'name': 'Moldova, Republic of',
    'dial_code': '+373',
    'code': 'MD'
}, {
    'name': 'Monaco',
    'dial_code': '+377',
    'code': 'MC'
}, {
    'name': 'Mongolia',
    'dial_code': '+976',
    'code': 'MN'
}, {
    'name': 'Montenegro',
    'dial_code': '+382',
    'code': 'ME'
}, {
    'name': 'Montserrat',
    'dial_code': '+1664',
    'code': 'MS'
}, {
    'name': 'Morocco',
    'dial_code': '+212',
    'code': 'MA'
}, {
    'name': 'Mozambique',
    'dial_code': '+258',
    'code': 'MZ'
}, {
    'name': 'Myanmar',
    'dial_code': '+95',
    'code': 'MM'
}, {
    'name': 'Namibia',
    'dial_code': '+264',
    'code': 'NA'
}, {
    'name': 'Nauru',
    'dial_code': '+674',
    'code': 'NR'
}, {
    'name': 'Nepal',
    'dial_code': '+977',
    'code': 'NP'
}, {
    'name': 'Netherlands',
    'dial_code': '+31',
    'code': 'NL'
}, {
    'name': 'Netherlands Antilles',
    'dial_code': '+599',
    'code': 'AN'
}, {
    'name': 'New Caledonia',
    'dial_code': '+687',
    'code': 'NC'
}, {
    'name': 'New Zealand',
    'dial_code': '+64',
    'code': 'NZ'
}, {
    'name': 'Nicaragua',
    'dial_code': '+505',
    'code': 'NI'
}, {
    'name': 'Niger',
    'dial_code': '+227',
    'code': 'NE'
}, {
    'name': 'Nigeria',
    'dial_code': '+234',
    'code': 'NG'
}, {
    'name': 'Niue',
    'dial_code': '+683',
    'code': 'NU'
}, {
    'name': 'Norfolk Island',
    'dial_code': '+672',
    'code': 'NF'
}, {
    'name': 'Northern Mariana Islands',
    'dial_code': '+1 670',
    'code': 'MP'
}, {
    'name': 'Norway',
    'dial_code': '+47',
    'code': 'NO'
}, {
    'name': 'Oman',
    'dial_code': '+968',
    'code': 'OM'
}, {
    'name': 'Pakistan',
    'dial_code': '+92',
    'code': 'PK'
}, {
    'name': 'Palau',
    'dial_code': '+680',
    'code': 'PW'
}, {
    'name': 'Palestinian Territory, Occupied',
    'dial_code': '+970',
    'code': 'PS'
}, {
    'name': 'Panama',
    'dial_code': '+507',
    'code': 'PA'
}, {
    'name': 'Papua New Guinea',
    'dial_code': '+675',
    'code': 'PG'
}, {
    'name': 'Paraguay',
    'dial_code': '+595',
    'code': 'PY'
}, {
    'name': 'Peru',
    'dial_code': '+51',
    'code': 'PE'
}, {
    'name': 'Philippines',
    'dial_code': '+63',
    'code': 'PH'
}, {
    'name': 'Pitcairn',
    'dial_code': '+872',
    'code': 'PN'
}, {
    'name': 'Poland',
    'dial_code': '+48',
    'code': 'PL'
}, {
    'name': 'Portugal',
    'dial_code': '+351',
    'code': 'PT'
}, {
    'name': 'Puerto Rico',
    'dial_code': '+1 939',
    'code': 'PR'
}, {
    'name': 'Qatar',
    'dial_code': '+974',
    'code': 'QA'
}, {
    'name': 'Romania',
    'dial_code': '+40',
    'code': 'RO'
}, {
    'name': 'Russia',
    'dial_code': '+7',
    'code': 'RU'
}, {
    'name': 'Rwanda',
    'dial_code': '+250',
    'code': 'RW'
}, {
    'name': 'Réunion',
    'dial_code': '+262',
    'code': 'RE'
}, {
    'name': 'Saint Barthélemy',
    'dial_code': '+590',
    'code': 'BL'
}, {
    'name': 'Saint Helena, Ascension and Tristan Da Cunha',
    'dial_code': '+290',
    'code': 'SH'
}, {
    'name': 'Saint Kitts and Nevis',
    'dial_code': '+1 869',
    'code': 'KN'
}, {
    'name': 'Saint Lucia',
    'dial_code': '+1 758',
    'code': 'LC'
}, {
    'name': 'Saint Martin',
    'dial_code': '+590',
    'code': 'MF'
}, {
    'name': 'Saint Pierre and Miquelon',
    'dial_code': '+508',
    'code': 'PM'
}, {
    'name': 'Saint Vincent and the Grenadines',
    'dial_code': '+1 784',
    'code': 'VC'
}, {
    'name': 'Samoa',
    'dial_code': '+685',
    'code': 'WS'
}, {
    'name': 'San Marino',
    'dial_code': '+378',
    'code': 'SM'
}, {
    'name': 'Sao Tome and Principe',
    'dial_code': '+239',
    'code': 'ST'
}, {
    'name': 'Saudi Arabia',
    'dial_code': '+966',
    'code': 'SA'
}, {
    'name': 'Senegal',
    'dial_code': '+221',
    'code': 'SN'
}, {
    'name': 'Serbia',
    'dial_code': '+381',
    'code': 'RS'
}, {
    'name': 'Seychelles',
    'dial_code': '+248',
    'code': 'SC'
}, {
    'name': 'Sierra Leone',
    'dial_code': '+232',
    'code': 'SL'
}, {
    'name': 'Singapore',
    'dial_code': '+65',
    'code': 'SG'
}, {
    'name': 'Slovakia',
    'dial_code': '+421',
    'code': 'SK'
}, {
    'name': 'Slovenia',
    'dial_code': '+386',
    'code': 'SI'
}, {
    'name': 'Solomon Islands',
    'dial_code': '+677',
    'code': 'SB'
}, {
    'name': 'Somalia',
    'dial_code': '+252',
    'code': 'SO'
}, {
    'name': 'South Africa',
    'dial_code': '+27',
    'code': 'ZA'
}, {
    'name': 'South Georgia and the South Sandwich Islands',
    'dial_code': '+500',
    'code': 'GS'
}, {
    'name': 'Spain',
    'dial_code': '+34',
    'code': 'ES'
}, {
    'name': 'Sri Lanka',
    'dial_code': '+94',
    'code': 'LK'
}, {
    'name': 'Sudan',
    'dial_code': '+249',
    'code': 'SD'
}, {
    'name': 'Suriname',
    'dial_code': '+597',
    'code': 'SR'
}, {
    'name': 'Svalbard and Jan Mayen',
    'dial_code': '+47',
    'code': 'SJ'
}, {
    'name': 'Swaziland',
    'dial_code': '+268',
    'code': 'SZ'
}, {
    'name': 'Sweden',
    'dial_code': '+46',
    'code': 'SE'
}, {
    'name': 'Switzerland',
    'dial_code': '+41',
    'code': 'CH'
}, {
    'name': 'Syrian Arab Republic',
    'dial_code': '+963',
    'code': 'SY'
}, {
    'name': 'Taiwan, Province of China',
    'dial_code': '+886',
    'code': 'TW'
}, {
    'name': 'Tajikistan',
    'dial_code': '+992',
    'code': 'TJ'
}, {
    'name': 'Tanzania, United Republic of',
    'dial_code': '+255',
    'code': 'TZ'
}, {
    'name': 'Thailand',
    'dial_code': '+66',
    'code': 'TH'
}, {
    'name': 'Timor-Leste',
    'dial_code': '+670',
    'code': 'TL'
}, {
    'name': 'Togo',
    'dial_code': '+228',
    'code': 'TG'
}, {
    'name': 'Tokelau',
    'dial_code': '+690',
    'code': 'TK'
}, {
    'name': 'Tonga',
    'dial_code': '+676',
    'code': 'TO'
}, {
    'name': 'Trinidad and Tobago',
    'dial_code': '+1 868',
    'code': 'TT'
}, {
    'name': 'Tunisia',
    'dial_code': '+216',
    'code': 'TN'
}, {
    'name': 'Turkey',
    'dial_code': '+90',
    'code': 'TR'
}, {
    'name': 'Turkmenistan',
    'dial_code': '+993',
    'code': 'TM'
}, {
    'name': 'Turks and Caicos Islands',
    'dial_code': '+1 649',
    'code': 'TC'
}, {
    'name': 'Tuvalu',
    'dial_code': '+688',
    'code': 'TV'
}, {
    'name': 'Uganda',
    'dial_code': '+256',
    'code': 'UG'
}, {
    'name': 'Ukraine',
    'dial_code': '+380',
    'code': 'UA'
}, {
    'name': 'United Arab Emirates',
    'dial_code': '+971',
    'code': 'AE'
}, {
    'name': 'United Kingdom',
    'dial_code': '+44',
    'code': 'GB'
}, {
    'name': 'United States',
    'dial_code': '+1',
    'code': 'US'
}, {
    'name': 'Uruguay',
    'dial_code': '+598',
    'code': 'UY'
}, {
    'name': 'Uzbekistan',
    'dial_code': '+998',
    'code': 'UZ'
}, {
    'name': 'Vanuatu',
    'dial_code': '+678',
    'code': 'VU'
}, {
    'name': 'Venezuela, Bolivarian Republic of',
    'dial_code': '+58',
    'code': 'VE'
}, {
    'name': 'Viet Nam',
    'dial_code': '+84',
    'code': 'VN'
}, {
    'name': 'Virgin Islands, British',
    'dial_code': '+1 284',
    'code': 'VG'
}, {
    'name': 'Virgin Islands, U.S.',
    'dial_code': '+1 340',
    'code': 'VI'
}, {
    'name': 'Wallis and Futuna',
    'dial_code': '+681',
    'code': 'WF'
}, {
    'name': 'Yemen',
    'dial_code': '+967',
    'code': 'YE'
}, {
    'name': 'Zambia',
    'dial_code': '+260',
    'code': 'ZM'
}, {
    'name': 'Zimbabwe',
    'dial_code': '+263',
    'code': 'ZW'
}, {
    'name': 'Åland Islands',
    'dial_code': '+358',
    'code': 'AX'
}];

},{}],43:[function(require,module,exports){
'use strict';

module.exports = {
    enterEmail: {
        en: 'Enter email'
    },
    enterUsername: {
        en: 'Enter user name'
    },
    enterPassword: {
        en: 'Enter password'
    },
    required: {
        en: 'This field is required'
    },
    passwordError: {
        en: 'Atleast one capital,one small,one number and minimum 8 digit'
    },
    invalidPhone: {
        en: 'Invalid phone number'
    },
    email: {
        en: 'Invalid email address'
    },
    enterOtp: {
        en: 'Enter OTP'
    },
    enterOldPassword: {
        en: 'Enter Old Password'
    },
    enterNewPassword: {
        en: 'Enter New Password'
    },
    passwordEqual: {
        en: 'Two passwords do not match.'
    },
    confirmPassword: {
        en: 'Confirm Password'
    },
    noAuthorizeErrorMessage: {
        en: 'You are not authorized to login'
    },
    searchText: {
        en: 'Search by name,email or phone number'
    },
    ownerDetails: {
        en: 'Details of '
    },
    enterFirstName: {
        en: 'Enter First Name'
    },
    enterLastName: {
        en: 'Enter Last Name'
    },
    enterPhoneNumber: {
        en: 'Enter Phone Number'
    },
    enterHouseName: {
        en: 'Enter House Name'
    },
    enterNickName: {
        en: 'Enter Nick Name'
    },
    enterOwnerEmail: {
        en: 'Enter Owner Email'
    },
    enterHouseNumber: {
        en: 'Enter House Number'
    },
    enterStreetAddress: {
        en: 'Enter Street Address'
    },
    enterCity: {
        en: 'Enter City'
    },
    enterZipCode: {
        en: 'Enter Zip Code'
    },
    enterApt: {
        en: 'Enter Apt'
    },
    enterFloorNumber: {
        en: 'Enter Floor Number'
    },
    enterAptNumber: {
        en: 'Enter Apt Number'
    },
    enterGroupName: {
        en: 'Enter Group Name'
    },
    searchUserText: {
        en: 'Search by name,email,apartment number or address'
    },
    searchHouseText: {
        en: 'Search by name,house number or address'
    },
    enterUserEmail: {
        en: 'Enter User Email'
    },
    removeOwnerMessage: {
        en: 'Are you sure you want to remove'
    },
    removeHouseMessage: {
        en: 'Are you sure you want to remove'
    },
    removeAptMessage: {
        en: 'Are you sure you want to remove apt '
    },
    uniqueAptMessage: {
        en: 'Please add a unique apt number.'
    },
    removefloorMessage: {
        en: 'Are you sure you want to remove floor '
    },
    removeGroupMessage: {
        en: 'Are you sure you want to remove group'
    },
    removeUserMessage: {
        en: 'Are you sure you want to remove user'
    },
    OTPSentMessage: {
        en: 'An OTP has been sent to your email id'
    },
    passwordChanged: {
        en: 'Password has been changed successfully'
    },
    houseAddedMessage: {
        en: 'House added successfully'
    },
    addOwnersuccessMessage: {
        en: 'Owner Added successfully.'
    },
    changePasswordSuccessMessage: {
        en: 'Password changed successfully'
    },
    requireAptErrorMessage: {
        en: 'Please add at least one apt in each floor'
    },
    uniqueFloorErrorMessage: {
        en: 'Please add unique floor name'
    },
    requireFloorErrorMessage: {
        en: 'Please add at least one floor'
    },
    houseEditedMessage: {
        en: 'House edited successfully'
    },
    floorAddedSuccessMessage: {
        en: 'Floor added successfully'
    },
    floorUpdateSuccessMessage: {
        en: 'Floor updated successfully'
    },
    floorDeleteSuccessMessage: {
        en: 'Floor removed successfully'
    },
    aptAddSuccessMessage: {
        en: 'Apartment added successfully'
    },
    aptDeleteSuccessMessage: {
        en: 'Apartment deleted successfully'
    },
    requiredHouseMessage: {
        en: 'Please select at least one house'
    },
    groupAddedMessage: {
        en: 'Group added successfully'
    },
    noHouseUnderOwnerMessage: {
        en: 'This owner has no houses , please select any other owner '
    },
    groupDeletedMessage: {
        en: 'Group deleted successfully'
    },
    groupEditedMessage: {
        en: 'Group edited successfully'
    },
    noHouseOnSearchMessage: {
        en: 'No house found'
    },
    uniqueUserEmailErrorMessage: {
        en: 'Please add a unique email'
    },
    noActivationCodeErrorMessage: {
        en: 'Activation code not generated yet'
    },
    houseMappedSuccessMessage: {
        en: 'House and tenant mapped successfully'
    },
    codeGenerateSuccessMessage: {
        en: 'Code generated successfully'
    },
    changeUserStatusMessage: {
        en: 'Are you sure you want to change status of '
    },
    userStatuschangeSuccessMessage: {
        en: 'User status changed successfully'
    },
    houseDeletedMessage: {
        en: 'House deleted successfully'
    },
    houseOwnerDeletedMessage: {
        en: 'House Owner deleted successfully'
    },
    ownerSelectErrorMessage: {
        en: 'Please select owner from list'
    },
    selectOwnerMessage: {
        en: 'Please select any owner'
    },
    removeImageMessage: {
        en: 'Are you sure you want to delete the image '
    }
};
},{}],44:[function(require,module,exports){
'use strict';

module.exports = angular.module('ErticulateAdmin.config', [])
    .constant('AppConfig', require('./config'))
    .constant('AppConstant', require('./constant'))
    .constant('FormMessage', require('./form-message'))
    // .constant('ErrorCode', require('./error-code'))
    .constant('CountryCode', require('./country-code'))
    .constant('API', require('./api'));
},{"./api":39,"./config":40,"./constant":41,"./country-code":42,"./form-message":43}],45:[function(require,module,exports){
'use strict ';
module.exports = angular.module('modules', [
    require('./common').name,
    require('./config').name,
    require('./mentor').name
]);
},{"./common":20,"./config":44,"./mentor":49}],46:[function(require,module,exports){
'use strict';

module.exports = [
    '$state',
    '$rootScope',
    '$scope',
    '$window',
    'toastr',
    'PresentationService',
    'MentorService',
    'AppConfig',
    'getPracticeData',
    function($state, $rootScope, $scope, $window, toastr, PresentationService, MentorService, AppConfig, getPracticeData) {

        var ratingArray = [{
            'value': 0,
            'filled': false
        },{
            'value': 1,
            'filled': false
        }, {
            'value': 2,
            'filled': false
        }, {
            'value': 3,
            'filled': false
        }, {
            'value': 4,
            'filled': false
        }, {
            'value': 5,
            'filled': false
        }];

        $scope.init = function() {
            console.log('login controller init ', getPracticeData);
            console.log(' $rootScope.slides init ', $rootScope.slides);
            if (!$rootScope.slides || $rootScope.presentationId !== $state.params.id) {
                $rootScope.slides = [];
                if (getPracticeData) {
                    console.log('inside if');
                    getPracticeDetail();
                }
            }

            if (!$rootScope.questions || $rootScope.presentationId !== $state.params.id) {
                $rootScope.questions = [{
                    feedbackTitle: 'What you did well?',
                    feedbackType: 1,
                    feedbackText: ''
                }, {
                    feedbackTitle: 'How you can improve?',
                    feedbackType: 2,
                    feedbackText: ''
                }];
            };
            // console.log('$rootScope.grades ', $rootScope.grades);
            if (!$rootScope.grades || $rootScope.presentationId !== $state.params.id) {
                $rootScope.grades = {
                    'introduction': {
                        'heading': 'Introduction',
                        'rating': 0,
                        'feedBack': '',
                        'ratingArray': angular.copy(ratingArray),
                        'id': 'introduction',
                        'isCollapsed': false,
                        'subCategory': {
                            'greeting': {
                                'heading': 'Greeting',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'greeting',
                            },
                            'credibility': {
                                'heading': 'Credibility/Personalization',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'credibility'
                            },
                            'wiifm': {
                                'heading': 'W.I.I.F.M.',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'wiifm'
                            },
                            'funneling': {
                                'heading': 'Funneling',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'funneling'
                            },
                            'rm': {
                                'heading': 'RM',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'rm'
                            },
                            'initialSummary': {
                                'heading': 'Initial Summary',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'initialSummary'
                            }
                        }
                    },
                    'body': {
                        'heading': 'Body',
                        'rating': 0,
                        'feedBack': '',
                        'ratingArray': angular.copy(ratingArray),
                        'id': 'body',
                        'isCollapsed': false,
                        'subCategory': {
                            'topicConcept1': {
                                'heading': 'Topic Concept #1',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'topicConcept1',
                                'subCategory': {
                                    'state': {
                                        'heading': 'State',
                                        'rating': 0,
                                        'feedBack': '',
                                        'ratingArray': angular.copy(ratingArray),
                                        'id': 'state'
                                    },
                                    'define': {
                                        'heading': 'Define',
                                        'rating': 0,
                                        'feedBack': '',
                                        'ratingArray': angular.copy(ratingArray),
                                        'id': 'define'
                                    },
                                    'support': {
                                        'heading': 'Support',
                                        'rating': 0,
                                        'feedBack': '',
                                        'ratingArray': angular.copy(ratingArray),
                                        'id': 'support'
                                    },
                                    'relate': {
                                        'heading': 'Relate',
                                        'rating': 0,
                                        'feedBack': '',
                                        'ratingArray': angular.copy(ratingArray),
                                        'id': 'relate'
                                    }
                                }
                            },
                            'transitionIntegrateLink': {
                                'heading': 'Transition (Integrate/Link)',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'transitionIntegrateLink'
                            },
                            'topicConcept2': {
                                'heading': 'Topic Concept #2',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'topicConcept2',
                                'subCategory': {
                                    'state': {
                                        'heading': 'State',
                                        'rating': 0,
                                        'feedBack': '',
                                        'ratingArray': angular.copy(ratingArray),
                                        'id': 'state'
                                    },
                                    'define': {
                                        'heading': 'Define',
                                        'rating': 0,
                                        'feedBack': '',
                                        'ratingArray': angular.copy(ratingArray),
                                        'id': 'define'
                                    },
                                    'support': {
                                        'heading': 'Support',
                                        'rating': 0,
                                        'feedBack': '',
                                        'ratingArray': angular.copy(ratingArray),
                                        'id': 'support'
                                    },
                                    'relate': {
                                        'heading': 'Relate',
                                        'rating': 0,
                                        'feedBack': '',
                                        'ratingArray': angular.copy(ratingArray),
                                        'id': 'relate'
                                    }
                                }
                            },
                            'transitionInternalSummary': {
                                'heading': 'Transition (Internal Summary)',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'transitionInternalSummary'
                            },
                            'topicConcept3': {
                                'heading': 'Topic Concept #3',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'topicConcept3',
                                'subCategory': {
                                    'state': {
                                        'heading': 'State',
                                        'rating': 0,
                                        'feedBack': '',
                                        'ratingArray': angular.copy(ratingArray),
                                        'id': 'state'
                                    },
                                    'define': {
                                        'heading': 'Define',
                                        'rating': 0,
                                        'feedBack': '',
                                        'ratingArray': angular.copy(ratingArray),
                                        'id': 'define'
                                    },
                                    'support': {
                                        'heading': 'Support',
                                        'rating': 0,
                                        'feedBack': '',
                                        'ratingArray': angular.copy(ratingArray),
                                        'id': 'support'
                                    },
                                    'relate': {
                                        'heading': 'Relate',
                                        'rating': 0,
                                        'feedBack': '',
                                        'ratingArray': angular.copy(ratingArray),
                                        'id': 'relate'
                                    }
                                }
                            }
                        }
                    },
                    'conclusion': {
                        'heading': 'Conclusion',
                        'rating': 0,
                        'feedBack': '',
                        'ratingArray': angular.copy(ratingArray),
                        'id': 'conclusion',
                        'isCollapsed': false,
                        'subCategory': {
                            'brakeLight': {
                                'heading': 'Brake light',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'brakeLight'
                            },
                            'summary': {
                                'heading': 'Summary',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'summary'
                            },
                            'appealToAction': {
                                'heading': 'Appeal to Action/Use',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'appealToAction'
                            }
                        }
                    },
                    'delivery': {
                        'heading': 'Delivery',
                        'rating': 0,
                        'feedBack': '',
                        'ratingArray': angular.copy(ratingArray),
                        'id': 'delivery',
                        'isCollapsed': false,
                        'subCategory': {
                            'conversational': {
                                'heading': 'Conversational',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'conversational'
                            },
                            'rate': {
                                'heading': 'Rate',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'rate'
                            },
                            'volume': {
                                'heading': 'Volume',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'volume'
                            },
                            'eyeContact': {
                                'heading': 'Eye Contact',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'eyeContact'
                            },
                            'bodyLanguage': {
                                'heading': 'Body Language',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'bodyLanguage'
                            },
                            'useOfNotes': {
                                'heading': 'Use of Notes',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'useOfNotes'
                            }
                        }
                    },
                    'useOfVisuals': {
                        'heading': 'Use Of Visuals',
                        'rating': 0,
                        'feedBack': '',
                        'ratingArray': angular.copy(ratingArray),
                        'id': 'useOfVisuals',
                        'isCollapsed': false,
                        'subCategory': {
                            'structure': {
                                'heading': 'Structure',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'structure'
                            },
                            'supporting': {
                                'heading': 'Supporting',
                                'rating': 0,
                                'feedBack': '',
                                'ratingArray': angular.copy(ratingArray),
                                'id': 'supporting'
                            }
                        }
                    }
                };
            }


            $scope.tabs = [{
                'heading': 'Mentor',
                'active': false,
                'link': 'auth.mentor-presenter-list'
            }, {
                'heading': 'Practice',
                'active': false,
                'link': 'auth.dashboard'
            }];
            $scope.selectedTab = $scope.tabs[0];

            if (!$rootScope.feedbackDetails || $rootScope.presentationId !== $state.params.id) {
                $rootScope.feedbackDetails = {
                    ratingArray: angular.copy(ratingArray),
                    overallRating: 0
                };
            }
            $rootScope.presentationId = angular.copy($state.params.id);
            getPresentationDetails();

        };

        $scope.sendFeedback = function() {
          $scope.clicked = true;
            var mandatoryFlag = false;
            $rootScope.questions.forEach(function(each) {
                each.commentedAt = new Date();
                mandatoryFlag = true;
                if (!each.feedbackText) {
                    mandatoryFlag = false;
                }
            });
            if (!$rootScope.feedbackDetails.overallRating) {
                mandatoryFlag = false;
            }
            if (!mandatoryFlag) {
                toastr.error('Please fill up the mandatory fields', 'Error');
                return;
            }

            var data = {
                practiceRef: $state.params.id,
                presentationRef: $scope.presentationID,
                overallRating: $rootScope.feedbackDetails.overallRating,
                optionalGrading: angular.copy($rootScope.grades),
                feedBackArray: angular.copy($rootScope.questions)
            };
            var filterSlide = angular.copy($rootScope.slides);
            filterSlide.forEach(function(each, index) {
                if (each.feedbackText || ($rootScope.feedbackFromWatchArray && $rootScope.feedbackFromWatchArray.length)) {
                    each.commentedAt = new Date();
                    delete each.imageUrl;
                    delete each.isEditable;
                    delete each.isCollapsed;
                    var slideText = '';
                    if ($rootScope.feedbackFromWatchArray && $rootScope.feedbackFromWatchArray.length) {
                        $rootScope.feedbackFromWatchArray.forEach(function(item) {
                            if (item.feedbackTitle === each.id) {
                                slideText = slideText + item.feedbackText + '\n';
                            }
                        });

                    }
                    delete each.id;
                    slideText += each.feedbackText;
                    each.feedbackType = 3;
                    each.feedbackText = slideText;
                    each.feedbackTitle = 'Slide ' + (index + 1);
                    if (each.feedbackText) {
                        data.feedBackArray.push(each);
                    }
                }
            });
            for (var each in data.optionalGrading) {
                delete data.optionalGrading[each].ratingArray;
                delete data.optionalGrading[each].heading;
                delete data.optionalGrading[each].isCollapsed;
                delete data.optionalGrading[each].id;
                if (data.optionalGrading[each].feedBack) {
                    data.optionalGrading[each].commentedAt = new Date();
                }
                for (var each1 in data.optionalGrading[each].subCategory) {
                    delete data.optionalGrading[each].subCategory[each1].ratingArray;
                    delete data.optionalGrading[each].subCategory[each1].heading;
                    delete data.optionalGrading[each].subCategory[each1].isCollapsed;
                    delete data.optionalGrading[each].subCategory[each1].id;
                    // if (!data.optionalGrading[each].subCategory[each1].rating) {
                    //     data.optionalGrading[each].subCategory[each1].rating = data.optionalGrading[each].rating;
                    // }
                    if (data.optionalGrading[each].subCategory[each1].feedBack) {
                      data.optionalGrading[each].subCategory[each1].commentedAt = new Date();
                    }
                    if (data.optionalGrading[each].subCategory[each1].subCategory) {
                        for (var each2 in data.optionalGrading[each].subCategory[each1].subCategory) {
                            delete data.optionalGrading[each].subCategory[each1].subCategory[each2].ratingArray;
                            delete data.optionalGrading[each].subCategory[each1].subCategory[each2].heading;
                            delete data.optionalGrading[each].subCategory[each1].subCategory[each2].isCollapsed;
                            delete data.optionalGrading[each].subCategory[each1].subCategory[each2].id;
                            // if (!data.optionalGrading[each].subCategory[each1].subCategory[each2].rating) {
                            //     data.optionalGrading[each].subCategory[each1].subCategory[each2].rating = data.optionalGrading[each].rating;
                            // }
                            if (data.optionalGrading[each].subCategory[each1].subCategory[each2].feedBack) {
                                data.optionalGrading[each].subCategory[each1].subCategory[each2].commentedAt = new Date();
                            }
                        }
                    }
                }
            }
            console.log('grades in data ', data);
            // return;
            MentorService.addFeedback(data)
                .then(function(response) {
                    console.log('response ', response);
                    toastr.success('Feedback submitted successfully', 'Success');
                    $rootScope.slides = undefined;
                    $rootScope.grades = undefined;
                    $rootScope.questions = undefined;
                    $rootScope.feedbackDetails = undefined;
                    // $rootScope.goBack();
                    $state.go('auth.mentor-presenter-list');
                }, function(error) {
                    toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                });
        };

        $scope.selectTab = function(tab) {
            $scope.selectedTab = tab;
        };

        $scope.collapse = function(slide) {
            slide.isCollapsed = !slide.isCollapsed;
            $rootScope.slides.forEach(function(each) {
                if (each.name !== slide.name) {
                    each.isCollapsed = false;
                }
            });
        };

        function getPracticeDetail() {
            console.log('response in getPracticeDetail ', getPracticeData);
            var filterData = angular.copy(getPracticeData.practiceDetails.slideList);
            $scope.presentationID = getPracticeData.practiceDetails.presentationRef;
            $rootScope.presentationDetails = getPracticeData.presentationDetails;

            $rootScope.practiceDetails = getPracticeData.practiceDetails;
            getPresenterStatistics();
            getPresentationFeedbacks();
            $rootScope.slides = [];
            //Line Updated By Laxminarayana
              filterData.forEach(function(each, index) {
                  var data = {};
                  data.imageUrl = each.imageUrl;
                  data.feedbackText = '';
                  data.isEditable = false;
                  data.isCollapsed = false;
                  data.id = 'Slide ' + (index + 1);
                  $rootScope.slides.push(data);
                  data = {};
              });

        };
        $scope.openAccordion = function(grade) {
            grade.isCollapsed = !grade.isCollapsed;
            for (var each in $rootScope.grades) {
                if ($rootScope.grades[each].heading !== grade.heading) {
                    $rootScope.grades[each].isCollapsed = false;
                }
            }
            // setTimeout(function() {
            //     var id = '#' + grade.heading;
            //     $('html, body').animate({
            //         scrollTop: $(id).offset().top - 120
            //     }, 100);
            // }, 300);
        };
        $scope.modifyRate = function(index, isSub, grade, overAll) {
            console.log('index ', index, grade);
            if (overAll) {
                grade.overallRating = index;
            } else {
                grade.rating = index;
            }
            grade.ratingArray.forEach(function(each) {
                each.filled = false;
                if (each.value <= index) {
                    each.filled = true;
                }
            });
        };

        $scope.fancyTimeFormat = function(time) {
            // Hours, minutes and seconds
            time = Math.round(time);
            var hrs = ~~(time / 3600);
            var mins = ~~((time % 3600) / 60);
            var secs = time % 60;

            // Output like "1:01" or "4:03:59" or "123:03:59"
            var ret = "";

            if (hrs > 0) {
                ret += "" + hrs + ":" + (mins < 10 ? "0" : "");
            }

            ret += "" + mins + ":" + (secs < 10 ? "0" : "");
            ret += "" + secs;
            return ret;
        }

        function getPresentationDetails() {
            $scope.dataLoading = true;
            PresentationService.getPracticeData($state.params.id)
                .then(function(response) {
                    if(response.data && response.data.practiceDetails)
                      $rootScope.practiceDetails = response.data.practiceDetails;
                    getPresenterStatistics();
                    getPresentationFeedbacks();
                }, function(error) {
                    toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                });
        };

        $scope.changeEditable = function(slide) {
            if (slide.feedbackText) {
                slide.isEditable = !slide.isEditable;
            }
        };

        function getPresenterStatistics() {
            let createdByID = "";
            if($rootScope.presentationDetails && $rootScope.presentationDetails.createdBy && $rootScope.presentationDetails.createdBy._id)
              createdByID = $rootScope.presentationDetails.createdBy._id;
            else
              createdByID = $rootScope.presentationDetails.presentationDetails.createdBy._id;
            MentorService.getPresenterStatistics(createdByID)
                .then(function(response) {
                    console.log('response ', response);
                    $scope.userStatistics = response.data;
                }, function(error) {
                    console.log('error ', error);
                }).finally(function() {
                    $scope.dataLoading = false;
                });
        };

        function getTimeFormat(time) {
          let mins = time.split(":")[0];
          let secs = time.split(":")[1].toFixed(1);
          return mins+":"+secs;
        }

        function getPresentationFeedbacks() {
            MentorService.getPresentationFeedbacks(getPracticeData.practiceDetails._id)
                .then(function(response) {
                    console.log('getPresentationFeedbacks ', response);
                    if (response.data.length) { //Line Updated By Laxminarayana
                        $rootScope.feedbackFromWatchArray = response.data;
                        $rootScope.feedbackFromWatchArray.forEach(function(item) {
                          item.timeOffset = getTimeFormat(item.timeOffset);
                        });
                    }
                    // $rootScope.slides = response.data;
                }, function(error) {
                    console.log('error ', error);
                });
        };

        $scope.goToVideoPractice = function(ppt) {
            $state.go('auth.videoMentor', {
                id: ppt._id
            })
        };


        $scope.openSlideVideo = function(slide, ppt) {
            console.log('slide', slide);
            var getSlide = slide.id.split(' ')[1] * 1;
            $rootScope.setSlide = getSlide - 1;
            $scope.goToVideoPractice(ppt);
        };

    }
];

},{}],47:[function(require,module,exports){
'use strict'

module.exports = [
    '$scope',
    '$state',
    'MentorService',
    'PresentationService',
    'toastr',
    'AppConfig',
    'loggedInUser',
    '$rootScope',
    function($scope, $state, MentorService, PresentationService, toastr, AppConfig, loggedInUser, $rootScope) {
        // $scope.collapsed = false;
        //
        $scope.init = function() {
            $scope.viewData = { active: 'feedback' };
            $scope.isEditable = true;
            $scope.activeMenu = false;
            $scope.userId = loggedInUser.getData()._id;
            $scope.userDetails = loggedInUser.getData();
            $scope.presenterFilter = AppConfig.presenterFilter;
            $scope.filterData = {
                filterType: $scope.presenterFilter[0]
            };
            $scope.searchObject = {};
            $scope.searchObject.noFilter = false;

            $scope.statusList = [{
                'name': 'Active',
                'value': 1
            }, {
                'name': 'Inactive',
                'value': 2
            }];

            $scope.grades = {
                'introduction': {
                    'heading': 'Introduction',
                    'id': 'introduction',
                    'isCollapsed': false,
                    'subCategory': {
                        'greeting': {
                            'heading': 'Greeting',
                            'id': 'greeting',
                        },
                        'credibility': {
                            'heading': 'Credibility/Personalization',
                            'id': 'credibility'
                        },
                        'wiifm': {
                            'heading': 'W.I.I.F.M.',
                            'id': 'wiifm'
                        },
                        'funneling': {
                            'heading': 'Funneling',
                            'id': 'funneling'
                        },
                        'rm': {
                            'heading': 'RM',
                            'id': 'rm'
                        },
                        'initialSummary': {
                            'heading': 'Initial Summary',
                            'id': 'initialSummary'
                        }
                    }
                },
                'body': {
                    'heading': 'Body',
                    'id': 'body',
                    'isCollapsed': false,
                    'subCategory': {
                        'topicConcept1': {
                            'heading': 'Topic Concept #1',
                            'id': 'topicConcept1',
                            'subCategory': {
                                'state': {
                                    'heading': 'State',
                                    'id': 'state'
                                },
                                'define': {
                                    'heading': 'Define',
                                    'id': 'define'
                                },
                                'support': {
                                    'heading': 'Support',
                                    'id': 'support'
                                },
                                'relate': {
                                    'heading': 'Relate',
                                    'id': 'relate'
                                }
                            }
                        },
                        'transitionIntegrateLink': {
                            'heading': 'Transition (Integrate/Link)',
                            'id': 'transitionIntegrateLink'
                        },
                        'topicConcept2': {
                            'heading': 'Topic Concept #2',
                            'id': 'topicConcept2',
                            'subCategory': {
                                'state': {
                                    'heading': 'State',
                                    'id': 'state'
                                },
                                'define': {
                                    'heading': 'Define',
                                    'id': 'define'
                                },
                                'support': {
                                    'heading': 'Support',
                                    'id': 'support'
                                },
                                'relate': {
                                    'heading': 'Relate',
                                    'id': 'relate'
                                }
                            }
                        },
                        'transitionInternalSummary': {
                            'heading': 'Transition (Internal Summary)',
                            'id': 'transitionInternalSummary'
                        },
                        'topicConcept3': {
                            'heading': 'Topic Concept #3',
                            'id': 'topicConcept3',
                            'subCategory': {
                                'state': {
                                    'heading': 'State',
                                    'id': 'state'
                                },
                                'define': {
                                    'heading': 'Define',
                                    'id': 'define'
                                },
                                'support': {
                                    'heading': 'Support',
                                    'id': 'support'
                                },
                                'relate': {
                                    'heading': 'Relate',
                                    'id': 'relate'
                                }
                            }
                        }
                    }
                },
                'conclusion': {
                    'heading': 'Conclusion',
                    'id': 'conclusion',
                    'isCollapsed': false,
                    'subCategory': {
                        'brakeLight': {
                            'heading': 'Brake light',
                            'id': 'brakeLight'
                        },
                        'summary': {
                            'heading': 'Summary',
                            'id': 'summary'
                        },
                        'appealToAction': {
                            'heading': 'Appeal to Action/Use',
                            'id': 'appealToAction'
                        }
                    }
                },
                'delivery': {
                    'heading': 'Delivery',
                    'id': 'delivery',
                    'isCollapsed': false,
                    'subCategory': {
                        'conversational': {
                            'heading': 'Conversational',
                            'id': 'conversational'
                        },
                        'rate': {
                            'heading': 'Rate',
                            'id': 'rate'
                        },
                        'volume': {
                            'heading': 'Volume',
                            'id': 'volume'
                        },
                        'eyeContact': {
                            'heading': 'Eye Contact',
                            'id': 'eyeContact'
                        },
                        'bodyLanguage': {
                            'heading': 'Body Language',
                            'id': 'bodyLanguage'
                        },
                        'useOfNotes': {
                            'heading': 'Use of Notes',
                            'id': 'useOfNotes'
                        }
                    }
                },
                'useOfVisuals': {
                    'heading': 'Use Of Visuals',
                    'id': 'useOfVisuals',
                    'isCollapsed': false,
                    'subCategory': {
                        'structure': {
                            'heading': 'Structure',
                            'id': 'structure'
                        },
                        'supporting': {
                            'heading': 'Supporting',
                            'id': 'supporting'
                        }
                    }
                }
            };
            $scope.tabs = [{
                'heading': 'Mentor',
                'active': false,
                'link': 'auth.mentor-presenter-list'
            }, {
                'heading': 'Practice',
                'active': false,
                'link': 'auth.dashboard'
            }];
            $scope.selectedTab = $scope.tabs[0];
            $scope.getPresenterList();
        };

        function getAllMentorNotifications() {
          MentorService.getAllMentorNotifications()
          .then(function(response) {
              console.log('response in notificationList ', response);
              $scope.notificationObject = response.data;
          }, function(error) {
              console.log('error ', error);
          }).finally(function() {
              $scope.practiceListLoading = false;
          });
        };
        $scope.selectTab = function(tab) {
            $scope.selectedTab = tab;
        };
        $scope.openStatistics = function(each) {
            $scope.viewStatistics = true;
            $scope.activeMenu = false;
            $scope.selectedPresenter = each;

            $scope.presenterList.forEach(function(each) {
                each.statisticsOpen = false;
                each.isCollapsed = false;
                each.practiceList.forEach(function(item) {
                    item.isSelected = false;
                });
            });
            $('#selected-extention').hide()
            each.statisticsOpen = true;
            $scope.currentPresenter = each;
            $scope.getPresenterStatistics(each._id);
        };
        $scope.viewFeedback = function(notification, type) {
            $scope.activeMenu = true;
            $scope.viewData = { active: type };
            $scope.currentPresentation = { _id: notification.practiceRef };
            $scope.getPresentationDetails(notification.practiceRef);
        };
        $scope.showPresentations = function(each, index, itemFromNotification) {
            if (!each.isCollapsed) {
                var arr = each.practiceList.filter(function(item) {
                    return item.isSelected;
                });
                if (arr.length) {
                    setTimeout(function() {
                        $('#selected-extention').css({ opacity: 1 });
                    }, 400)
                } else {
                    $('#selected-extention').css({ opacity: 0 });
                }

            } else {
                $('#selected-extention').css({ opacity: 0 });
            }
            $scope.presenterList.forEach(function(each, idx) {
                if (idx !== index) {
                    each.isCollapsed = false;
                }
            });
            each.isCollapsed = !each.isCollapsed;
            if (itemFromNotification) {
                setTimeout(function() {
                    each.practiceList.forEach(function(item1, index1) {
                        if (item1._id === itemFromNotification.presentationRef) {
                            $scope.getSelectedTile(item1, index1, index);
                        }
                    });
                }, 1000);
            }
        };
        $scope.backToNotification = function() {
            $scope.activeMenu = false;
            $scope.viewStatistics = false;
            if ($scope.currentPresenter) {
                $scope.currentPresenter.statisticsOpen = false;
            }
            $scope.presenterList.forEach(function(each) {
                each.isCollapsed = false;
                each.practiceList.forEach(function(item) {
                    item.isSelected = false;
                });
            });
            $('#selected-extention').hide();
        };
        $scope.getSelectedTile = function(presentation, id, parentId) {
            $scope.activeMenu = true;
            $scope.viewStatistics = false;
            $scope.currentPresentation = presentation;
            if ($scope.currentPresenter) {
                $scope.currentPresenter.statisticsOpen = false;
            }
            // console.log('getSelectedTile', presentation, id, parentId);
            $scope.presenterList.forEach(function(each) {
                each.practiceList.forEach(function(item) {
                    item.isSelected = false;
                });
            });
            presentation.isSelected = true;
            var el = $('#tile' + id + parentId);
            // console.log(el.offset());
            $('#selected-extention').css({ top: el.offset().top - $($('.mentor-presenter-list')[0]).offset().top, display: 'block', height: el.outerHeight(), opacity: 1 });

            setTimeout(function() {
                $('html, body').animate({
                    scrollTop: 0
                }, 100);
            }, 500);
            $scope.feedbackSubmitted = presentation.feedbackSubmitted;
            $scope.getPresentationDetails(presentation._id, parentId);
        };

        $scope.getStyle = function(presentation, id, parentId) {
            var el = $('#tile' + id + parentId);
            console.log(el.offset());
            if (el && el.offset()) {
                if (presentation.isSelected) {
                    return { top: el.offset().top, opacity: 1, height: el.outerHeight() };
                } else {
                    return { top: el.offset().top, opacity: 0, height: el.outerHeight() };
                }
            }
        };
        $scope.selectUserType = function(tab) {
            $scope.viewData.active = tab;
        };
        $scope.openAccordion = function(grade, type) {
            grade.isCollapsed = !grade.isCollapsed;
            if (type === 'grade') {
                for (var each in $scope.grades) {
                    if ($scope.grades[each].heading !== grade.heading) {
                        $scope.grades[each].isCollapsed = false;
                    }
                }
                setTimeout(function() {
                    var id = '#' + grade.heading;
                    $('html, body').animate({
                        scrollTop: $(id).offset().top - 120
                    }, 100);
                }, 300);
            } else if (type === 'feedback') {
                $scope.feedbacks.forEach(function(each) {
                    if (each._id !== grade._id) {
                        each.isCollapsed = false;
                    }
                });

            } else if (type === 'slide') {
                $scope.slides.forEach(function(each) {
                    if (each._id !== grade._id) {
                        each.isCollapsed = false;
                    }
                });

            }
        };

        $scope.getPresenterList = function(data) {
            $scope.practiceListLoading = true;
            MentorService.getPresenterList(data)
                .then(function(response) {
                    console.log('p', response);
                    $scope.presenterList = response.data;
                    getAllMentorNotifications();
                    if (!$scope.presenterList.length && !$scope.filterData.filterValue) {
                        $scope.disableSearch = true;
                    } else {
                        $scope.disableSearch = false;
                    }
                }, function(error) {

                });
        };

        function compare(a, b) {
            // Use toUpperCase() to ignore character casing
            const genreA = a._id.toUpperCase();
            const genreB = b._id.toUpperCase();

            var comparison = 0;
            if (genreA > genreB) {
                comparison = 1;
            } else if (genreA < genreB) {
                comparison = -1;
            }
            return comparison;
        }

        $scope.getPresentationDetails = function(id) {
            $scope.presentationDetailsLoading = true;
            $scope.hideGrading = true;
            $scope.feedbacks = [];
            $scope.slides = [];
            PresentationService.getPracticeData(id)
                .then(function(response) {
                    $scope.presentationDetails = response.data.presentationDetails;
                    PresentationService.getFeedbacks({practiceRef: id, presentationRef: $scope.presentationDetails._id})
                    .then(function(response) {
                        $scope.presentationDetails.feedback = response.data;
                        if (!Object.keys($scope.presentationDetails.feedback).length) {
                          $scope.hideGrading = true;
                        }
                        if ($scope.presentationDetails.feedback) {
                            if ($scope.presentationDetails.feedback.comments) {
                                $scope.feedbacks = [];
                                $scope.slides = [];
                                $scope.presentationDetails.feedback.comments.map(function(item, index) {
                                    if (item._id === 'How you can improve?' || item._id === 'What you did well?' || item._id === "How can they improve?" || item._id === "What did they do well?") {
                                        $scope.feedbacks.push(item);
                                    } else {
                                      var splitArray = [];
                                      if(item && item._id) {
                                        splitArray = item._id.split(" ");
                                        if(splitArray.length > 1)
                                          item.index = parseInt(splitArray[1]);
                                      }
                                        $scope.slides.push(item);
                                    }
                                });

                                if ($scope.feedbacks && $scope.feedbacks.length && $scope.feedbacks[0]._id && ($scope.feedbacks[0]._id == 'How you can improve?') || ($scope.feedbacks[0]._id == 'How can they improve?')) {
                                  $scope.feedbacks.reverse();
                                }

                                // $scope.givenFeedback

                                //$scope.slides.sort(compare);

                                if ($scope.slides.length) {
                                    $scope.slides.map(function(slide, slideIndex) {
                                        slide.seen = [];
                                        slide.unseen = [];
                                        slide.open = 0;
                                        if (slide.commenters.length) {
                                            slide.commenters.map(function(commenter, commenterIndex) {
                                                if (commenter.viewedFlag) {
                                                    slide.seen.push(commenter);
                                                } else {
                                                    slide.unseen.push(commenter);
                                                }
                                            });
                                            if (slide.unseen.length) {
                                                slide.hasNewMessage = true;
                                            } else {
                                                slide.viewRead = true;
                                            }
                                        }
                                    });
                                }
                                if ($scope.feedbacks.length) {
                                    $scope.feedbacks.map(function(feedback, feedbackIndex) {
                                        feedback.seen = [];
                                        feedback.unseen = [];
                                        feedback.open = 0;
                                        if (feedback.commenters.length) {
                                            feedback.commenters.map(function(commenter, commenterIndex) {
                                                commenter.ratingArray = angular.copy($scope.ratingArray);
                                                if (commenter.viewedFlag) {
                                                    feedback.seen.push(commenter);
                                                } else {
                                                    feedback.unseen.push(commenter);
                                                }
                                            });
                                            if (feedback.unseen.length) {
                                                feedback.hasNewMessage = true;
                                            } else {
                                                feedback.viewRead = true;
                                            }
                                        }
                                    });
                                }

                                console.log('slide', $scope.slides, $scope.feedbacks);
                            }
                            if ($scope.presentationDetails.feedback.optionalGrading) {
                                $scope.gradeResponse = $scope.presentationDetails.feedback.optionalGrading;
                                for (var item in $scope.gradeResponse) {
                                    if (!$scope.gradeResponse[item].noFeedback) {
                                        $scope.hideGrading = false;
                                        return;
                                    }
                                }
                            }
                        }
                        if($scope.statusList) {
                          $scope.statusList.forEach(function(each) {
                              if (each.value === $scope.presentationDetails.status) {
                                  $scope.presentationDetails.status = each;
                              }
                          });
                        }
                    }, function(error) {
                        toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                    }).finally(function() {
                        $scope.presentationDetailsLoading = false;
                    });
                    $scope.statusList.forEach(function(each) {
                        if (each.value === $scope.presentationDetails.status) {
                            $scope.presentationDetails.status = each;
                        }
                    });
                }, function(error) {
                    toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                }).finally(function() {
                    $scope.presentationDetailsLoading = false;
                });
        };
        $scope.scrollToGrade = function() {
            var div = $('.grades-heading');
            $('html, body').animate({
                scrollTop: $(div).offset().top - 68
            }, 1000);
        };
        $scope.getPresenterStatistics = function(id) {
            $scope.presentationStatisticsLoading = true;
            MentorService.getPresenterStatistics(id)
                .then(function(response) {
                    console.log('response ', response);
                    $scope.userStatistics = response.data;
                }, function(error) {
                    console.log('error ', error);
                }).finally(function() {
                    $scope.presentationStatisticsLoading = false;
                });
        };
        $scope.selectFilter = function() {
            $('#searchInput').blur();
            if ($scope.filterData.filterValue) {
                $scope.activeMenu = false;
                $scope.searchObject.searchHide = true;
                var key = $scope.filterData.filterType.value,
                    data = {

                    };
                data[key] = $scope.filterData.filterValue;
                $scope.getPresenterList(data);
            } else {
                toastr.error('Please enter a keyword to search.');
            }
        };

        $scope.clearFilter = function(noSearch) {
            $scope.searchObject.searchHide = false;

            $scope.filterData.filterValue = '';
            var key = $scope.filterData.filterType.value,
                data = {

                };
            if (key !== 'all') {
                $scope.searchObject.noFilter = false;
                data[key] = $scope.filterData.filterValue;
                if (!noSearch) {
                    $scope.getPresenterList(data);
                } else {
                    if (!$scope.disableSearch && !$scope.presenterList.length) {
                        $scope.getPresenterList(data);
                        // $scope.disableSearch = false;
                    } else if ($scope.disableSearch && !$scope.presenterList.length) {
                        $scope.disableSearch = true;
                    } else {
                        $scope.disableSearch = false;
                    }
                }
            } else {
                $scope.searchObject.noFilter = true;
            }
        };

        $scope.readNotification = function(item) {
            $scope.presentationDetailsLoading = true;
            var data = {
                notificationIds: []
            };
            if (item.presentationRef) {
                $scope.presenterList.forEach(function(each, index) {
                    if (each._id == item.senderRef) {
                        $scope.showPresentations(each, index, item);
                    }
                });
                $scope.viewFeedback(item);
                if (!item.read) {
                    data.notificationIds.push(item.notificationId);
                    PresentationService.readNotification(data)
                        .then(function(response) {
                            console.log('response ', response);
                            item.read = true;
                        }, function(error) {
                            console.log('error ', error);
                        });
                }
            }
        };

        $scope.goToVideoPractice = function(ppt) {
          var id;
          if($scope.currentPresentation) {
            id = $scope.currentPresentation._id;
          } else {
            id = ppt._id;
          }
            $state.go('auth.videoMentor', {
                id: id
            })
        }

        $scope.giveFeedback = function(practice) {
          if(practice.seen) {
            $state.go('auth.add-feedback', {
                id: practice._id
            })
          } else {
            $state.go('auth.videoMentor', {
                id: practice._id
            })
          }
        }


        $scope.openSlideVideo = function(slide, ppt) {
            var getSlide = slide._id.split(' ')[1] * 1;
            $rootScope.setSlide = getSlide - 1;
            $scope.goToVideoPractice(ppt);
        }

    }
];

},{}],48:[function(require,module,exports){
'use strict';

module.exports = [
  '$state',
  '$rootScope',
  '$scope',
  '$window',
  'CommonService',
  'uuid',
  'toastr',
  'AppConfig',
  'fetchPresentation',
  'PresentationService',
  'MentorService',
  '$uibModal',
  'loggedInUser',
  '$interval',
  '$timeout',
  function($state, $rootScope, $scope, $window, CommonService, uuid, toastr, AppConfig, fetchPresentation, PresentationService, MentorService, $uibModal, loggedInUser, $interval, $timeout) {
    var video = document.getElementById('practice-video'), player = videojs('practice-video'),
      intervalPromise,
      seekHandlePos = 0,
      curTime = 0,
      recDur = 0,
      slidePosition = [],
      commentCount,
      allComments = [],
      timer,
      focusTime = 0,
      actualFocusTime = '00:00',
      currentActiveComment = undefined, seekWidth;
      $scope.currentSlide = 0;

    $scope.$on('$destroy', function() {
      $scope.pausePlayToggle('stop');
    })

    $timeout(function() {
      $('.video-section-body').bind('contextmenu', function(e) {
        return false;
      });
    }, 100)

    function fancyTimeFormat(time) {
      // Hours, minutes and seconds
      time = time.toFixed(2);

      var hrs = ~~(time / 3600);
      var mins = ~~((time % 3600) / 59);
      var secs = time % 59;
      secs = secs.toFixed(0);
      // Output like "1:01" or "4:03:59" or "123:03:59"
      var ret = "";

      if (hrs > 0) {
        ret += "" + hrs + ":" + (mins < 10 ? "0" : "");
      }

      ret += "" + mins + ":" + (secs < 10 ? "0" : "");
      ret += "" + secs;
      return ret;
    }

    function slideMarkerSetup() {
      var i, calcPercentage, totalDuration = $scope.practice.duration,
        slideMarker, calcLeft = 0,
        dur = 0,
        seekBar = angular.element('.seek-bar');
      for (i = 0; i < $scope.practice.slideList.length - 1; i++) {
        dur = dur + $scope.practice.slideList[i].duration;
        calcPercentage = dur / totalDuration;
        calcLeft = 209 + (calcPercentage * seekBar.width());
        slidePosition.push(calcLeft);
        slideMarker = angular.element('<div id="slide' + (i + 1) + '" class="slide-marker display-inline-block" style="left: ' + calcLeft + 'px;"></div>');
        angular.element('.bottom-section').append(slideMarker);
        console.log('slide marker setup', seekBar.width());
      }
    }

    function commentMarkerSetup() {
      var i, j, calcLeft, seekBarWidth = angular.element('.seek-bar').width(),
        commentDiv,
        bottomSection = angular.element('.bottom-section'),
        commentCount = 1,
        currentComment;
      for (i = 0; i < $scope.practice.slideList.length; i++) {
        for (j = 0; j < $scope.practice.slideList[i].comments.length; j++) {
          allComments.push($scope.practice.slideList[i].comments[j]);
          currentComment = $scope.practice.slideList[i].comments[j];
          calcLeft = 201 + $scope.practice.slideList[i].comments[j].offset * seekBarWidth / 100;
          commentDiv = angular.element('<div id="comment' + commentCount + '" class="comment-marker display-inline-block" style="left: ' + calcLeft + 'px;"></div>');
          bottomSection.append(commentDiv);
          commentDiv.on('click', currentComment, $scope.mouseOnComment);
          commentCount++;
        }
      }
    }

    $scope.init = function(params) {
      $rootScope.page = 'video';
      $scope.showPage;
      if(fetchPresentation.presentationDetails && fetchPresentation.practiceDetails) {
        $scope.presentation = fetchPresentation.presentationDetails;
        $scope.practice = fetchPresentation.practiceDetails;
      }

      if($scope.practice && $scope.practice.shares) {
        $scope.practice.shares.forEach(function(sharedWith){
          if(sharedWith+"" == ""+loggedInUser.getData()._id)
            $scope.showPage = true;
        });
      }
      if(!$scope.showPage) {
        toastr.error("Invalid URL entered. Our support team has been notified of this error.", 'Error');
        window.location.href = "/#/dashboard";
      }

      $scope.practice = fetchPresentation.practiceDetails;
      $scope.showCommentArea = true;
      $scope.currentTime = "00:00";
      $scope.videoDuration = "00:00";
      $scope.currentLargeSection = 'webcam';
      $scope.calcBackgroundPosition = 0;
      $scope.slide = 0;
      $scope.totalSlides = $scope.practice.slideList.length;
      video.src = $scope.practice.videoUrl;
      $scope.currentSlideImage = $scope.practice.slideList[$scope.slide].imageUrl;
      video.load();
      player.src({src:$scope.practice.videoUrl,type:"video/webm"})
      player.on("waiting", function () {
        $scope.loading = true;
      });
      player.on("playing", function () {
        $scope.loading = false;
      });

      $scope.play = false;

      video.addEventListener('loadedmetadata', function() {
          $scope.duration = Math.round(video.duration);
          $scope.videoDuration = fancyTimeFormat(Math.round($scope.practice.duration));
      });

      video.addEventListener('ended',function() {
        $scope.pausePlayToggle('stop');
      });

      timer = $interval(function() {
        seekWidth = angular.element('.seek-bar').width() ;
        var left = (205 + video.currentTime) * (seekWidth / $scope.practice.duration);

        var index = 0;

        for (var i = 0; i < $scope.practice.slideList.length; i++) {
          if((video.currentTime >= $scope.practice.slideList[i].startTime) && (video.currentTime <= $scope.practice.slideList[i].endTime)) {
            index = i;
          }
          if(video.currentTime == $scope.practice.duration.toFixed(2)) {
            $scope.pausePlayToggle('stop');
          }
        }

        $scope.currentSlideImage = $scope.practice.slideList[index].imageUrl;
        $scope.slide = index;
        if ($scope.slide > 0) {
          //angular.element('.seek-handle').css('left', slidePosition[$scope.slide - 1] + left - 205);
          $scope.calcBackgroundPosition = (recDur + video.currentTime) * 100 / Math.round($scope.practice.duration);
        } else {
          //angular.element('.seek-handle').css('left', left);
          $scope.calcBackgroundPosition = video.currentTime * 100 / Math.round($scope.practice.duration);
        }

      }, 0);

      $timeout(function() {
        slideMarkerSetup();
        commentMarkerSetup();
        if ($rootScope.setSlide) {
            $scope.gotoPosition('slide', $rootScope.setSlide);
        }
      }, 0);

    };

    $scope.pausePlayToggle = function(type) {
      if (type == 'stop') {
        video.pause();
        player.pause();
        $scope.play = false;
        $scope.slide = 0;
        $interval.cancel(intervalPromise);
        $scope.calcBackgroundPosition = 0;
        video.currentTime = 0;
        $scope.videoCompleted = true;
        $scope.currentTime = fancyTimeFormat(recDur + video.currentTime);
      } else if($scope.play) {
        video.pause();
        player.pause();
        $scope.play = false;
        $interval.cancel(intervalPromise);
      } else {
        $scope.play = true;
        video.play();
        player.play();
        intervalPromise = $interval(function() {
            $scope.play = true;
            $scope.currentTime = fancyTimeFormat(recDur + video.currentTime);

        }, 0);
      }
    }

    $scope.gotoPosition = function(e, param) {

      var positionPercent;
      if (e == 'slide') {
        if (param == 0) {
          positionPercent = 0;
        } else {
          positionPercent = (slidePosition[param - 1] - 209) * 100 / angular.element('.seek-bar').width();
        }
      } else {
        positionPercent = e.offsetX * 100 / angular.element('.seek-bar').width();
      }
      var currentTime = positionPercent * $scope.practice.duration / 100,
        currentSlide,
        curTime = positionPercent * $scope.practice.duration / 100;
      // console.log('currentTime', currentTime, $scope.duration);
      var recurringDuration = 0;
      for (var i = 0; i < $scope.practice.slideList.length; i++) {
        recurringDuration = recurringDuration + $scope.practice.slideList[i].duration;
        currentSlide = i;
        if (i > 0) {
          currentTime = currentTime - recurringDuration + $scope.practice.slideList[i].duration;
          recDur = recurringDuration - $scope.practice.slideList[i].duration;
        } else {
          currentTime = currentTime;
          recDur = 0;
        }

        $scope.slide = i;
        video.pause();
        $interval.cancel(intervalPromise);

        $scope.currentSlideImage = $scope.practice.slideList[$scope.slide].imageUrl;
        video.currentTime = currentTime;
        player.currentTime(currentTime);
        $scope.currentTime = fancyTimeFormat(curTime);
        $scope.play = false;
        $scope.pausePlayToggle();
        break;
      }

    }

    $scope.playSlideVideo = function() {
      $scope.currentSlideImage = $scope.practice.slideList[$scope.slide].imageUrl;

      // video.play();
      // $scope.play = true;
      $timeout(function() {
          $scope.pausePlayToggle();
      }, 0)
    }

    $scope.swapSection = function(param) {
      if (param !== $scope.currentLargeSection) {
        $scope.currentLargeSection = param;
      }
    }

    $scope.goToPreviousSlide = function() {

      if ($scope.slide !== 0) {
        $scope.gotoPosition('slide', $scope.slide - 1);
      }
    }

    $scope.goToNextSlide = function() {

      if ($scope.slide + 1 !== $scope.totalSlides) {
        $scope.gotoPosition('slide', $scope.slide + 1);
      }
    }

    $scope.postComment = function(keyEvent) {
      focusTime = $scope.calcBackgroundPosition;
      actualFocusTime = $scope.currentTime;
      var bottomSection = angular.element('.bottom-section'),
        seekBarWidth = angular.element('.seek-bar').width(),
        commentObj = {},
        commentCount = allComments.length + 1;
      if (keyEvent.which === 13) {
        console.log($scope.comment);
        $scope.comment = $scope.comment.trim();
        if ($scope.comment.length) {
          $scope.commentDisabled = true;
          var calcLeft = 201 + focusTime * seekBarWidth / 100,
            commentDiv;
          commentObj.comment = $scope.comment;
          commentObj.dateTime = new Date();
          commentObj.offset = focusTime;
          commentObj.timeOffset = actualFocusTime;
          commentObj.practiceRef = $scope.practice._id;
          commentObj.index = $scope.slide;
          commentCount++;
          MentorService.postComment(commentObj).then(function(data) {
            console.log('data');
            commentDiv = angular.element('<div id="comment' + commentCount + '" class="comment-marker display-inline-block" style="left: ' + calcLeft + 'px;"></div>');
            bottomSection.append(commentDiv);
            allComments.push(commentObj);
            var commentText = angular.copy($scope.comment);
            commentDiv.on('click', {
              _id: commentCount,
              offset: calcLeft,
              comment: commentText
            }, $scope.mouseOnComment);
            commentCount++;
            $scope.commentDisabled = false;
            $scope.comment = "";
          }, function(error) {
            console.log('comment post error', error);
            $scope.commentDisabled = false;
          })
        }

      }
    }

    // $scope.getCommentFocusTime = function() {
    //   console.log('calcBackgroundPosition', $scope.calcBackgroundPosition);
    //   focusTime = $scope.calcBackgroundPosition;
    //   actualFocusTime = $scope.currentTime;
    // }

    $scope.mouseOnComment = function(e) {
      var flag = false;
      console.log('mouse on comment', e);
      if (currentActiveComment) {
        if (currentActiveComment._id == e.data._id) {
          console.log('time to hide');
          flag = true;
        }
      }
      currentActiveComment = angular.copy(e.data);
      angular.element('.down-pointer').remove();
      var commentContainer = angular.element('.comment-container'),
        calcPercentage = e.data.offset * angular.element('.seek-bar').width() / 100;
      if (flag) {
        commentContainer.css({
          'opacity': '0'
        });
        currentActiveComment._id = 1;
      } else {
        $scope.currentComment = e.data.comment;
        setTimeout(function() {
          commentContainer.css({
            'left': e.pageX - 97,
            'opacity': '1'
          });
          commentContainer.append('<div class="down-pointer"></div>');
        }, 10)
      }


    };

    $scope.goBack = function() {
      $state.go('auth.mentor-presenter-list');
    };

    $scope.giveFeedbackRedirect = function(id) {
      if(!$scope.videoCompleted) {
        $scope.currentVideoId = id;
        $scope.redirectConfirmModalInstance = $uibModal.open({
          templateUrl: 'resources/templates/feedback-redirect-confirmation-modal.html',
          size: 'md',
          backdrop: true,
          backdrop: 'static',
          keyboard: false,
          scope: $scope
        });
      } else {
        $state.go('auth.add-feedback', {
          id: id
        });
      }
    };

    $scope.redirectRecording = function() {
      $state.go('auth.add-feedback', {
        id: $scope.currentVideoId
      });
    }
  }
];

},{}],49:[function(require,module,exports){
'use strict';
// Module defination as well as defination for all the directives, controllers for this modules

module.exports = angular.module('modules.mentor', [
        'ui.router'
    ])
    .service('MentorService', require('./services/mentor-service'))
    // .controller('loginCtrl', require('./controllers/loginCtrl'))
    // .controller('profileCtrl', require('./controllers/profileCtrl'))
    // .controller('dashboardHtmlCtrl', require('./controllers/loginCtrl'))
    // .controller('feedbackCtrl', require('./controllers/feedback-notification-controller'))
    .controller('addFeedback', require('./controllers/add-feedback-controller'))
    .controller('mentorPresenterListCtrl', require('./controllers/mentor-presenter-list-controller'))
    .controller('videoMentorCtrl', require('./controllers/video-mentor'))
    // .filter('starRating', require('./filters/star-rating-filter'))
    .config(require('./router/route'));
},{"./controllers/add-feedback-controller":46,"./controllers/mentor-presenter-list-controller":47,"./controllers/video-mentor":48,"./router/route":50,"./services/mentor-service":51}],50:[function(require,module,exports){
module.exports = ['$stateProvider',
    '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {
        $stateProvider
            .state('auth.add-feedback', {
                url: '/add-feedback/:id',
                type: 'auth',
                role: 'mentor',
                template: require('../templates/add-feedback.html'),
                controller: 'addFeedback',
                resolve: {
                    getPracticeData: ['$q', '$stateParams', 'PresentationService', 'toastr', function($q, $stateParams, PresentationService, toastr) {
                        var defer = $q.defer();
                        PresentationService.getPracticeData($stateParams.id)
                            .then(function(response) {
                                // console.log('response in getPracticeData ', response);
                                if (response.data.practiceDetails && response.data.practiceDetails.giveFeedback) {
                                    defer.resolve(response.data);
                                } else {
                                    toastr.error('You have already given feedback to this presentation practice.', 'Error');
                                    window.location.href = "/#/mentor-presenter-list";
                                    defer.reject();
                                }
                            }, function(error) {
                                toastr.error(AppConfig.errorCode[error.errorCode], 'Error');
                                defer.reject(error);
                            });

                        return defer.promise;
                    }]
                }
            })
            .state('auth.mentor-presenter-list', {
                url: '/mentor-presenter-list',
                type: 'auth',
                role: 'mentor',
                template: require('../templates/mentor-presenter-list.html'),
                controller: 'mentorPresenterListCtrl'
            })
            .state('auth.videoMentor', {
                url: '/mentor/:id',
                type: 'auth',
                template: require('../templates/video-mentor.html'),
                controller: 'videoMentorCtrl',
                resolve: {
                    fetchPresentation: ['$q', '$stateParams', 'PresentationService', function($q, $stateParams, PresentationService) {
                        var defer = $q.defer();
                        PresentationService.getPracticeData($stateParams.id).then(function(data) {
                            console.log('data', data);
                            defer.resolve(data.data);
                        }, function(error) {
                            console.log('error', error);
                            defer.reject(error);
                        })

                        return defer.promise;
                    }]
                }
            });
    }
];

},{"../templates/add-feedback.html":52,"../templates/mentor-presenter-list.html":53,"../templates/video-mentor.html":54}],51:[function(require,module,exports){
'use strict';

module.exports = [
    'HttpService',
    'API',
    function(HttpService, API) {

        function addFeedback(data) {
            var apiObject = {
                url: API.addFeedback,
                data: data,
                method: 'POST'
            };
            return HttpService
                .apiRequest(apiObject);
        }


        function getPresenterStatistics(id) {
            var apiObject = {
                url: API.getPresenterStatistics + id,
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function getPresentationFeedbacks(id) {
            var apiObject = {
                url: API.getPresentationFeedbacks + id,
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function getPresenterList(data) {
            var apiObject = {
                url: API.getPresenterList,
                params: data
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function getAllMentorNotifications() {
            var apiObject = {
                url: API.getAllMentorNotifications
            };
            return HttpService
                .apiRequest(apiObject);
        }

        function postComment(data) {
            var apiObject = {
                url: API.postComment,
                data: data,
                method: 'POST'
            };
            return HttpService
                .apiRequest(apiObject);
        }

        return {
            addFeedback: addFeedback,
            getPresenterStatistics: getPresenterStatistics,
            getPresenterList: getPresenterList,
            getAllMentorNotifications: getAllMentorNotifications,
            postComment: postComment,
            getPresentationFeedbacks: getPresentationFeedbacks
        };
    }
];
},{}],52:[function(require,module,exports){
module.exports = "<div class=\"section-body add-feedback\" ng-init=init()><div class=content-section-container><div class=content-section-heading-{{$index+1}} ng-class=\"{'border-top-left-radius-0':$index==1,'border-top-right-radius-0':$index==0,'active-background-color':selectedTab.heading==tab.heading}\" ng-repeat=\"tab in tabs\" ng-click=selectTab(tab) ui-sref={{tab.link}}>{{tab.heading}}</div><div class=\"panel-container row margin0\" ng-if=!dataLoading><div class=\"main-panel-heading ppt-details col-xs-12 padding-0\"><div class=\"margin-top-10 display-inline-block\"><img src=./resources/images/back-black.png class=\"margin-right-10 cursor-pointer\" ng-click=goBack()> <span>Add Feedback</span></div><div class=\"send-feedback-button hover-btn pull-right cursor-default display-inline-block background-color-light-blue\" ng-if=\"!questions[0].feedbackText || !questions[1].feedbackText || !feedbackDetails.overallRating && !clicked\"><img src=./resources/images/slide-feedback-send-white.png class=width-20> <span>Send Feedback</span></div><div class=\"send-feedback-button hover-btn cursor-pointer pull-right display-inline-block xbackground-color-light-blue\" ng-click=sendFeedback() ng-if=\"questions[0].feedbackText && questions[1].feedbackText && feedbackDetails.overallRating && !clicked\"><img src=./resources/images/slide-feedback-send.png class=width-20> <span>Send Feedback</span></div><div class=\"text-right col-xs-12 padding-right-0 margin-bottom-20 font-12\" ng-if=\"!questions[0].feedbackText || !questions[1].feedbackText || !feedbackDetails.overallRating\">Please complete all mandatory fields to submit feedback.</div></div><div class=\"col-xs-12 padding-0 mentor-presnter-list-container\"><div class=\"col-xs-12 presenter-presentation-details border-radius-10\"><div class=\"col-xs-6 presenter-details\"><div ng-if=presentationDetails.createdBy.profileImage class=\"presenter-image col-xs-2 padding-left-0\" style=\"background-image:url('{{presentationDetails.createdBy.profileImage}}')\"></div><div ng-if=!presentationDetails.createdBy.profileImage class=\"presenter-image col-xs-2 padding-left-0\" style=\"background-image:url('./resources/images/default-user.png')\"></div><div class=\"col-xs-8 padding-right-0\"><p class=presenter-name>{{presentationDetails.createdBy.firstName}} {{presentationDetails.createdBy.lastName}}</p><div class=presenter-info>Presentations Loaded: {{userStatistics.pptCount || '0'}}</div><div class=presenter-info>Feedback Received: {{userStatistics.feedbackCount || '0'}}</div><div class=presenter-info ng-if=userStatistics.averagePracticeTime>Average Practice Time: {{(userStatistics.averagePracticeTime/60).toFixed(2)}} mins.</div><div class=presenter-info ng-if=!userStatistics.averagePracticeTime>Average Practice Time: 0 mins.</div><div class=presenter-info>Practice Sessions: {{userStatistics.practiceCount || '0'}}</div></div><div class=vertical-border></div></div><div class=\"col-xs-6 presentation-details\"><div class=\"presentation-thumbnail col-xs-5 padding-left-0\" style=\"background-image:url({{picUrl + presentationDetails.imageList[0]}})\" ng-click=goToVideoPractice(practiceDetails)><img src=./resources/images/slide-play.png class=cursor-pointer></div><div class=\"col-xs-7 padding-right-0\"><p class=presenter-name>{{presentationDetails.title}}</p><div class=presenter-info>{{presentationDetails.createDate | date:'MMM d, yyyy h:mm a'}}</div><div class=presenter-info>{{presentationDetails.clientName}}</div><div class=presenter-info>{{presentationDetails.productName}}</div></div></div></div><div class=\"col-xs-6 left-panel width-47 padding-0\"><div class=\"sub-heading col-xs-12\"><img src=./resources/images/mandatory.png class=margin-right-10> <span class=\"vertical-align-middle font-family-Lato-bold\">Mandatory</span></div><div class=\"col-xs-12 mandatory-fields\"><div class=\"form-group padding-top-bottom-10 margin-bottom-0\"><label class=mandatory-heading><span class=mandatory-star>*</span>Rate the Presentation <i class=\"fa fa-question-circle info\"><span class=\"infotext infotext-right\">Click the number of stars associated to your rating of the presentation. To remove the rating, click Reset.</span></i></label><div class=stars><span ng-repeat=\"star in feedbackDetails.ratingArray\"><label class=reset ng-if=\"$index == 0\" ng-click=modifyRate(0,false,feedbackDetails,true)>Reset</label>&nbsp;&nbsp; <img src=./resources/images/rate.png ng-if=\"!star.filled && $index > 0\" class=\"transform-img cursor-pointer\" ng-click=modifyRate($index,false,feedbackDetails,true)> <img src=./resources/images/rate-select.png ng-if=\"star.filled && $index > 0\" class=\"transform-img cursor-pointer\" ng-click=modifyRate($index,false,feedbackDetails,true)></span> <span class=\"pull-right star-info\">You Rated {{feedbackDetails.overallRating}} Stars</span></div></div><div class=\"form-group padding-top-bottom-10 margin-bottom-0\" ng-repeat=\"question in questions track by $index\"><label class=mandatory-heading ng-if=\"$index == 0\"><span class=mandatory-star>*</span>What they did well? <i class=\"fa fa-question-circle info\"><span class=\"infotext infotext-right\">Highlight the areas where the presenter did well. These are items you want to reinforce for the presenter to keep in their presentation.</span></i></label><label class=mandatory-heading ng-if=\"$index == 1\"><span class=mandatory-star>*</span>How they can improve? <i class=\"fa fa-question-circle info\"><span class=\"infotext infotext-right\">Highlight areas for improvement for the presenter. Consider areas where the presenter can improve. Examples include the quality of the slides, presentation style, pace, tone, connection with the audience and word choice.</span></i></label><textarea class=\"form-control border-radius-0\" rows=5 placeholder=\"Write your comments...\" ng-model=question.feedbackText></textarea></div><div class=mandatory-info><span class=mandatory-star>*</span> These are mandatory fields</div></div><div class=\"sub-heading col-xs-12\"><img src=./resources/images/optional.png class=margin-right-10> <span class=\"vertical-align-middle font-family-Lato-bold\">Optional</span></div><div class=\"col-xs-12 grade\"><div class=\"col-xs-12 padding-0 margin-bottom-20 grade-heading\">Grades</div><div class=\"grade-content col-xs-12 margin-bottom-20\" ng-repeat=\"grade in grades\"><div class=\"col-xs-12 padding-0\"><div class=\"col-xs-12 grade-tile\" ng-class=\"{'border-bottom-0':!grade.isCollapsed}\"><div class=\"col-xs-1 padding-left-0\"><img src=./resources/images/grades.png></div><div class=\"col-xs-11 padding-right-0 grade-name\">{{grade.heading}} <img src=./resources/images/accordion-collapse.png class=\"pull-right cursor-pointer\" ng-if=grade.isCollapsed ng-click=openAccordion(grade)> <img src=./resources/images/accordion-expand.png ng-if=!grade.isCollapsed class=\"pull-right cursor-pointer\" ng-click=openAccordion(grade)></div></div><div uib-collapse=!grade.isCollapsed class=\"col-xs-12 padding-0 grade-collapse width-auto\"><div class=\"col-xs-12 padding-0 width-auto\"><div class=\"form-group col-xs-12 padding-top-20 padding-left-20 margin-bottom-0\"><label class=mandatory-heading>Rate {{grade.heading}}</label><div class=stars><span ng-repeat=\"star in grade.ratingArray\"><label class=reset ng-if=\"$index == 0\" ng-click=modifyRate(0,false,grade)>Reset</label>&nbsp;&nbsp; <img src=./resources/images/rate.png ng-if=\"!star.filled && $index > 0\" class=cursor-pointer ng-click=modifyRate($index,false,grade)> <img src=./resources/images/rate-select.png ng-if=\"star.filled && $index > 0\" class=cursor-pointer ng-click=modifyRate($index,false,grade)></span> <span class=\"pull-right star-info\">You Rated {{grade.rating}} Stars</span></div></div><div class=\"form-group col-xs-12 padding-top-20 padding-left-20 grade-comment\"><input type=text class=form-control name=comment placeholder=\"Write your comments...\" ng-model=grade.feedBack></div></div><div class=\"col-xs-12 padding-0 subcategory\" ng-if=grade.subCategory ng-repeat=\"sub in grade.subCategory\"><div class=\"col-xs-12 subcategory-heading\">{{sub.heading}} <i class=\"fa fa-question-circle info\" ng-if=\"sub.heading == 'W.I.I.F.M.'\"><span class=\"infotext infotext-right\">What’s In It For Me (WIIFM) - How well did the presenter communicate what is important to the audience? As an audience member, did the presenter clearly articulate the importance to you?</span></i> <i class=\"fa fa-question-circle info\" ng-if=\"sub.heading == 'Funneling'\"><span class=\"infotext infotext-right\">How well did the presenter set expectation early in their presentation? Did they establish guideposts early so audience members understand the flow of their presentation?</span></i> <i class=\"fa fa-question-circle info\" ng-if=\"sub.heading == 'RM'\"><span class=\"infotext infotext-right\">RM stands for residual message. Did the presenter quickly establish a simple, concise message for audience members to remember? How effectively did they reinforce that residual message in the presentation?</span></i> <i class=\"fa fa-question-circle info\" ng-if=\"sub.heading == 'Brake light'\"><span class=\"infotext infotext-right\">How well did the presenter transition to their conclusion statement(s)?</span></i> <i class=\"fa fa-question-circle info\" ng-if=\"sub.heading == 'Appeal to Action/Use'\"><span class=\"infotext infotext-right\">If the presenter had a request for the audience, how well did they position that request?</span></i> <i class=\"fa fa-question-circle info\" ng-if=\"sub.heading == 'Rate'\"><span class=\"infotext infotext-right\">Rate means the pace or tempo of the presentation delivery. How effective was the pace of the presentation? Did the tempo keep you engaged and allow you to follow their message?</span></i></div><div class=\"col-xs-12 width-auto subcategory-content\"><div class=\"form-group col-xs-12 padding-top-20 padding-left-20 margin-bottom-0\"><label class=mandatory-heading>Rate {{sub.heading}}</label><div class=stars><span ng-repeat=\"rate in sub.ratingArray\"><label class=reset ng-if=\"$index == 0\" ng-click=modifyRate(0,true,sub)>Reset</label>&nbsp;&nbsp; <img src=./resources/images/rate.png ng-if=\"!rate.filled && $index > 0\" class=cursor-pointer ng-click=modifyRate($index,true,sub)> <img src=./resources/images/rate-select.png ng-if=\"rate.filled && $index > 0\" class=cursor-pointer ng-click=modifyRate($index,false,sub)></span> <span class=\"pull-right star-info\">You Rated {{sub.rating}} Stars</span></div></div><div class=\"form-group col-xs-12 padding-top-20 padding-left-20 grade-comment\"><input type=text class=form-control name=comment placeholder=\"Write your comments...\" ng-model=sub.feedBack></div></div><div class=\"col-xs-12 padding-0 subcategory width-auto second-sub-category\" ng-if=sub.subCategory ng-repeat=\"subcat in sub.subCategory\"><div class=\"col-xs-12 subcategory-heading\">{{subcat.heading}}</div><div class=\"col-xs-12 padding-0 width-auto subcategory-content\"><div class=\"form-group col-xs-12 padding-top-20 padding-left-20 margin-bottom-0\"><label class=mandatory-heading>Rate {{subcat.heading}}</label><div class=stars><span ng-repeat=\"rate in subcat.ratingArray\"><label class=reset ng-if=\"$index == 0\" ng-click=modifyRate(0,true,subcat)>Reset</label>&nbsp;&nbsp; <img src=./resources/images/rate.png ng-if=\"!rate.filled && $index > 0\" class=cursor-pointer ng-click=modifyRate($index,true,subcat)> <img src=./resources/images/rate-select.png ng-if=\"rate.filled && $index > 0\" class=cursor-pointer ng-click=modifyRate($index,false,subcat)></span> <span class=\"pull-right star-info\">You Rated {{subcat.rating}} Stars</span></div></div><div class=\"form-group col-xs-12 padding-top-20 padding-left-20 grade-comment\"><input type=text class=form-control name=comment placeholder=\"Write your comments...\" ng-model=subcat.feedBack></div></div></div></div></div></div></div></div></div><div class=\"sub-heading col-xs-6 pull-right width-47\"><img src=./resources/images/slides-overview.png class=margin-right-10> <span class=\"vertical-align-middle font-family-Lato-bold\">Slides Overview</span></div><div class=\"col-xs-6 right-panel pull-right width-47\"><div class=slide-content ng-repeat=\"slide in slides\"><div class=\"col-xs-12 slide-tile\"><div class=\"col-xs-12 padding-0\"><div class=\"col-xs-3 slide-thumbnail\" ng-style=\"{'background-image':'url({{picUrl + practiceDetails.slideList[$index].imageUrl}})'}\" ng-click=\"openSlideVideo(slide, practiceDetails)\"><img src=./resources/images/slide-play.png class=cursor-pointer></div><div class=\"col-xs-9 slide-name-content\"><div class=\"col-xs-6 padding-left-0 slide-name\">Slide {{$index+1}}</div><div class=\"col-xs-6 padding-right-0 give-feedback-link cursor-pointer\" ng-if=!slide.isCollapsed ng-click=collapse(slide)>Give Feedback</div><div class=\"col-xs-6 padding-right-0 give-feedback-link cursor-pointer\" ng-click=collapse(slide) ng-if=slide.isCollapsed>Hide</div></div></div><div uib-collapse=!slide.isCollapsed class=\"col-xs-12 padding-0\"><div class=\"form-group slide-comment pos-relative\"><div class=horizontal-border></div><div class=\"col-xs-12 padding-0 margin-bottom-10\"><div class=\"col-xs-12 font-13 margin-bottom-5 padding0 color-gray\" ng-repeat=\"feedback in feedbackFromWatchArray\" ng-if=\"feedback.feedbackTitle===slide.id && feedbackFromWatchArray.length\"><div class=\"col-xs-2 padding0\">{{feedback.timeOffset}}</div><div class=\"col-xs-10 padding-left-0\">{{feedback.feedbackText}}</div></div></div><input type=text class=form-control name=comment placeholder=\"Write your comments...\" ng-model=slide.feedbackText ng-disabled=slide.isEditable> <img src=./resources/images/slide-feedback-send.png class=\"send-edit-feedback-image cursor-pointer\" ng-if=!slide.isEditable ng-click=changeEditable(slide)> <img src=./resources/images/slide-feedback-edit.png class=\"send-edit-feedback-image cursor-pointer\" ng-if=slide.isEditable ng-click=changeEditable(slide)></div></div></div></div></div></div></div><div class=\"text-center table-loading margin-top-20\" ng-show=dataLoading><i class=\"fa fa-spinner fa-spin spinner-loader\"></i> &nbsp; <span class=spinner-text>Loading presentation details and presenter statistics...</span></div></div></div>";

},{}],53:[function(require,module,exports){
module.exports = "<div class=section-body ng-init=init()><div class=content-section-container><div class=content-section-heading-{{$index+1}} ng-class=\"{'active-background-color':selectedTab.heading==tab.heading}\" ng-repeat=\"tab in tabs\" ng-click=selectTab(tab) ui-sref={{tab.link}}>{{tab.heading}}</div><div class=\"panel-container row\"><div class=col-sm-6><div class=\"main-panel-heading filters\">Filters</div><div class=main-panel-body><form name=searchFrom ui-form=selectFilter><label for=select-filter></label><select name=select-filter class=form-control ng-options=\"status.name for status in presenterFilter\" ng-model=filterData.filterType ng-change=clearFilter(true)></select><label for=search></label><input name=search id=searchInput class=\"form-control outline-none\" placeholder=\"Search by Keyword\" ng-model=filterData.filterValue ng-disabled=\"searchObject.noFilter\"><div xng-if=!searchObject.searchHide ng-click=selectFilter() class=\"cursor-pointer color-blue input-group-addon search-presentation\"><i class=\"fa fa-search\"></i></div></form><div class=\"row margin0\" ng-if=\"presenterList.length && !practiceListLoading\"><div class=\"col-sm-12 padding-left-0\"><div class=mentor-presenter-list><div class=each-presenter ng-repeat=\"each in presenterList\"><div class=\"overflow-reset presenter-wrapper cursor-pointer\" ng-class=\"{'opened-wrapper':each.isCollapsed}\" ng-click=showPresentations(each,$index)><div class=\"pull-left presenter-image\"><img ng-src={{picUrl+each.profileImage}} ng-if=each.profileImage width=50 height=50> <img src=./resources/images/default-user.png ng-if=!each.profileImage width=50 height=50></div><div class=\"pull-left presenter-name\">{{each.firstName+' '+each.lastName}}</div><div class=\"pull-right selection-images cursor-pointer\"><img src=./resources/images/presenter-status.png class=chart-icon ng-click=openStatistics(each);$event.stopPropagation(); ng-if=!each.statisticsOpen> <img src=./resources/images/presenter-status-select.png class=chart-icon ng-if=each.statisticsOpen> <img src=./resources/images/accordion-expand.png class=collapse-icon xng-click=showPresentations(each,$index) ng-if=!each.isCollapsed> <img src=./resources/images/accordion-collapse.png class=collapse-icon xng-click=showPresentations(each,$index) ng-if=each.isCollapsed></div></div><div uib-collapse=!each.isCollapsed class=presentation-list><div class=presentation-tile-list><div class=tile-wrapper ng-repeat=\"presentation in each.practiceList | orderBy: '-createDate'\"><div class=\"presentation-tile word-break padding-top-15 cursor-pointer\" id=tile{{$index}}{{$parent.$index}} ng-class=\"{'selected-tile':presentation.isSelected}\" ng-click=\"getSelectedTile(presentation,$index, $parent.$index)\"><div class=overflow-reset><div class=presentation-image ng-click=goToVideoPractice(presentation)><img ng-src={{picUrl+presentation.presentationImage}}> <img src=./resources/images/slide-play.png ng-click=\"\" class=\"cursor-pointer slide-play-image\"></div><div class=presentaion-desc><div class=\"presentaion-title div-ellipsis\">{{presentation.title}}</div><div class=\"client-name div-ellipsis\"><b>Project:</b> {{presentation.clientName}}</div><div class=\"grey-text height-20\"><b>Note:</b> {{presentation.productName | limitTo: 32 }}{{presentation.productName.length > 32 ? '...' : ''}}</div><div class=font13><div class=overflow-reset><span class=pull-left ng-bind-html=presentation.avgRating|starRating></span><div class=\"pull-right view-mentors-link cursor-default\" ng-if=\"presentation.fromMentors>0\">From {{presentation.fromMentors}} <span ng-if=\"presentation.fromMentors==1\">Mentor</span><span ng-if=\"presentation.fromMentors>1\">Mentors</span></div></div><div class=\"pull-left grey-text\">{{presentation.createDate|date:'MMM d, yyyy h:mm a'}}</div><div ng-click=giveFeedback(presentation) class=\"pull-right cursor-pointer practice-link\" ng-if=!presentation.feedbackSubmitted>Give feedback</div><div class=\"pull-right cursor-pointer practice-link\" ng-if=presentation.feedbackSubmitted ng-click=\"viewData.active='feedback'\">View feedback</div></div></div></div><div class=thankyou-note ng-if=presentation.thankedFlag>{{each.firstName+' '+each.lastName}} thanked you for your feedback.</div></div></div></div></div></div><div class=show-details id=selected-extention xng-style=getStyle(presentation,$index,$parent.$index)><img src=./resources/images/right-arrow-white.png></div></div></div></div><div class=\"col-xs-12 padding-left-0 margin-top-10\"><div class=\"margin-bottom-0 text-center no-ppt\" ng-if=\"!presenterList.length && !practiceListLoading\"><img class=margin-bottom-20 src=./resources/images/no-presentation.png width=50><div ng-if=disableSearch><div class=no-ppt-text><div>Hi {{erticulateUserData.firstName}}, it seems no one has shared</div><div>a presentation with you.</div></div></div><div ng-if=!disableSearch><div class=no-ppt-text><div>Hi {{erticulateUserData.firstName}}, it seems there is no</div><div>presentation for this search.</div></div></div></div></div><div class=\"text-center table-loading margin-top-10\" ng-show=practiceListLoading><i class=\"fa fa-spinner fa-spin spinner-loader\"></i> &nbsp; <span class=spinner-text>Loading presenter list...</span></div></div></div><div class=col-sm-6><div class=\"main-panel-heading ppt-details\"><img src=./resources/images/feedback-notification.png class=margin-right-10 ng-show=\"!activeMenu && !viewStatistics\"> <span ng-show=\"!activeMenu && !viewStatistics\">Feedback Notifications</span> <img src=./resources/images/back-black.png class=\"cursor-pointer margin-right-10\" ng-click=backToNotification() ng-show=\"activeMenu && !viewStatistics\"> <span ng-show=\"activeMenu && !viewStatistics\">Presentation Details</span> <img src=./resources/images/back-black.png class=\"cursor-pointer margin-right-10\" ng-click=backToNotification() ng-show=\"!activeMenu && viewStatistics\"> <span ng-show=\"!activeMenu && viewStatistics\">Presenter Statistics</span></div><div class=main-panel-body ng-if=!presentationDetailsLoading><div class=\"row margin0\"><div class=\"col-sm-12 padding-0\"><div class=\"feedback-notification-container ml-0 mt-20\" ng-class=\"{'border-0':practiceListLoading || (!notificationObject.length && !practiceListLoading),'padding0':!notificationObject.length && !practiceListLoading}\" ng-if=\"!activeMenu && !viewStatistics\"><div class=feedback-notification-header ng-repeat=\"item in notificationObject | orderBy: '-date'\" ng-if=notificationObject.length><div class=margin-bottom-50><span class=header-date>{{item._id}}</span><hr></div><div class=feedback-list ng-repeat=\"item1 in item.notifications \"><div class=\"each-feedback overflow-reset\"><div class=\"user-image pos-relative\"><img ng-if=\"item1.senderProfileImage \" ng-src=\"{{picUrl + item1.senderProfileImage}}\" width=40 height=40> <img ng-if=\"!item1.senderProfileImage \" src=./resources/images/default-user.png width=40 height=40><div class=new-feedback-dot ng-if=!item1.read></div></div><div class=feedback><div class=content ng-if=\"item1.notificationType===3\"><span class=mentor-name>{{item1.senderFirstName+' '+item1.senderLastName}}</span> shared <span class=presentation-name>{{item1.presentationTitle}}</span> with you <span ng-if=item1.message>with the following message '<span class=presentation-name>{{item1.message}}'.</span></span></div><div class=content ng-if=\"item1.notificationType===4\"><span class=mentor-name>{{item1.senderFirstName+' '+item1.senderLastName}}</span> thanked you for your feedback on <span class=presentation-name>{{item1.presentationTitle}}.</span></div><div class=content ng-if=\"item1.notificationType===5\"><span class=mentor-name>{{item1.senderFirstName+' '+item1.senderLastName}}</span> rated your feedback on <span class=presentation-name>{{item1.presentationTitle}}.</span></div><div class=overflow-reset><div class=\"pull-left date-time\">{{item1.createDate | date:'MMM d, yyyy h:mm a'}}</div><div class=pull-right><a class=view-feedback-link ng-click=\"viewFeedback(item1, 'feedback')\" ng-if=\"item1.notificationType!==3\">View Feedback</a> <a class=view-feedback-link ng-click=\"viewFeedback(item1, 'details')\" ng-if=\"item1.notificationType===3\">View Details</a></div></div></div></div></div></div><div class=\"col-xs-12 padding-0\" ng-if=\"!notificationObject.length && !practiceListLoading\"><div class=\"no-feedback-ppt margin-right-10 margin-left-10 text-center\"><img class=margin-bottom-20 src=./resources/images/no-feedback.png width=50 height=50><div class=no-ppt-text><div>No feedback notification present.</div></div></div></div></div><div class=\"col-xs-12 mt-20 presentation-details-container padding-0\" ng-if=\"activeMenu && !viewStatistics\"><div class=\"col-xs-12 top-fixed-bar\"><div class=\"col-xs-6 padding-left-0\"><div class=navmenu ng-click=\"selectUserType('feedback')\" ng-class=\"{'active': viewData.active==='feedback'}\">Feedback</div><div class=navmenu ng-click=\"selectUserType('details')\" ng-class=\"{'active': viewData.active==='details'}\">Properties</div><div class=active-marker ng-class=\"{'details':viewData.active==='details'}\"></div></div><div class=\"col-xs-6 text-align-right padding-left-right-0 padding-top-15\" ng-if=\"viewData.active==='feedback'\"><div class=\"display-inline-block col-xs-7 padding-right-0 padding-top-5\"><img src=./resources/images/info.png ng-click=scrollToGrade() class=cursor-pointer ng-if=\"!hideGrading && currentPresentation.giveFeedback\"></div><div class=\"col-xs-5 padding-0 font-12\" ng-if=\"presentationDetails.feedback && presentationDetails.feedback.comments.length\"><div ng-bind-html=\"presentationDetails.avgRating | starRating:'avgRating'\" class=\"display-inline-block font-16\"></div><div class=avg-rating-text>Average Rating</div></div></div></div><div class=\"col-xs-12 padding-0 presentation-details-section\" ng-if=\"viewData.active==='details'\"><div class=\"col-xs-12 bottom-scrollable-content\" ng-if=\"viewData.active==='details'\"><div class=\"col-xs-12 padding0 min-height-350 mentor-presentation-thumbnail\" ng-click=goToVideoPractice(presentationDetails)><img class=display-slide ng-src={{picUrl+presentationDetails.imageList[0]}}><div class=play-video-icon><img src=./resources/images/video-play.png></div></div><div class=\"col-xs-12 padding-0 margin-bottom-30 presentation-details\"><div class=\"col-xs-12 presentation-details\"><div class=\"col-xs-4 padding-left-0 details-heading\">Presenter Name</div><div class=\"form-group margin-bottom-0 col-xs-8 padding-right-0\"><span ng-bind=\"presentationDetails.createdBy.firstName + ' '+ presentationDetails.createdBy.lastName\"></span> <img ng-src=\"{{picUrl + presentationDetails.createdBy.profileImage}}\" class=presenter-profile-image></div></div><div class=\"col-xs-12 presentation-details\"><div class=\"col-xs-4 padding-left-0 details-heading\">Presentation Title</div><div class=\"form-group margin-bottom-0 col-xs-8 padding-right-0 word-break\"><span ng-bind=presentationDetails.title></span></div></div><div class=\"col-xs-12 presentation-details\"><div class=\"col-xs-4 padding-left-0 details-heading\">Project</div><div class=\"form-group margin-bottom-0 col-xs-8 padding-right-0\"><span ng-bind=\"presentationDetails.clientName || 'N/A'\"></span></div></div><div class=\"col-xs-12 presentation-details\"><div class=\"col-xs-4 padding-left-0 details-heading\">Note</div><div class=\"form-group margin-bottom-0 col-xs-8 padding-right-0\"><span ng-bind=\"presentationDetails.productName || 'N/A'\"></span></div></div><div class=\"col-xs-12 presentation-details\"><div class=\"col-xs-4 padding-left-0 details-heading\">Create Date</div><div class=\"col-xs-8 padding-right-0\" ng-bind=\"presentationDetails.createDate | date:'MMM d, yyyy h:mm a'\"></div></div><div class=\"col-xs-12 presentation-details\"><div class=\"col-xs-4 padding-left-0 details-heading\">Rating</div><div class=\"col-xs-8 padding-right-0\"><span ng-bind-html=\"presentationDetails.avgRating | starRating\"></span></div></div></div></div></div><div class=\"col-xs-12 padding-0\" ng-if=\"viewData.active==='feedback'\"><div class=\"col-xs-12 mentor-presnter-list-container bottom-scrollable-content\" ng-if=\"viewData.active==='feedback' && feedbackSubmitted\"><div class=\"grade-content col-xs-12 margin-bottom-20\" ng-repeat=\"feedback in feedbacks\" ng-if=feedback.commenters.length><div class=\"col-xs-12 grade-tile\" ng-class=\"{'border-bottom-0':!feedback.isCollapsed}\"><div class=\"col-xs-1 padding-left-0\"><img src=./resources/images/mandatory-question.png></div><div class=\"col-xs-11 padding-right-0 grade-name\">{{feedback._id}} <img src=./resources/images/accordion-collapse.png class=\"pull-right cursor-pointer\" ng-if=feedback.isCollapsed ng-click=\"openAccordion(feedback,'feedback')\"> <img src=./resources/images/accordion-expand.png ng-if=!feedback.isCollapsed class=\"pull-right cursor-pointer\" ng-click=\"openAccordion(feedback,'feedback')\"></div></div><div uib-collapse=!feedback.isCollapsed class=\"col-xs-12 grade-collapse xwidth-auto\"><div class=\"col-xs-12 question-comments\" ng-repeat=\"comment in feedback.commenters\"><div class=\"col-xs-12 padding-top-40 padding-left-0 padding-right-0 pos-relative\"><div class=border-repeat></div><div class=commented-by-date-content ng-style=\"{'background-image':'url({{picUrl + comment.profileImage}})'}\" ng-if=comment.profileImage></div><div class=commented-by-date-content ng-style=\"{'background-image':'url(./resources/images/default-user.png)'}\" ng-if=!comment.profileImage></div><div class=border-repeat-bottom ng-if=\"$index==feedback.commenters.length-1\"></div><div ng-bind=\"comment.firstName+' '+comment.lastName\" class=commented-by></div><div ng-bind=\"comment.commentedAt|date:'MMM d, yyyy h:mm a'\" class=commented-date></div></div><div class=\"col-xs-12 comment border-repeat-feedback\" ng-bind-html=comment.text|breakFilter></div><div class=\"col-xs-12 thanked-by\" ng-if=comment.thankedFlag><div class=border-repeat-thank></div>{{presentationDetails.createdBy.firstName + ' '+ presentationDetails.createdBy.lastName}} thanked <span ng-if=\"comment.userRef!==userId\">{{comment.firstName}} {{comment.lastName}}</span><span ng-if=\"comment.userRef==userId\">you</span>.</div><div class=\"col-xs-12 text-right\" ng-if=comment.ratingOnMentorsComment><span ng-bind-html=\"comment.ratingOnMentorsComment|starRating:'presenter'\"></span></div></div></div></div><div class=\"col-xs-12 slide-heading\" ng-if=slides.length>Presentation Slides</div><div class=\"grade-content col-xs-12 margin-bottom-20\" ng-repeat=\"slide in slides\"><div class=\"col-xs-12 slide-tile\" ng-class=\"{'border-bottom-0':!slide.isCollapsed}\"><div class=\"col-xs-4 padding-left-0\"><div class=\"slide-thumbnail padding0 col-xs-12\" ng-style=\"{'background-image':'url({{picUrl+presentationDetails.imageList[slide.index - 1]}})'}\" xxng-if=slide.slideUrl><img src=./resources/images/slide-play.png ng-click=\"openSlideVideo(slide, presentationDetails)\" class=\"cursor-pointer slide-play-image\"></div></div><div class=\"col-xs-8 padding0 grade-name\"><div class=\"col-xs-11 padding0\">{{slide._id}}</div><img src=./resources/images/accordion-collapse.png class=\"mt-10 pull-right cursor-pointer\" ng-if=slide.isCollapsed ng-click=\"openAccordion(slide,'slide')\"> <img src=./resources/images/accordion-expand.png ng-if=!slide.isCollapsed class=\"pull-right cursor-pointer mt-10\" ng-click=\"openAccordion(slide,'slide')\"><div class=\"col-xs-11 padding0 feedback-count\">{{slide.commenters.length}} Comment<span ng-if=\"slide.commenters.length>1\">s</span> Received</div></div></div><div uib-collapse=!slide.isCollapsed class=\"col-xs-12 grade-collapse xwidth-auto\"><div class=\"col-xs-12 question-comments\" ng-repeat=\"comment in slide.commenters\"><div class=\"col-xs-12 padding-top-40 padding-left-0 padding-right-0 pos-relative\"><div class=border-repeat></div><div class=commented-by-date-content ng-style=\"{'background-image':'url({{picUrl + comment.profileImage}})'}\" ng-if=\"comment.profileImage && slide.isCollapsed\"></div><div class=commented-by-date-content ng-style=\"{'background-image':'url(./resources/images/default-user.png)'}\" ng-if=!comment.profileImage></div><div class=border-repeat-bottom ng-if=\"$index==slide.commenters.length-1\"></div><div ng-bind=\"comment.firstName+' '+comment.lastName\" class=commented-by></div><div ng-bind=\"comment.commentedAt|date:'MMM d, yyyy h:mm a'\" class=commented-date></div></div><div class=\"col-xs-12 comment border-repeat-feedback\" ng-bind-html=comment.text|breakFilter></div></div></div></div><div class=\"col-xs-12 grades-heading\" ng-if=!hideGrading>Grades</div><div class=\"grade-content col-xs-12 margin-bottom-20\" ng-repeat=\"grade in grades\" ng-if=!gradeResponse[grade.id].noFeedback><div class=\"col-xs-12 padding0\"><div class=\"col-xs-12 grade-tile\" ng-class=\"{'border-bottom-0':!grade.isCollapsed}\"><div class=\"col-xs-1 padding-left-0\"><img src=./resources/images/grades.png></div><div class=\"col-xs-11 padding-right-0 grade-name\"><div class=\"col-xs-6 padding-left-0\" id={{grade.heading}}>{{grade.heading}}</div><div class=\"col-xs-5 text-right padding0\" ng-bind-html=\"gradeResponse[grade.id].rating| starRating\" ng-if=gradeResponse[grade.id].rating></div><img src=./resources/images/accordion-collapse.png class=\"mt5 pull-right cursor-pointer\" ng-if=grade.isCollapsed ng-click=\"openAccordion(grade,'grade')\"> <img src=./resources/images/accordion-expand.png ng-if=!grade.isCollapsed class=\"mt5 pull-right cursor-pointer\" ng-click=\"openAccordion(grade,'grade')\"></div></div><div uib-collapse=!grade.isCollapsed class=\"col-xs-12 padding0 grade-info-collapse xwidth-auto\"><div class=\"col-xs-12 padding-left-0 padding-right-0 padding-bottom-20 xwidth-auto\"><div class=\"col-xs-12 grade-comments\" ng-repeat=\"comment in gradeResponse[grade.id].comments\"><div class=\"col-xs-12 padding-top-20 padding-left-0 padding-right-0 pos-relative\"><div class=horizontal-marker></div><div class=\"view-comment-profile-image col-xs-2 padding-left-0\" ng-style=\"{'background-image':'url({{picUrl + comment.userPic}})'}\" ng-if=comment.userPic></div><div class=\"col-xs-10 padding0\"><div ng-bind=comment.userName class=\"commented-by mt5 col-xs-12\"></div><div class=\"col-xs-12 font-weight-100\" ng-bind=comment.text></div></div></div></div></div><div class=\"col-xs-12 padding-left-0 padding-right-0 comment-subcategory\" ng-repeat=\"sub in grade.subCategory\" ng-if=\"grade.subCategory && (gradeResponse[grade.id].subCategory[sub.id].rating || gradeResponse[grade.id].subCategory[sub.id].comments.length)\"><div class=\"col-xs-8 comment-subcategory-heading\">{{sub.heading}}</div><div class=\"col-xs-4 padding0 font-17\" ng-bind-html=\"gradeResponse[grade.id].subCategory[sub.id].rating| starRating\" ng-if=gradeResponse[grade.id].subCategory[sub.id].rating></div><div class=\"col-xs-12 xwidth-auto comment-subcategory-content\"><div class=\"col-xs-12 grade-comments\" ng-repeat=\"comment in gradeResponse[grade.id].subCategory[sub.id].comments\"><div class=\"col-xs-12 padding-top-20 padding-left-0 padding-right-0 pos-relative\"><div class=horizontal-marker></div><div class=\"view-comment-profile-image col-xs-2 padding-left-0\" ng-style=\"{'background-image':'url({{picUrl + comment.userPic}})'}\" ng-if=comment.userPic></div><div class=\"col-xs-10 padding0\"><div ng-bind=comment.userName class=\"commented-by mt5 col-xs-12\"></div><div class=\"col-xs-12 font-weight-100\" ng-bind=comment.text></div></div></div></div></div><div class=\"col-xs-12 padding0 comment-subcategory xwidth-auto comment-second-sub-category\" ng-if=\"sub.subCategory && gradeResponse[grade.id].subCategory[sub.id].subCategory[subcat.id].rating\" ng-repeat=\"subcat in sub.subCategory\"><div class=\"col-xs-7 comment-subcategory-heading\">{{subcat.heading}}</div><div class=\"col-xs-5 width-auto padding-right-0 padding-left-10 font-17\" ng-bind-html=\"gradeResponse[grade.id].subCategory[sub.id].subCategory[subcat.id].rating | starRating\" ng-if=gradeResponse[grade.id].subCategory[sub.id].subCategory[subcat.id].rating></div><div class=\"col-xs-12 padding0 xwidth-auto comment-subcategory-content\"><div class=\"col-xs-12 grade-comments\" ng-repeat=\"comment in gradeResponse[grade.id].subCategory[sub.id].subCategory[subcat.id].comments\"><div class=\"col-xs-12 padding-top-20 padding-left-0 padding-right-0 pos-relative\"><div class=horizontal-marker></div><div class=\"view-comment-profile-image col-xs-2 padding-left-0\" ng-style=\"{'background-image':'url({{picUrl + comment.userPic}})'}\" ng-if=comment.userPic></div><div class=\"col-xs-10 padding0\"><div ng-bind=comment.userName class=\"commented-by mt5 col-xs-12\"></div><div class=\"col-xs-12 font-weight-100\" ng-bind=comment.text></div></div></div></div></div></div></div></div></div></div></div><div class=\"col-xs-12 padding-0\"><div class=\"margin-right-10 margin-left-10 text-center feedback-section\" ng-if=\"(viewData.active==='feedback' && !feedbackSubmitted)\"><div class=\"col-xs-12 feedback-presentation\" ng-click=goToVideoPractice(presentationDetails)><img class=presentation-view-image ng-src={{picUrl+presentationDetails.imageList[0]}}><div class=play-video-icon><img src=./resources/images/video-play.png></div></div><div ng-if=presentationDetails.feedback.overallRatingCount class=\"col-xs-12 color-gray\">{{presentationDetails.feedback.overallRatingCount}} mentor<span ng-if=\"presentationDetails.feedback.overallRatingCount>1\">s</span> <span ng-if=\"presentationDetails.feedback.overallRatingCount>1\">have</span> <span ng-if=\"presentationDetails.feedback.overallRatingCount==1\">has</span> provided feedback.</div><div class=\"col-xs-12 padding0 color-gray\" ng-if=presentationDetails.feedback.overallRatingCount>Give feedback to see their feedback.</div><div class=\"col-xs-12 padding0 color-gray\" ng-if=!presentationDetails.feedback.overallRatingCount>No mentor has given feedback.</div><div class=\"no-feedback-view col-xs-12\"><div class=\"presentation-give-feedback-button hover-btn cursor-pointer\" ng-click=giveFeedback(currentPresentation)><img src=./resources/images/mandatory-white.png> <span>Give Feedback</span></div></div></div></div></div></div><div class=\"col-xs-12 mt-20 presenter-statistics\" ng-if=\"!activeMenu && viewStatistics && !presentationStatisticsLoading\"><div class=col-xs-12><div class=\"col-xs-12 presenter-statistics-presenter-image text-align-center\"><img ng-src={{picUrl+selectedPresenter.profileImage}} height=100><div class=presenter-name>{{selectedPresenter.firstName+' '+selectedPresenter.lastName}}</div></div></div><div class=\"col-xs-12 padding-0 margin-bottom-30\"><div class=\"col-xs-12 presentation-details\"><div class=\"col-xs-6 padding-left-0 details-heading\">Presentations Loaded</div><div class=\"form-group details-value margin-bottom-0 col-xs-6 padding-right-0\"><span>{{userStatistics.pptCount || '0'}}</span></div></div><div class=\"col-xs-12 presentation-details\"><div class=\"col-xs-6 padding-left-0 details-heading\">Feedback Received</div><div class=\"form-group details-value margin-bottom-0 col-xs-6 padding-right-0\"><span>{{userStatistics.feedbackCount || '0'}}</span></div></div><div class=\"col-xs-12 presentation-details\"><div class=\"col-xs-6 padding-left-0 details-heading\">Average Practice Time</div><div class=\"form-group details-value margin-bottom-0 col-xs-6 padding-right-0\"><span ng-if=userStatistics.averagePracticeTime>{{(userStatistics.averagePracticeTime/60).toFixed(2)}} mins</span> <span ng-if=!userStatistics.averagePracticeTime>0 mins</span></div></div><div class=\"col-xs-12 presentation-details\"><div class=\"col-xs-6 padding-left-0 details-heading\">Practice Sessions</div><div class=\"col-xs-6 details-value padding-right-0\"><span>{{userStatistics.practiceCount || '0'}}</span></div></div></div></div></div></div></div><div class=\"text-center table-loading margin-top-20\" ng-show=presentationDetailsLoading><i class=\"fa fa-spinner fa-spin spinner-loader\"></i> &nbsp; <span class=spinner-text>Loading presentation details and feedback...</span></div><div class=\"text-center table-loading margin-top-20\" ng-show=presentationStatisticsLoading><i class=\"fa fa-spinner fa-spin spinner-loader\"></i> &nbsp; <span class=spinner-text>Loading presentation statistics...</span></div><div class=\"text-center table-loading margin-top-20\" ng-show=practiceListLoading><i class=\"fa fa-spinner fa-spin spinner-loader\"></i> &nbsp; <span class=spinner-text>Loading notifications...</span></div></div></div></div></div>";

},{}],54:[function(require,module,exports){
module.exports = "<div class=\"section-header row\" ng-init=init()><div class=col-xs-3><div class=\"back-btn-container background-center\" nnui-sref=auth.mentor-presenter-list ng-click=goBack()></div></div><div class=\"col-xs-6 text-center\"><div class=ppt-name>{{presentation.title}}</div></div><div class=\"col-xs-3 text-right\" xng-if=false><div class=\"btn background-center feedback-btn text-white\" nnui-sref=auth.add-feedback({id:practice._id}) ng-click=giveFeedbackRedirect(practice._id) ng-if=practice.giveFeedback>Give Feedback</div></div></div><br><div class=\"video-section-body mentor-watch\" ng-init=init()><div class=\"slide-image-container height-100 background-center\"><div class=left-section ng-class=\"{'swap-left-section' : currentLargeSection == 'slide'}\" ng-click=\"swapSection('webcam')\" tooltip-placement=\"'top'\" uib-tooltip=\"Set as active window\" tooltip-enable=\"currentLargeSection!='webcam'\"><div ng-click=pausePlayToggle() ng-if=!play style=\"display: block; z-index: 1000; left: 50%; top: 50%; position: absolute; border-radius: 50%; padding: 10px;color: white\"><i class=\"fa fa-play fa-3x\"></i></div><div ng-if=loading style=\"display: block; z-index: 1000 !important; left: 50%; top: 50%; position: absolute; border-radius: 50%; padding: 10px;color: white\"><i class=\"fa fa-circle-o-notch fa-spin fa-2x\"></i></div><video id=practice-video class=\"video-js vjs-default-skin vjs-big-play-centered\"></video><video id=mentor_video style=\"display: none !important\"></video></div><div class=right-section ng-class=\"{'swap-right-section' : currentLargeSection == 'slide'}\" ng-click=\"swapSection('slide')\" style=\"background-image: url('{{currentSlideImage}}')\" tooltip-placement=\"'top'\" uib-tooltip=\"Set as active window\" tooltip-enable=\"currentLargeSection!='webcam'\"></div><div class=bottom-section><div class=play-btn ng-click=pausePlayToggle() ng-class=\"{'pause': !play , 'play': play}\"></div><div class=\"current-time display-inline-block text-white\">{{currentTime}}</div><div class=\"seek-bar display-inline-block\" ng-click=gotoPosition($event) style=\"background: linear-gradient(90deg,#ff6634 {{calcBackgroundPosition}}%,#aaa {{calcBackgroundPosition}}%)\"></div><div class=\"comment-container text-white display-inline-block\">{{currentComment}}<div class=down-pointer></div></div><div class=\"total-time display-inline-block text-white\">{{videoDuration}}</div><div class=\"right-area-container display-inline-block height-100\"><div class=\"prev-slide-marker display-inline-block\" ng-click=goToPreviousSlide()></div><div class=\"slide-current-status display-inline-block text-white\">Slide {{slide+1}} of {{totalSlides}}</div><div class=\"next-slide-marker display-inline-block\" ng-click=goToNextSlide()></div><div class=\"comment-btn display-inline-block\" ng-click=\"showCommentArea=!showCommentArea\"></div><div class=\"comment-type-area display-inline-block\" ng-if=showCommentArea><textarea class=\"text-white comment-input\" type=text placeholder=\"Write your comments...\" ng-model=$parent.comment ng-keypress=postComment($event) ng-disabled=commentDisabled>\n                    </textarea><div class=\"post-comment cursor-pointer\" ng-click=\"postComment({which: 13})\"></div><div class=down-pointer></div></div></div></div></div></div>";

},{}],55:[function(require,module,exports){
'use strict';

function getDateString(config) {
    var date = new Date(config.date),
        dateObject, months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];


    dateObject = {
        dd: date.getDate(),
        mm: date.getMonth() + 1,
        yy: date.getFullYear(),
        HH: date.getHours(),
        MN: date.getMinutes(),
        SS: date.getSeconds(),
    };

    if (dateObject.HH > 11) {
        dateObject.hh = 12 + dateObject.HH - 24;
        dateObject.AMPM = 'PM';
    } else {
        dateObject.hh = dateObject.HH;
        dateObject.AMPM = 'AM';
    }

    //find occurance of A exactly 1 times
    if (!/A{2}/i.test(config.format)) {
        config.format = config.format.replace(/A/ig, dateObject.AMPM);
    }

    //find occurance of s at least one and not more than 2
    if (/s+/i.test(config.format) && !(/s{3}/i.test(config.format))) {
        if (/s{2}/i.test(config.format)) {
            //find occurance of s exactly 2 times
            config.format = config.format.replace(/ss/ig, dateObject.SS > 9 ? dateObject.SS : '0' + dateObject.SS);
        } else {
            //find occurance of s exactly 1 times
            config.format = config.format.replace(/s/ig, dateObject.SS);
        }
    }

    //find occurance of h at least one and not more than 2
    if (/h+/.test(config.format) && !(/h{3}/.test(config.format))) {
        if (/h{2}/.test(config.format)) {
            //find occurance of h exactly 2 times
            config.format = config.format.replace(/hh/g, dateObject.hh > 9 ? dateObject.hh : '0' + dateObject.hh);
        } else {
            //find occurance of h exactly 1 times
            config.format = config.format.replace(/h/g, dateObject.hh);
        }
    }

    //find occurance of H at least one and not more than 2
    if (/H+/.test(config.format) && !(/H{3}/.test(config.format))) {
        if (/H{2}/.test(config.format)) {
            //find occurance of H exactly 2 times
            config.format = config.format.replace(/HH/g, dateObject.HH > 9 ? dateObject.HH : '0' + dateObject.HH);
        } else {
            //find occurance of H exactly 1 times
            config.format = config.format.replace(/HH/g, dateObject.HH);
        }
    }

    //find occurance of T at least one and not more than 2
    if (/T+/ig.test(config.format) && !(/T{3}/ig.test(config.format))) {
        if (/T{2}/i.test(config.format)) {
            //find occurance of T exactly 2 times
            config.format = config.format.replace(/tt/ig, dateObject.MN > 9 ? dateObject.MN : '0' + dateObject.MN);
        } else {
            //find occurance of T exactly 1 times
            config.format = config.format.replace(/t/ig, dateObject.MN);
        }
    }

    //find occurance of d at least one and not more than 2
    if (/d+/i.test(config.format) && !(/d{3}/i.test(config.format))) {
        if (/d{2}/i.test(config.format)) {
            //find occurance of d exactly 2 times
            config.format = config.format.replace(/dd/ig, dateObject.dd > 9 ? dateObject.dd : '0' + dateObject.dd);
        } else {
            //find occurance of d exactly 1 times
            config.format = config.format.replace(/d/ig, dateObject.dd);
        }
    }

    //find occurance of y atleast 2 times
    if (/y+/i.test(config.format) && !(/y{5}/i.test(config.format))) {
        //find occurance of y exactly 4 times
        if (/y{4}/i.test(config.format)) {
            config.format = config.format.replace(/yyyy/ig, dateObject.yy);
        } else if (!/y{3,}/i.test(config.format)) {
            //find occurance of y not exactly 3 times i.e 2 times
            config.format = config.format.replace(/yy/ig, dateObject.yy.toString().substring(2));
        }
    }

    //find occurance of m at least one and not more than 3
    if (/m+/i.test(config.format) && !(/m{4}/i.test(config.format))) {
        if (/m{3}/.test(config.format)) {
            //find occurance of m exactly 3 times
            config.format = config.format.replace(/mmm/ig, months[dateObject.mm - 1].toLowerCase());
        } else if (/M{3}/.test(config.format)) {
            //find occurance of M exactly 3 times
            config.format = config.format.replace(/MMM/ig, months[dateObject.mm].toUpperCase());
        } else if (/m{2,}/i.test(config.format)) {
            //find occurance of m exactly 2 times
            config.format = config.format.replace(/m{2,}/ig, dateObject.mm > 9 ? dateObject.mm : '0' + (dateObject.mm));
        } else {
            //find occurance of m exactly 1 times
            config.format = config.format.replace(/m{1,}/g, dateObject.mm);
        }
    }

    return config.format;
}

module.exports = angular
    .module('angular-ui-validator', [])
    .directive('uiForm', function() {
        return {
            controller: ['$scope', function($scope) {
                this.reset = function(modelKey) {
                    $scope[modelKey] = null;
                    $scope.$apply();
                };
            }],
            link: function(scope, element, attrs, controller) {

                element.on('reset', function() {
                    var children = element[0].children;
                    for (var key in children) {
                        switch (children[key].type) {
                            case 'text':
                            case 'url':
                            case 'email':
                            case 'password':
                            case 'number':
                            case 'tel':
                                if (children[key].attributes['ng-model']) {
                                    controller.reset(children[key].attributes['ng-model'].value);
                                    break;
                                }
                        }
                    }
                });

                element.on('submit', function() {
                    if (scope[attrs.name].$invalid) {
                        var error = scope[attrs.name].$error;
                        for (var i in error) {
                            error[i].forEach(function(each) {
                                each.$setPristine();
                                each.$dirty = false;
                                // each.$invalid = false;
                            });
                        }
                        element.removeClass('ng-submitted');
                        scope[attrs.name].$submitted = false;
                        scope[attrs.name].$submitError = true;
                        scope.$apply();
                    } else {
                        var submitFunction = scope[attrs.uiForm];
                        if (submitFunction && typeof submitFunction === 'function') {
                            submitFunction();
                        }
                    }
                });

            },
            restrict: 'A'
        };
    })
    .directive('uiRequired', function() {
        return {
            link: uiRequired,
            // scope: true,
            restrict: 'A',
            require: 'ngModel',
            priority: 90
        };
    })
    .directive('uiPattern', function() {
        return {
            link: uiPattern,
            restrict: 'A',
            scope: {
                uiPattern: '='
            },
            require: 'ngModel'

        };
    })
    .directive('uiEmail', function() {
        return {
            link: uiEmail,
            restrict: 'A',
            scope: true,
            require: 'ngModel',
            priority: 80
        };
    })
    .directive('uiUrl', function() {
        return {
            link: uiUrl,
            restrict: 'A',
            scope: true,
            require: 'ngModel'

        };
    })
    .directive('uiMinlength', function() {
        return {
            link: uiMinlength,
            restrict: 'A',
            scope: {
                uiMinlength: '='
            },
            require: 'ngModel'

        };
    })
    .directive('uiMaxlength', function() {
        return {
            link: uiMaxlength,
            restrict: 'A',
            scope: {
                uiMaxlength: '='
            },
            require: 'ngModel'

        };
    })
    .directive('uiLength', function() {
        return {
            link: uiLength,
            restrict: 'A',
            scope: {
                uiLength: '='
            },
            require: 'ngModel'

        };
    })
    .directive('uiAlphanum', function() {
        return {
            link: uiAlphanum,
            restrict: 'A',
            scope: true,
            require: 'ngModel'

        };
    })
    .directive('uiMinwords', function() {
        return {
            link: uiMinwords,
            restrict: 'A',
            scope: {
                uiMinwords: '='
            },
            require: 'ngModel'

        };
    })
    .directive('uiMaxwords', function() {
        return {
            link: uiMaxwords,
            restrict: 'A',
            scope: {
                uiMaxwords: '='
            },
            require: 'ngModel'

        };
    })
    .directive('uiWords', function() {
        return {
            link: uiWords,
            restrict: 'A',
            scope: {
                uiWords: '='
            },
            require: 'ngModel'

        };
    })
    .directive('uiEqualto', function() {
        return {
            link: uiEqualto,
            restrict: 'A',
            scope: {
                uiEqualto: '='
            },
            require: 'ngModel',
            priority: 50
        };
    })
    .directive('uiDigits', function() {
        return {
            link: uiDigits,
            restrict: 'A',
            scope: true,
            require: 'ngModel'

        };
    })
    .directive('uiMin', function() {
        return {
            link: uiMin,
            restrict: 'A',
            scope: {
                uiMin: '='
            },
            require: 'ngModel'

        };
    })
    .directive('uiMax', function() {
        return {
            link: uiMax,
            restrict: 'A',
            scope: {
                uiMax: '='
            },
            require: 'ngModel'

        };
    })
    .directive('uiRange', function() {
        return {
            link: uiRange,
            restrict: 'A',
            scope: {
                uiRange: '='
            },
            require: 'ngModel'

        };
    })
    .directive('uiMinDate', function() {
        return {
            link: uiMinDate,
            restrict: 'A',
            scope: {
                uiMinDate: '='
            },
            require: 'ngModel'

        };
    })
    .directive('uiMaxDate', function() {
        return {
            link: uiMaxDate,
            restrict: 'A',
            scope: {
                uiMaxDate: '='
            },
            require: 'ngModel'

        };
    })
    .directive('uiBetween', function() {
        return {
            link: uiBetween,
            restrict: 'A',
            scope: {
                uiBetween: '='
            },
            require: 'ngModel'

        };
    })
    .directive('uiInteger', function() {
        return {
            link: uiInteger,
            restrict: 'A',
            scope: {
                uiInteger: '='
            },
            require: 'ngModel'

        };
    })
    .directive('uiFloat', function() {
        return {
            link: uiFloat,
            restrict: 'A',
            scope: {
                uiFloat: '='
            },
            require: 'ngModel'

        };
    })
    .directive('uiNumber', function() {
        return {
            link: function(scope, element, attrs) {
                element.on('keydown', function(ev) {
                    switch (ev.keyCode) {
                        case 48:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                        case 96:
                        case 97:
                        case 98:
                        case 99:
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                        case 104:
                        case 105:
                        case 8:
                        case 9:
                        case 13:
                            break;
                        case 190:
                            if (!attrs.uiNumber)
                                ev.preventDefault();
                            break;
                        default:
                            ev.preventDefault();
                            break;
                    }
                });
            },
            restrict: 'A',
            priority: 99
        };
    })
    .directive('uiAllowedUpto', function() {
        return {
            link: function(scope, element, attrs) {
                attrs.uiAllowedUpto = Number(attrs.uiAllowedUpto);
                if (!isNaN(attrs.uiAllowedUpto)) {

                    element.on('keydown', function(ev) {

                        switch (ev.keyCode) {
                            case 8:
                            case 9:
                            case 13:
                                break;
                            default:
                                if (element.val().length >= attrs.uiAllowedUpto) {
                                    ev.preventDefault();
                                }
                                break;
                        }

                    });

                }
            },
            restrict: 'A',
            priority: 95
        };
    })
    .directive('uiFormattedDate', function() {
        return {
            link: function(scope, element, attrs) {
                element.on('change', function() {
                    element.val(getDateString({
                        date: element.val(),
                        format: attrs.uiFormattedDate
                    }));
                });
            },
            restrict: 'A'
        };
    })
    .directive('uiExactLength', function() {
        return {
            link: function(scope, element, attrs, ngModel) {
                init(element, ngModel);
                ngModel.$parsers.push(function(viewValue) {
                    var flag = evaluateRegExp(scope.uiPattern, viewValue);

                    ngModel.$setValidity('uiPattern', flag);

                    if (flag) {
                        return viewValue;
                    }
                });
            },
            restrict: 'A',
            priority: 95,
            scope: {
                uiExactLength: '='
            },
            require: 'ngModel'
        };
    })

function evaluateRegExp(regExp, value) {
    return new RegExp(regExp || '').test(value);
}

function countWords(value) {
    return value.match(/\S/g).length;
}

function compare(target, source) {
    if (target === source) {
        return 0;
    }

    if (target > source) {
        return 1;
    }

    return -1;
}


function init(element, ngModel) {
    ngModel.$setUntouched();
    ngModel.$setPristine();
}

function uiRequired(scope, element, attrs, ngModel) { //here is the model
    init(element, ngModel);


    ngModel.$validators.uiRequired = function(modelValue, viewValue) {
        var value = modelValue || viewValue;
        return value ? true : false;
    };
}

function uiPattern(scope, element, attrs, ngModel) {

    init(element, ngModel);
    ngModel.$parsers.push(function(viewValue) {
        var flag = evaluateRegExp(scope.uiPattern, viewValue);

        ngModel.$setValidity('uiPattern', flag);

        if (flag) {
            return viewValue;
        }

    });
}

function uiEmail(scope, element, attrs, ngModel) {

    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
        if (viewValue) {
            var flag = evaluateRegExp(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/, viewValue);

            ngModel.$setValidity('uiEmail', flag);

            if (flag) {
                return viewValue;
            }
        } else {
            return viewValue;
        }
    });
}

function uiUrl(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
        if (viewValue) {
            var flag = evaluateRegExp(/(http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/, viewValue);

            ngModel.$setValidity('uiUrl', flag);

            if (flag) {
                return viewValue;
            }
        } else {
            return viewValue;
        }
    });
}

function uiMinlength(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
        if (viewValue) {
            var flag = true;

            if (viewValue) {
                flag = evaluateRegExp('^.{' + scope.uiMinlength + ',}$', viewValue);
            }

            ngModel.$setValidity('uiMinLength', flag);

            if (flag) {
                return viewValue;
            }
        } else {
            return viewValue;
        }
    });
}

function uiMaxlength(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
        if (viewValue) {
            var flag = evaluateRegExp('^.{0,' + scope.uiMaxlength + '}$', viewValue);

            ngModel.$setValidity('uiMaxLength', flag);

            if (flag) {
                return viewValue;
            }
        } else {
            return viewValue;
        }
    });
}

function uiLength(scope, element, attrs, ngModel) {

    init(element, ngModel);

    if (typeof scope.uiLength === 'object') {

        if (Array.isArray(scope.uiLength) && scope.uiLength.length === 2) {
            scope.uiLength.min = scope.uiLength[0] < scope.uiLength[1] ? scope.uiLength[0] : scope.uiLength[1];
            scope.uiLength.max = scope.uiLength[0] > scope.uiLength[1] ? scope.uiLength[0] : scope.uiLength[1];
        }

        ngModel.$parsers.push(function(viewValue) {
            if (viewValue) {
                var flag = true;

                if (viewValue) {
                    flag = evaluateRegExp('^.{' + scope.uiLength.min + ',' + scope.uiLength.max + '}$', viewValue);
                }

                ngModel.$setValidity('uiLength', flag);

                if (flag) {
                    return viewValue;
                }
            } else {
                return viewValue;
            }
        });
    }
}

function uiEqualto(scope, element, attrs, ngModel) {

    init(element, ngModel);

    // ngModel.$parsers.push(function(viewValue) {

    //     var flag = true;
    //     console.log('parser', ngModel);
    //     if (viewValue) {
    //         flag = compare(viewValue, scope.uiEqualto) === 0 ? true : false;

    //         ngModel.$setValidity('uiEqualto', flag);

    //         if (flag) {
    //             return viewValue;
    //         }
    //     } else {
    //         return viewValue;
    //     }

    // });

    ngModel.$validators.uiEqualto = function(modelValue) {
        return modelValue == scope.uiEqualto;

    };

    scope.$watch("uiEqualto", function() {
        ngModel.$validate();
    });
}

function uiAlphanum(scope, element, attrs, ngModel) {

    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
        if (viewValue) {
            var flag = true;

            if (viewValue) {
                flag = evaluateRegExp(/^[a-zA-Z0-9]+$/, viewValue);
            }

            ngModel.$setValidity('uiAlphanum', flag);

            if (flag) {
                return viewValue;
            }
        } else {
            return viewValue;
        }
    });

}

function uiMinwords(scope, element, attrs, ngModel) {

    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
        if (viewValue) {
            var flag = true;

            if (viewValue) {
                flag = compare(countWords(viewValue), (scope.uiMinwords || 0)) > -1 ? true : false;
            }

            ngModel.$setValidity('uiMinWords', flag);

            if (flag) {
                return viewValue;
            }
        } else {
            return viewValue;
        }

    });

}

function uiMaxwords(scope, element, attrs, ngModel) {

    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {

        if (viewValue) {
            var flag = true;

            if (viewValue) {
                flag = compare(countWords(viewValue), scope.uiMaxwords) === 1 ? false : true;
            }

            ngModel.$setValidity('uiMaxWords', flag);

            if (flag) {
                return viewValue;
            }
        } else {
            return viewValue;
        }
    });

}

function uiWords(scope, element, attrs, ngModel) {

    init(element, ngModel);

    if (typeof scope.uiWords === 'object') {

        if (Array.isArray(scope.uiWords) && scope.uiWords.length === 2) {
            scope.uiWords.minWords =
                scope.uiWords[0] < scope.uiWords[1] ? scope.uiWords[0] : scope.uiWords[1];
            scope.uiWords.maxWords =
                scope.uiWords[0] > scope.uiWords[1] ? scope.uiWords[0] : scope.uiWords[1];
        }

        ngModel.$parsers.push(function(viewValue) {
            if (viewValue) {
                var flag = true,
                    totalWords;

                if (viewValue) {
                    totalWords = countWords(viewValue);
                    flag = compare(totalWords >= scope.uiWords.minWords) &&
                        compare(totalWords <= scope.uiWords.minWords);
                }

                ngModel.$setValidity('uiWords', flag);

                if (flag) {
                    return viewValue;
                }
            } else {
                return viewValue;
            }
        });
    }
}

function uiDigits(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
        if (viewValue) {
            var flag = evaluateRegExp(/^\d{1,}$/, viewValue);
            ngModel.$setValidity('uiDigits', flag);

            if (flag) {
                return viewValue;
            }
        } else {
            return viewValue;
        }
    });
}

function uiInteger(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
        if (viewValue) {
            var flag = evaluateRegExp(/^\d+$/, viewValue);
            ngModel.$setValidity('uiInteger', flag);

            if (flag) {
                return viewValue;
            }
        } else {
            return viewValue;
        }
    });
}

function uiFloat(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
        if (viewValue) {
            var flag = evaluateRegExp(/^\d+.\d+$/, viewValue);
            // var flag = evaluateRegExp(/^-?(\d+\.?\d+)$|(\d*\.?\d+)$/, viewValue);
            ngModel.$setValidity('uiFloat', flag);

            if (flag) {
                return viewValue;
            }
        } else {
            return viewValue;
        }
    });
}

function uiMin(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {

        if (viewValue) {
            var flag = Number(viewValue) >= scope.uiMin ? true : false;

            ngModel.$setValidity('uiMin', flag);

            if (flag) {
                return viewValue;
            }
        } else {
            return viewValue;
        }
    });
}

function uiMax(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
        if (viewValue) {
            var flag = Number(viewValue) <= scope.uiMax ? true : false;

            ngModel.$setValidity('uiMax', flag);

            if (flag) {
                return viewValue;
            }
        } else {
            return viewValue;
        }
    });
}

function uiRange(scope, element, attrs, ngModel) {
    init(element, ngModel);

    if (typeof scope.uiRange === 'object') {

        if (Array.isArray(scope.uiRange) && scope.uiRange.length === 2) {
            scope.uiRange.min = scope.uiRange[0] < scope.uiRange[1] ? scope.uiRange[0] : scope.uiRange[1];
            scope.uiRange.max = scope.uiRange[0] > scope.uiRange[1] ? scope.uiRange[0] : scope.uiRange[1];
        }

        ngModel.$parsers.push(function(viewValue) {
            if (viewValue) {
                var temp = Number(viewValue);

                var flag = (temp >= scope.uiRange.min) && (temp <= scope.uiRange.max) ? true : false;

                ngModel.$setValidity('uiRange', flag);

                if (flag) {
                    return viewValue;
                }
            } else {
                return viewValue;
            }

        });
    }
}

function uiMinDate(scope, element, attrs, ngModel) {

    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
        if (viewValue) {
            var flag = compare(new Date(viewValue), new Date(scope.uiMinDate)) > -1 ? true : false;

            ngModel.$setValidity('uiMinDate', flag);

            if (flag) {
                return viewValue;
            }
        } else {
            return viewValue;
        }

    });

}

function uiMaxDate(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
        if (viewValue) {
            var flag = compare(new Date(viewValue), new Date(scope.uiMaxDate)) != 1 ? true : false;

            ngModel.$setValidity('uiMaxDate', flag);

            if (flag) {
                return viewValue;
            }
        } else {
            return viewValue;
        }

    });
}

function uiBetween(scope, element, attrs, ngModel) {
    init(element, ngModel);

    if (typeof scope.uiBetween === 'object') {

        if (Array.isArray(scope.uiBetween) && scope.uiBetween.length === 2) {
            scope.uiBetween.minBetween =
                scope.uiBetween[0] < scope.uiBetween[1] ? scope.uiBetween[0] : scope.uiBetween[1];
            scope.uiBetween.maxBetween =
                scope.uiBetween[0] > scope.uiBetween[1] ? scope.uiBetween[0] : scope.uiBetween[1];
        }

        ngModel.$parsers.push(function(viewValue) {

            if (viewValue) {

                var flag = true;

                flag = compare(new Date(viewValue), new Date(scope.uiBetween.minBetween)) > -1 &&
                    compare(new Date(viewValue), new Date(scope.uiBetween.maxBetween)) < 1;

                ngModel.$setValidity('uiBetween', flag);

                if (flag) {
                    return viewValue;
                }
            } else {
                return viewValue;
            }

        });
    }
}
},{}],56:[function(require,module,exports){
module.exports={
  "name": "erticulate",
  "version": "1.3.6",
  "description": "",
  "scripts": {
    "start": "gulp build",
    "watch": "gulp",
    "production": "NODE_ENV=production gulp",
    "development": "NODE_ENV=development gulp"
  },
  "dependencies": {
    "angular-google-analytics": "^1.1.8",
    "angular-uuid": "0.0.4",
    "get-blob-duration": "^1.0.0",
    "gulp": "3.9.1",
    "gulp-browserify": "0.5.1",
    "gulp-concat": "2.6.0",
    "gulp-if": "1.2.5",
    "gulp-minify-css": "0.3.13",
    "gulp-rename": "1.2.2",
    "gulp-sass": "1.3.3",
    "gulp-uglify": "1.5.4",
    "stringify": "3.2.1"
  },
  "devDependencies": {
    "gulp-ng-annotate": "1.1.0",
    "gulp-notify": "2.2.0",
    "gulp-plumber": "1.1.0"
  }
}

},{}]},{},[1])